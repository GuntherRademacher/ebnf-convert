/*
 * Gradle build file for Convert - Grammar Converter.
 */

plugins {
    id 'java'
    id 'war'
    id 'com.github.jk1.dependency-license-report' version '1.16'
    id 'maven-publish'
    id 'signing'
}

defaultTasks 'build'
build.dependsOn 'distZip'

version = '0.65-SNAPSHOT'
group = 'de.bottlecaps.convert'
def buildTime = new Date()
def aceVersion = '1.15.2'
def rrVersion = '2.1-SNAPSHOT'

def generatedSrc = "$buildDir/generated-src/main"

sourceSets {
    main {
        java {
            srcDirs += ["$generatedSrc/java"]
        }
        resources {
            srcDirs += ["$generatedSrc/resources"]
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations {
    ace
	rrLib
	rrWebapp
}

dependencies {
    ace "org.webjars.npm:ace-builds:$aceVersion"
	rrLib "de.bottlecaps.rr:rr-lib:$rrVersion"
	rrWebapp "de.bottlecaps.rr:rr-webapp:$rrVersion"

    compileOnly 'org.apache.tomcat:tomcat-servlet-api:8.5.87'
    compileOnly "de.bottlecaps.rr:rr-lib:$rrVersion"

    implementation 'net.sf.saxon:Saxon-HE:12.0'
    implementation 'org.xmlresolver:xmlresolver:4.6.0'
    implementation 'commons-fileupload:commons-fileupload:1.5'
    implementation 'commons-io:commons-io:2.11.0'
}

configurations.all {
    transitive = false
}

jar {
    manifest {
        attributes (
            'Implementation-Version': archiveVersion,
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(buildTime)
        )
    }
    from({zipTree(configurations.rrLib.singleFile)}) {
        include 'de/bottlecaps/railroad/xq/*'
        include 'de/bottlecaps/railroad/core/CrLfNormalizer*'
        include 'de/bottlecaps/railroad/core/Download*'
        include 'de/bottlecaps/railroad/core/ExtensionFunctions*'
        include 'de/bottlecaps/railroad/core/Parser*'
        include 'de/bottlecaps/xml/*'
        include 'de/bottlecaps/webapp/*'
        include 'de/bottlecaps/webapp/servlet/*'
        exclude 'de/bottlecaps/webapp/server'
    }
    rootSpec.exclude 'de/bottlecaps/convert/ClasspathUrlStreamHandlerProvider*'
    rootSpec.exclude 'META-INF/services'
    archiveFileName = "${project.name}.jar"
}

licenseReport {
    outputDir = "$buildDir/LICENSE"
    configurations = ['runtimeClasspath', 'ace']
    renderers = [new com.github.jk1.license.render.TextReportRenderer()]
}

task generateSrc {
    doFirst {
        def aceBuilds = configurations.ace.find { it =~ /ace-builds/ }
        def zip = new java.util.zip.ZipFile(aceBuilds)
        ['ace.js', 'ext-searchbox.js'].each { script ->
            def entry = zip.getEntry("META-INF/resources/webjars/ace-builds/$aceVersion/src-min-noconflict/$script")
            def file = new File("$generatedSrc/resources/htdocs/$script")
            file.parentFile.exists() || file.parentFile.mkdirs()
            file.withWriter { it << zip.getInputStream(entry) }
        }

        def convertVersion = new File("$generatedSrc/java/de/bottlecaps/convert", 'ConvertVersion.java')
        convertVersion.parentFile.exists() || convertVersion.parentFile.mkdirs()
        convertVersion.withWriter {
            it << $/package de.bottlecaps.convert;

public class ConvertVersion
{
  public static final String PROJECT_NAME = "$project.name";
  public static final String VERSION = "$version";
  public static final String DATE = "${new java.text.SimpleDateFormat("MMM dd, yyyy", Locale.US).format(buildTime)}";
}
/$
        }
    }
}

compileJava {
    dependsOn generateSrc
    options.release = 11
}

java {
    withJavadocJar()
    withSourcesJar()
}

task generateLicense {
    doFirst {
        def calendar = Calendar.getInstance()
        calendar.setTime(buildTime)
        def year = calendar.get(Calendar.YEAR)
        def licenseTxt = new File("$buildDir", 'LICENSE.TXT')
        licenseTxt.parentFile.exists() || licenseTxt.parentFile.mkdirs()
        licenseTxt.withWriter {
            it << $/Convert - Grammar Converter

Copyright 2010-$year Gunther Rademacher <grd@gmx.net>

Licensed under the Apache 2.0 License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.

This distribution also includes

      - Saxon-HE from Saxonica.com
      - TagSoup
      - Apache Batik
      - Apache XML Graphics Commons
      - Apache XML Commons XML APIs
      - Ace Editor

For their license information see THIRD-PARTY-NOTICES.txt.

Thank you for choosing Convert - Grammar Converter.
/$
        }
    }
}

war {
    dependsOn jar, generateLicense, generateLicenseReport
    manifest {
        attributes (
            'Main-Class': 'de.bottlecaps.fatjar.Loader',
            'FatJar-Main-Class': 'de.bottlecaps.convert.Convert',
            'FatJar-Jars': 'WEB-INF/lib/' + jar.archiveFileName.get() + ' ' + configurations.runtimeClasspath.collect{'WEB-INF/lib/' + it.name}.join(' '),
            'Implementation-Version': archiveVersion,
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(buildTime)
        )
    }
    into('LICENSE') {
        from "$buildDir/LICENSE.txt"
        from "$buildDir/LICENSE/THIRD-PARTY-NOTICES.txt"
    }
    from({zipTree(configurations.rrWebapp.singleFile)}) {
        include 'de/bottlecaps/fatjar/*'
    }
    classpath jar
    rootSpec.exclude 'de'
    rootSpec.exclude 'htdocs'
    rootSpec.exclude 'META-INF'
    archiveFileName = "${project.name}.war"
}

task distZip(type:JavaExec) {
    dependsOn war
    mainClass = '-jar'
    args "$buildDir/libs/convert.war", '-distZip'
    workingDir = "$buildDir/distributions"

    doFirst {
      mkdir workingDir
    }
}

ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

void configureMetadata(MavenPublication mavenPublication) {
    configure (mavenPublication) {
        pom {
            name = groupId + ':' + artifactId
            description = 'Grammar Converter'
            url = 'https://bottlecaps.de/convert'
            licenses {
                license {
                    name = 'Apache-2.0'
                    url = 'https://opensource.org/licenses/Apache-2.0'
                }
            }
            developers {
                developer {
                    name = 'Gunther Rademacher'
                    email = 'grd@gmx.net'
                    organization = 'Gunther Rademacher'
                    organizationUrl = 'https://bottlecaps.de/'
                }
            }
            scm {
                connection = 'git@github.com:GuntherRademacher/convert.git'
                developerConnection = 'git@github.com:GuntherRademacher/convert.git'
                url = 'https://github.com/GuntherRademacher/convert'
            }
        }
    }
}

publishing {
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }

    publications {
        jar(MavenPublication) {
            artifactId = 'convert-lib'
            from components.java
            configureMetadata delegate
        }
        war(MavenPublication) {
            artifactId = 'convert-webapp'
            from components.web
            configureMetadata delegate
        }
    }
}

signing {
    sign publishing.publications.jar
    sign publishing.publications.war
}
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}