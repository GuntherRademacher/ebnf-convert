<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Thu Jan 30, 2025 13:23 (UTC+01) by REx v6.1 which is Copyright (c) 1979-2025 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: -q -backtrack -tree -a none -xslt -name de/bottlecaps/convert/xq/antlr_4/antlr_4.xslt ../../../../../../../main/java/de/bottlecaps/convert/antlr_4/antlr_4.ebnf -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="de/bottlecaps/convert/xq/antlr_4/antlr_4.xslt">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="11"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    65, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 5, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 28, 30, 28, 31, 28, 32, 28, 33, 28, 28, 28,
    28, 28, 28, 34, 35, 36, 5, 37, 5, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 47, 54, 55, 56, 57, 47, 58, 59, 60, 47, 61, 62, 63, 64, 5
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    216, 448, 337, 279, 311, 379, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 391, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 423,
    247, 480, 536, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 586, 650, 650, 347, 649, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650,
    650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650,
    650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650,
    650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650,
    650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 504, 617, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650,
    650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 682,
    691, 683, 683, 699, 707, 715, 721, 729, 746, 770, 753, 814, 784, 792, 800, 761, 761, 761, 761, 761, 761, 762, 761, 899, 899, 900, 775, 980, 980, 981, 980,
    899, 980, 736, 980, 899, 980, 899, 980, 736, 980, 929, 980, 899, 980, 980, 980, 980, 980, 980, 980, 980, 980, 738, 980, 738, 980, 738, 980, 737, 980, 738,
    876, 876, 876, 876, 876, 876, 876, 876, 876, 876, 876, 876, 876, 876, 884, 982, 969, 856, 898, 899, 896, 738, 980, 980, 980, 867, 940, 928, 928, 928, 971,
    908, 899, 899, 899, 899, 899, 899, 980, 980, 980, 980, 980, 980, 928, 928, 928, 928, 866, 822, 928, 928, 928, 928, 928, 928, 927, 823, 928, 928, 928, 928,
    928, 928, 864, 845, 997, 928, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980,
    980, 980, 980, 980, 980, 761, 761, 928, 928, 928, 928, 928, 980, 898, 899, 899, 899, 775, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980,
    980, 980, 980, 980, 980, 980, 980, 980, 899, 899, 899, 899, 776, 970, 980, 980, 980, 980, 980, 980, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928,
    928, 928, 928, 928, 928, 928, 928, 824, 969, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 929, 929, 822, 928, 928, 928, 928, 928, 832, 994,
    958, 847, 843, 930, 919, 855, 886, 971, 918, 929, 834, 928, 928, 919, 928, 761, 807, 761, 761, 761, 761, 761, 762, 760, 761, 761, 761, 761, 761, 980, 980,
    980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 928, 928, 928, 928, 928, 824, 980, 980, 928, 928, 928, 980, 980, 980, 980,
    980, 980, 980, 980, 980, 980, 980, 980, 980, 888, 939, 915, 912, 948, 998, 738, 868, 970, 980, 980, 980, 899, 899, 980, 980, 887, 980, 761, 761, 761, 761,
    761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 899, 899, 899,
    899, 899, 775, 980, 980, 980, 980, 980, 980, 957, 931, 835, 868, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 864, 949, 966, 980, 980, 980,
    980, 822, 928, 822, 928, 928, 928, 928, 928, 928, 928, 980, 990, 928, 949, 864, 980, 928, 864, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 979, 980,
    980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980,
    65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 3, 2, 0, 0, 4, 5, 6, 7, 8, 5, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 22,
    23, 24, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 47, 47, 47, 47, 28, 28, 28, 28, 29, 28, 30, 28, 28, 28, 34, 35, 36, 5, 37, 5, 5, 5, 5, 5, 5, 5,
    5, 37, 31, 28, 32, 28, 33, 28, 28, 28, 28, 28, 28, 28, 47, 28, 45, 46, 47, 48, 49, 50, 51, 52, 53, 47, 54, 55, 56, 57, 47, 58, 59, 60, 47, 61, 62, 63, 64,
    5, 5, 5, 5, 47, 47, 5, 5, 38, 39, 40, 41, 42, 43, 44, 47, 47, 28, 47, 28, 47, 28, 47, 47, 47, 28, 28, 47, 28, 47, 28, 47, 47, 28, 47, 47, 28, 47, 47, 47,
    28, 28, 47, 28, 28, 47, 28, 28, 47, 28, 28, 28, 47, 28, 47, 28, 28, 28, 47, 28, 47, 47, 47, 47, 47, 47, 47, 28, 28, 37, 37, 37, 37, 37, 37, 37, 37, 28, 47,
    28, 47, 47, 47, 28, 47, 47, 47, 47, 28, 28, 28, 47, 28, 28, 28, 28, 28, 28, 28, 28, 5, 47, 28, 28, 47, 47, 28, 28, 28, 28, 28, 47, 47, 28, 47, 47, 28, 47,
    28, 28, 28, 28, 47, 28, 47, 28, 47, 28, 47, 28, 28, 28, 47, 47, 47, 28, 28, 28, 47, 47, 47, 47, 47, 47, 47, 28, 47, 28, 47, 47, 28, 47, 28, 28, 28, 47, 47,
    28, 28, 47, 47, 28, 47, 47, 47, 47, 47, 47, 28, 47, 47, 28, 5, 47, 47, 47, 47, 47, 47, 47, 47, 5, 47, 47, 28, 47, 28, 47, 28, 28, 47, 28, 47, 28, 28, 28,
    28, 47, 47
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 63744, 64976, 65008, 65279, 65280, 65313, 65536, 63743, 64975, 65007, 65278, 65279, 65312, 65533, 1114111, 5, 47, 5, 47, 5, 47, 37, 5
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
    42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2112, 2366, 2364, 2366, 2349, 4738, 2589, 3617, 2590, 3516, 3061, 2128, 3392, 3391, 2151, 2163, 2179, 2297, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2318, 2366, 2364, 2366, 2334, 3527, 2589, 2895, 2590, 3266, 5236, 4649, 2589, 2589,
    2382, 2394, 2620, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2432, 2366, 2446, 2366, 2450, 2589, 2589, 2589,
    2589, 2589, 2589, 4649, 2589, 2589, 2382, 2466, 2495, 2552, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2112, 2366,
    2364, 2366, 2349, 4738, 2589, 5791, 2590, 3516, 3061, 2128, 3392, 3391, 2151, 2163, 2179, 2297, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2571, 2589, 2587, 2589, 2302, 4738, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2636, 2589, 2652, 2589, 2302, 2194, 2589, 5712, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 4789,
    2670, 2705, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 2589, 2587, 3967, 2727, 4738, 2589, 3617, 2590, 3516,
    3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 2589, 2587, 2589,
    2302, 4738, 2589, 3617, 2590, 4189, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2785, 2589, 2801, 2814, 2818, 3797, 2589, 3855, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 2589, 2834, 2847, 2851, 4738, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2867, 3284, 2883, 3356, 3364, 4738, 2589, 3617, 2590, 3516, 3061, 5232,
    3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 2589, 2587, 4158, 2911, 2957,
    2589, 3032, 2590, 4638, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2571, 3275, 2587, 5656, 2988, 4738, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2571, 3019, 3048, 3057, 2711, 4738, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3077, 2589, 2587, 4200, 2742, 4738, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391,
    5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3093, 2589, 3109, 3140, 3155, 2926, 2589, 3617,
    2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3186, 3204,
    3202, 3204, 3220, 3251, 2589, 3617, 2590, 3308, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2571, 2654, 3343, 2589, 2302, 2224, 5418, 4526, 5419, 3380, 4708, 5415, 2523, 2281, 4858, 5182, 3408, 3424, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3446, 3477, 3462, 3485, 2416, 3501, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182,
    2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3543, 3559, 3605, 3633, 3645, 4738, 2589, 3617, 2590, 3516,
    3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 2589, 2587, 3572,
    3661, 4738, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 3703, 3909, 3719, 2589, 3687, 4571, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 3747, 3743, 3763, 3430, 4738, 2589, 3783, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 2589, 2587, 2555, 3813, 4738, 2589, 3617, 2590, 3516, 3061, 5232,
    3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 3898, 3871, 3887, 4222, 4738,
    2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    3925, 3327, 3941, 3983, 4003, 2209, 5418, 4526, 5419, 3380, 5281, 4046, 2523, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 3925, 3327, 3941, 3983, 4003, 2209, 5418, 4526, 5419, 3380, 4708, 5415, 2523, 2281, 4858, 5182, 2606, 2410, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3925, 3327, 3941, 3983, 4003, 2209, 5418, 2536, 5419, 3676, 4923, 5415, 5371, 2281,
    4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3925, 3327, 3941, 3983, 4003, 2209, 5418, 2536,
    5419, 3676, 4923, 5415, 5371, 2281, 4065, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3925, 3327,
    3941, 3983, 4003, 2209, 5418, 2536, 5419, 3676, 4923, 5415, 4513, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 3925, 3327, 3941, 3983, 3987, 2209, 5418, 2536, 5419, 3676, 4923, 5415, 5371, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3925, 3327, 3941, 3983, 4003, 2209, 5418, 2536, 5419, 3676, 4923, 5415, 5371, 2281, 4889, 5182,
    2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 3925, 3327, 3941, 3983, 4003, 2209, 5418, 2536, 5419, 3676,
    4923, 5415, 5371, 5358, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 4081, 2589, 4111, 4095,
    4124, 4738, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 4140, 2589, 4156, 2589, 2302, 2479, 2589, 4030, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 4685, 4174, 4216, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 4238, 2589, 2587, 2589, 3767, 4738, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 2589, 2587, 2589, 2302, 2209, 5418, 2536, 5419, 3676, 4923, 5415,
    5371, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283, 4591, 2209,
    4318, 4303, 3170, 3380, 4345, 5415, 5080, 5124, 4858, 4361, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2571, 4656, 4254, 4283, 4591, 2209, 5418, 4526, 5419, 3380, 4708, 5415, 2523, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4377, 5534, 2209, 5418, 4526, 3235, 3380, 4397, 5415, 2523, 2281, 4858, 5019, 2606, 2410, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283, 4591, 2209, 5418, 4267, 5419, 3380, 4708, 5415, 2523, 2281,
    4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283, 4591, 2209, 4413, 4526,
    4920, 4439, 4455, 4471, 4974, 4500, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656,
    4542, 4587, 4827, 2209, 5418, 4526, 5419, 3380, 4708, 5415, 2523, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 4607, 4656, 4623, 4283, 4591, 2209, 5418, 2536, 5419, 3843, 4672, 4701, 5371, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283, 4591, 2209, 2510, 4724, 5419, 3676, 4923, 5267, 5371, 2281, 4858, 5182,
    2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4754, 4945, 2209, 2269, 2536, 5419, 3956,
    4776, 5415, 5371, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283,
    4591, 2209, 5418, 2536, 5419, 3676, 4923, 5415, 5371, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2571, 4656, 4254, 4283, 4591, 2209, 5418, 2536, 2941, 3676, 4923, 5415, 5371, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4805, 4821, 4591, 2209, 5418, 2536, 5419, 3676, 4923, 4843, 5371, 4874, 4858, 5182, 2606, 2410,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 3292, 4905, 4939, 4760, 2209, 5201, 2536, 5419, 4018, 4923, 4961,
    5371, 2281, 4990, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283, 4591, 2209,
    5418, 2536, 3003, 3676, 5006, 5035, 5051, 5067, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2571, 3727, 5096, 5112, 5505, 2239, 5140, 2536, 5419, 3676, 5156, 5198, 5217, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 5252, 4283, 4287, 2254, 4049, 2536, 2972, 3676, 4923, 5415, 5371, 2281, 4858, 5182, 2606, 2410, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 5297, 4283, 4591, 5313, 2757, 2536, 5329, 3676, 4923, 5345, 5400, 2769,
    4858, 5435, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283, 4591, 2209, 5418, 2536,
    5419, 3828, 5451, 5415, 4484, 5595, 5467, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656,
    5483, 5499, 4423, 2209, 5418, 5384, 3124, 3676, 4923, 5415, 5371, 5521, 5550, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283, 4381, 2209, 5418, 2536, 5419, 3676, 5566, 5415, 5371, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283, 4591, 2209, 5418, 2536, 5419, 3676, 4923, 5582, 5371, 2281, 4858, 5182,
    2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283, 4591, 2209, 5418, 2536, 5611, 3676,
    4923, 5415, 5371, 2281, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 4656, 4254, 4283,
    4591, 2209, 5418, 2536, 5419, 3676, 4923, 5415, 5371, 4329, 4858, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 5627, 5654, 5643, 2685, 2689, 4738, 2589, 4557, 2590, 3516, 3061, 5232, 3392, 3391, 5672, 5684, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 3319, 5700, 3585, 3589, 4738, 2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410,
    2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 5730, 5728, 2589, 2302, 4738, 2589, 3617, 2589, 3516, 5811, 5232,
    3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2571, 2589, 5746, 5759, 5763, 4738,
    2589, 3617, 2590, 3516, 3061, 5232, 3392, 3391, 5170, 5182, 2606, 2410, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 5779, 5807, 2135, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589,
    2589, 2589, 2589, 2589, 2589, 2589, 1024, 1024, 26112, 1024, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 2048, 0, 0, 3226,
    0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26624, 26624, 0, 0, 0, 0, 234, 4244, 227, 3226, 0, 0, 0, 0, 227, 234, 4244, 3226, 0, 242, 4244, 3226, 0, 4244,
    3226, 4346, 3324, 4346, 251, 3324, 253, 4350, 255, 3328, 257, 4354, 4350, 266, 255, 3334, 3328, 269, 257, 266, 4363, 273, 269, 3342, 275, 0, 0, 0, 0, 25173,
    0, 23552, 88, 0, 0, 0, 0, 0, 0, 24064, 0, 0, 0, 0, 25173, 27734, 87, 88, 0, 27226, 0, 27226, 0, 0, 24064, 0, 0, 0, 0, 25173, 27734, 87, 88, 0, 27226, 0,
    27226, 24669, 0, 24064, 0, 0, 0, 0, 25173, 27734, 87, 88, 0, 27226, 0, 27260, 0, 0, 24064, 0, 0, 0, 0, 25173, 27734, 87, 88, 0, 27226, 123, 27226, 0, 0,
    24064, 0, 0, 0, 0, 27226, 27226, 0, 0, 27226, 0, 27226, 27275, 27226, 27226, 27226, 27226, 27226, 4244, 0, 0, 3226, 0, 0, 27226, 0, 27226, 27226, 27226,
    273, 0, 275, 255, 257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 34304, 0, 0, 0, 26112, 0, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680,
    25680, 25680, 2048, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 1024, 0, 0, 25680, 25680, 25680, 25680, 25680,
    25680, 25680, 25680, 25680, 25680, 25680, 25680, 1024, 0, 34304, 25680, 2560, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680,
    25680, 25680, 25680, 25680, 25680, 234, 0, 227, 0, 0, 0, 0, 0, 227, 234, 0, 0, 0, 242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 257, 255, 0, 257, 255,
    257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 12288, 1024, 0, 34304, 0, 0, 0, 26112, 0, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680,
    25680, 0, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 25680, 0, 0, 0, 25680, 0, 242, 0, 0, 0, 0, 0, 251, 253,
    251, 251, 253, 253, 0, 0, 0, 0, 120, 0, 121, 122, 0, 0, 0, 0, 0, 0, 24064, 0, 0, 266, 0, 266, 0, 269, 0, 269, 0, 266, 266, 266, 269, 269, 269, 0, 0, 0, 0,
    27226, 27226, 0, 135, 27226, 0, 27226, 27226, 27276, 27226, 27226, 27226, 1024, 4244, 0, 0, 3226, 0, 0, 0, 27226, 0, 0, 27226, 0, 0, 117, 4244, 0, 25173,
    87, 88, 0, 27226, 125, 3226, 0, 0, 266, 0, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17408, 17408, 17408, 1024, 1024, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 2048, 0, 2560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 257, 4244, 4350, 0, 255, 3226, 3328, 0, 257, 0, 4350, 255, 0, 3328, 257, 0, 255,
    0, 255, 0, 257, 0, 257, 0, 255, 255, 0, 257, 257, 0, 1024, 1024, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2135, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 24669, 264, 4244, 4363, 0, 268, 3226, 3342, 0, 271, 0, 4354, 260, 0, 3334, 264, 0, 0, 0, 0, 30208, 30208, 30208, 30208, 30208, 30208, 30208, 30208,
    30208, 30208, 30208, 30208, 1024, 0, 34304, 0, 260, 0, 264, 260, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13312, 13312, 1024, 0, 34304, 0, 21504, 21504, 21504,
    0, 21504, 0, 21504, 0, 21504, 21504, 21504, 21504, 1024, 0, 34304, 0, 0, 0, 113, 113, 113, 0, 113, 113, 0, 113, 113, 1024, 0, 34304, 0, 0, 0, 131, 27226,
    27226, 0, 0, 27272, 0, 27226, 27272, 27226, 27226, 27226, 27226, 27226, 4244, 8192, 0, 3226, 0, 0, 27226, 0, 27226, 27226, 27226, 1024, 1024, 0, 1024, 0, 0,
    0, 0, 0, 0, 0, 25173, 0, 0, 0, 2136, 25173, 88, 0, 0, 0, 0, 0, 0, 25173, 0, 0, 0, 25173, 0, 25173, 0, 0, 25173, 25173, 25173, 25173, 25173, 25173, 25173,
    25173, 25173, 25173, 25173, 25173, 1024, 0, 34304, 0, 0, 2560, 0, 0, 0, 0, 0, 0, 14336, 0, 0, 14336, 0, 0, 14336, 0, 0, 14336, 14336, 14336, 14336, 14336,
    14336, 14336, 14336, 14336, 14336, 14336, 14336, 1024, 0, 34304, 0, 1024, 1024, 0, 1024, 0, 0, 0, 0, 14848, 0, 0, 0, 0, 0, 0, 2048, 0, 2560, 0, 0, 0, 14848,
    0, 0, 0, 0, 0, 14848, 0, 0, 0, 0, 117, 0, 0, 25173, 87, 88, 0, 0, 125, 0, 0, 0, 17920, 17920, 17920, 17920, 17920, 17920, 17920, 17920, 17920, 17920, 0, 0,
    1024, 0, 34304, 0, 0, 0, 20480, 25173, 0, 87, 88, 0, 0, 0, 0, 0, 0, 24064, 0, 0, 0, 27226, 27226, 0, 0, 27226, 0, 27226, 27226, 27226, 27226, 27226, 27308,
    173, 117, 0, 0, 0, 25173, 0, 87, 88, 0, 0, 0, 0, 0, 125, 24064, 0, 0, 0, 27226, 27226, 0, 0, 27226, 0, 27226, 27226, 27226, 27306, 27226, 27226, 173, 18432,
    18432, 18432, 18432, 18432, 18521, 18521, 18521, 18432, 18521, 0, 0, 1024, 0, 34304, 0, 0, 0, 27226, 27226, 0, 0, 27226, 0, 27226, 27304, 27226, 27226,
    27226, 27226, 173, 0, 0, 13312, 13312, 13312, 0, 0, 0, 0, 0, 0, 0, 13312, 0, 0, 0, 0, 147, 4244, 0, 25173, 87, 88, 0, 0, 153, 3226, 0, 0, 0, 2560, 0, 0, 0,
    13312, 13312, 13312, 0, 0, 0, 13312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 4244, 1024, 1024, 0, 1103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048,
    1024, 1024, 0, 1024, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 2048, 0, 2560, 0, 0, 0, 0, 0, 19968, 0, 0, 0, 0, 0, 0, 19968, 0, 0, 0, 27226, 27226, 0, 0, 27226,
    166, 27303, 27226, 27226, 27226, 27307, 27226, 173, 0, 19968, 19968, 0, 19968, 19968, 19968, 19968, 19968, 19968, 19968, 19968, 19968, 19968, 19968, 19968,
    20052, 19968, 20052, 19968, 19968, 19968, 19968, 20052, 19968, 19968, 19968, 1024, 0, 34304, 0, 0, 0, 27226, 27226, 0, 0, 27301, 0, 27226, 27226, 27305,
    27226, 27226, 27226, 173, 1024, 1024, 0, 1024, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 2048, 81, 94, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 1024, 0, 34304, 0, 0, 0, 27226, 27226, 163, 0, 27226, 0, 27226, 27226, 27226, 27226, 27226,
    27226, 173, 4214, 0, 0, 0, 25173, 0, 87, 88, 0, 0, 0, 0, 0, 3198, 24064, 0, 0, 117, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
    14848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27226, 0, 27228, 0, 27226, 27226, 27226, 0, 0, 3584, 4244, 4244, 0, 0, 0, 3072, 3226, 3226, 0, 0, 0, 0, 0, 0, 19456,
    19456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27734, 0, 27734, 0, 27734, 27734, 27734, 0, 2560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24669, 0, 0, 0, 0, 14848, 14848, 0, 0,
    14848, 14848, 14848, 14848, 14848, 14848, 14848, 14848, 14848, 14848, 14848, 14848, 1024, 0, 34304, 0, 174, 175, 117, 4244, 4244, 0, 0, 27226, 125, 3226,
    3226, 0, 0, 0, 0, 0, 4244, 0, 0, 3226, 0, 0, 0, 0, 0, 0, 0, 0, 257, 4244, 4350, 0, 255, 3226, 3328, 0, 257, 4368, 4350, 255, 3346, 3328, 257, 4368, 4372,
    3346, 3349, 4372, 3349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16384, 16384, 1024, 28160, 34304, 0, 1024, 1024, 0, 1024, 0, 12288, 83, 0, 0, 0, 0, 0, 0, 0, 0,
    2048, 0, 2560, 0, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 0, 12288, 0, 12288, 83, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 0, 0, 0, 0,
    12800, 0, 25173, 0, 87, 88, 0, 0, 0, 0, 0, 0, 24064, 0, 0, 117, 4244, 4244, 0, 0, 0, 125, 3226, 3226, 0, 0, 0, 0, 0, 0, 87, 88, 0, 0, 0, 0, 0, 0, 24064, 0,
    1024, 1024, 0, 1024, 0, 0, 0, 13824, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 13824, 0, 0, 13824, 13824, 0, 0, 0, 0, 0, 13824, 0, 0, 0, 0, 15872, 0, 0, 15872, 0, 0,
    0, 15872, 15872, 0, 0, 0, 0, 19456, 19456, 19456, 19456, 19456, 19456, 19456, 19456, 19456, 19456, 19456, 19456, 1024, 0, 34304, 0, 0, 2560, 0, 0, 0, 13824,
    13824, 0, 0, 0, 0, 13824, 0, 0, 0, 0, 117, 4244, 0, 25173, 87, 88, 0, 0, 125, 3226, 0, 0, 0, 0, 13824, 0, 0, 13824, 13824, 13824, 0, 0, 13824, 0, 13824,
    13824, 13824, 13824, 13824, 13824, 13824, 13824, 13824, 13824, 13824, 13824, 1024, 0, 34304, 0, 15872, 15872, 15872, 15872, 15872, 0, 15872, 15872, 15872,
    15872, 15872, 15872, 1024, 0, 34304, 0, 0, 117, 4244, 4244, 0, 0, 27226, 125, 3226, 3226, 0, 0, 0, 0, 0, 16896, 16896, 16896, 0, 16896, 0, 78, 1024, 0,
    34304, 0, 1024, 1024, 78, 1024, 0, 0, 0, 0, 0, 16896, 0, 0, 0, 0, 0, 2048, 0, 2560, 0, 0, 0, 0, 16896, 16896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27226, 91, 27226,
    0, 27226, 27226, 27226, 0, 2560, 0, 0, 0, 0, 0, 16384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16384, 0, 0, 0, 0, 16384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0,
    0, 0, 15360, 0, 0, 0, 117, 4244, 0, 25173, 87, 88, 0, 0, 125, 3226, 0, 0, 0, 0, 25088, 0, 87, 23040, 0, 0, 0, 0, 0, 0, 24064, 0, 17408, 17408, 17408, 17408,
    17408, 17408, 17408, 17408, 17408, 17408, 28672, 0, 1024, 0, 34304, 0, 0, 117, 4244, 4244, 0, 0, 27226, 125, 3226, 3226, 0, 0, 0, 182, 0, 0, 117, 4244,
    4244, 0, 0, 27226, 125, 3226, 3226, 180, 0, 0, 0, 0, 117, 4244, 0, 25173, 87, 23128, 0, 0, 125, 3226, 0, 0, 0, 2560, 0, 0, 0, 0, 0, 0, 0, 20992, 0, 0, 0,
    20992, 0, 20992, 0, 0, 20992, 20992, 0, 0, 0, 0, 0, 0, 0, 20992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20992, 0, 0, 0, 0, 0, 16896, 0, 0, 16896, 0, 0, 0, 16896, 0, 0,
    0, 1024, 1024, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 27734, 0, 0, 2048, 27734, 2560, 27734, 0, 27734, 0, 0, 0, 27734, 0, 27734, 0, 27734, 0, 27734, 0, 0, 117,
    4244, 4244, 0, 178, 27226, 125, 3226, 3226, 0, 0, 0, 0, 0, 21504, 0, 21504, 0, 0, 0, 0, 21504, 21504, 21504, 0, 27734, 27734, 0, 27734, 27734, 27734, 27734,
    27734, 27734, 27734, 27734, 27734, 27734, 27734, 27734, 27734, 115, 0, 34304, 0, 27734, 27734, 27734, 27734, 27734, 27734, 27734, 27734, 27734, 27734,
    27734, 27734, 1024, 0, 34304, 0, 0, 117, 4244, 4244, 177, 0, 27226, 125, 3226, 3226, 0, 0, 0, 0, 0, 117, 4244, 0, 25173, 121, 122, 0, 0, 125, 3226, 0, 0, 0,
    0, 3272, 0, 0, 0, 0, 27226, 27226, 0, 0, 27226, 0, 27226, 27226, 27226, 27226, 27278, 27226, 27226, 4331, 0, 3308, 0, 0, 27226, 27226, 27226, 0, 4244, 3226,
    0, 27226, 4244, 3226, 1024, 1024, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29184, 0, 29184, 0, 0, 0, 0, 29184, 0, 29184, 29184, 29184, 0, 29184, 29184, 0, 29184,
    29184, 2560, 0, 0, 0, 0, 0, 0, 29184, 0, 0, 0, 0, 0, 0, 29184, 29184, 29184, 29184, 0, 29184, 29184, 29184, 29184, 29184, 1024, 0, 34304, 0, 77, 77, 0, 77,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17920, 17920, 265, 4244, 4355, 0, 261, 3226, 3335, 0, 265, 0, 4355,
    261, 0, 3335, 265, 0, 0, 117, 4244, 4272, 0, 0, 0, 125, 3226, 3251, 0, 0, 0, 0, 0, 0, 113, 0, 113, 113, 113, 0, 113, 113, 0, 113, 261, 0, 265, 261, 265, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20992, 20992, 1024, 0, 34304, 0, 0, 29696, 0, 29696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29696, 0, 2560, 0, 0, 27226, 0, 0, 0, 0,
    0, 27226, 0, 27226, 0, 27226, 0, 145, 117, 4244, 0, 25173, 87, 88, 0, 27288, 125, 3226, 0, 157, 27226, 27226, 0, 27226, 27226, 27226, 27226, 27226, 27226,
    27226, 27226, 27226, 27226, 27226, 27226, 27226, 115, 0, 34304, 0, 0, 27274, 0, 145, 117, 4244, 150, 25173, 87, 88, 0, 27226, 125, 3226, 156, 0, 0, 130, 0,
    27226, 27269, 0, 0, 27226, 0, 27274, 27226, 27226, 27226, 27226, 27226, 4244, 0, 0, 3226, 0, 0, 27226, 0, 11354, 27226, 27226, 27226, 27226, 186, 0, 27226,
    0, 27226, 27327, 27226, 27226, 27226, 27226, 173, 196, 175, 4244, 245, 0, 4244, 3226, 0, 4244, 3226, 4244, 3226, 4244, 0, 3226, 0, 4350, 255, 3328, 27243,
    27226, 0, 27245, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 116, 0, 34304, 0, 27226, 27226, 0, 0, 27226, 0, 27326,
    27226, 27226, 27226, 27226, 27226, 173, 196, 175, 4244, 0, 129, 0, 0, 27268, 27226, 0, 0, 27226, 137, 27226, 27226, 27226, 27226, 27226, 27226, 27226,
    27226, 27226, 27226, 27248, 27248, 1024, 0, 34304, 0, 174, 175, 117, 4244, 4244, 0, 0, 11866, 125, 3226, 3226, 0, 11776, 181, 0, 183, 27320, 27226, 0, 0,
    27226, 0, 27226, 27226, 27226, 27226, 27226, 27331, 173, 196, 175, 4244, 0, 0, 3226, 0, 0, 202, 0, 27226, 27340, 0, 0, 27226, 0, 27226, 27226, 27226, 0,
    4244, 0, 0, 3226, 0, 0, 0, 27226, 9728, 10240, 27226, 0, 27226, 27359, 27226, 27226, 27226, 4244, 0, 0, 3226, 0, 0, 27226, 0, 27226, 27226, 27226, 0, 4310,
    0, 0, 3289, 0, 0, 0, 27226, 0, 0, 27226, 0, 145, 117, 4244, 0, 25173, 87, 88, 0, 27226, 125, 3226, 0, 0, 0, 2560, 96, 0, 27226, 0, 0, 0, 0, 0, 27241, 0,
    27226, 0, 27226, 0, 0, 144, 146, 117, 4244, 0, 25173, 87, 88, 0, 0, 125, 3226, 0, 0, 0, 0, 25173, 0, 87, 88, 18944, 0, 0, 0, 0, 0, 24064, 0, 27244, 27226,
    0, 27241, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 1024, 0, 34304, 0, 1024, 1024, 0, 1024, 82, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 2048, 0, 2560, 0, 82, 27226, 0, 0, 0, 0, 0, 27226, 0, 27226, 0, 27226, 0, 0, 147, 4244, 4244, 0, 0, 0, 153, 3226, 3226, 0, 0, 0, 0, 0, 0, 183,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 27226, 0, 27226, 0, 27226, 27226, 27226, 27226, 27226, 0, 0, 27324, 0, 27226, 27226, 27226, 27226, 27226, 27226, 173, 0, 0, 4244,
    3226, 0, 4244, 3226, 4244, 3226, 4244, 0, 3226, 0, 4355, 261, 3335, 0, 0, 3226, 0, 0, 0, 203, 27226, 27226, 0, 0, 27226, 0, 27226, 27226, 27226, 27226,
    27226, 27226, 173, 196, 175, 4244, 0, 27276, 0, 0, 117, 4244, 0, 25173, 87, 88, 0, 27226, 125, 3226, 0, 0, 0, 0, 25173, 0, 87, 88, 0, 0, 0, 0, 0, 0, 24064,
    0, 27226, 27226, 0, 27246, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27228, 27228, 1024, 0, 34304, 0, 27226,
    27226, 0, 0, 27226, 0, 27226, 27226, 27226, 27226, 27330, 27226, 173, 0, 0, 4244, 3226, 0, 4244, 3226, 4244, 3226, 4350, 255, 3328, 257, 4354, 260, 3334, 0,
    2560, 0, 98, 27237, 0, 0, 0, 0, 103, 27226, 0, 27226, 103, 27226, 103, 27226, 27226, 103, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226,
    27226, 27226, 27226, 27226, 27244, 27244, 1024, 0, 34304, 0, 0, 0, 3226, 0, 0, 0, 0, 27226, 27226, 205, 0, 27226, 0, 27226, 27345, 27226, 4244, 0, 3226, 0,
    0, 27226, 27226, 27226, 0, 4244, 3226, 0, 27226, 4244, 3226, 27358, 27226, 27226, 27226, 27226, 4244, 0, 0, 3226, 0, 0, 27226, 0, 27226, 27368, 27226, 4244,
    0, 3226, 0, 0, 27226, 27226, 27226, 0, 4335, 3312, 0, 27226, 4244, 3226, 0, 2560, 97, 0, 27226, 0, 0, 0, 0, 0, 27228, 0, 27226, 0, 27226, 0, 0, 160, 27226,
    27226, 0, 0, 27226, 0, 27226, 27226, 27226, 27226, 27226, 27226, 173, 0, 0, 4244, 27228, 27226, 0, 27228, 27226, 27226, 27226, 27226, 27226, 27226, 27226,
    27226, 27226, 27226, 27226, 27226, 27246, 27246, 1024, 0, 34304, 0, 198, 0, 3226, 201, 0, 0, 0, 27226, 27226, 0, 0, 27343, 0, 27226, 27226, 27226, 1024,
    4244, 0, 0, 3226, 218, 0, 0, 27226, 0, 0, 27356, 0, 27226, 4244, 0, 3226, 0, 237, 27226, 27226, 27226, 0, 4244, 3226, 241, 27226, 4244, 3226, 27226, 27226,
    0, 0, 27226, 0, 27226, 27226, 27328, 27226, 27226, 27226, 173, 0, 0, 4244, 3226, 0, 4344, 3321, 4244, 3226, 4244, 0, 3226, 0, 4350, 255, 3328, 0, 0, 3226,
    0, 0, 0, 0, 27226, 27226, 0, 0, 27226, 0, 27226, 27226, 27346, 27226, 27226, 27349, 0, 4244, 0, 216, 3226, 0, 0, 0, 27226, 0, 0, 27226, 221, 27226, 27226,
    27226, 27360, 27226, 4244, 0, 0, 3226, 229, 0, 27367, 0, 27226, 27226, 27226, 1024, 4244, 215, 0, 3226, 0, 0, 0, 27226, 0, 0, 27226, 0, 0, 2560, 0, 0,
    27226, 0, 0, 0, 0, 91, 27226, 0, 27226, 91, 27226, 91, 27226, 27226, 91, 27247, 27226, 27226, 27226, 27226, 27226, 27247, 27226, 27247, 27226, 27226, 27226,
    27226, 27226, 4244, 0, 0, 3226, 0, 230, 27226, 0, 27226, 27226, 27226, 128, 0, 0, 0, 27226, 27226, 134, 0, 27226, 0, 27226, 27226, 27226, 27226, 27226,
    27279, 27226, 27226, 0, 187, 27226, 0, 27226, 27226, 27226, 27329, 27226, 27226, 173, 0, 0, 4244, 0, 3226, 0, 0, 0, 0, 0, 0, 4244, 3226, 0, 0, 4244, 3226,
    0, 4244, 3226, 4244, 3226, 4244, 0, 3226, 0, 4350, 255, 3328, 0, 199, 3226, 0, 0, 0, 0, 27226, 27226, 0, 0, 27226, 0, 27226, 27226, 27226, 27277, 27226,
    27226, 27226, 27348, 27226, 0, 4244, 0, 0, 3226, 0, 0, 0, 27226, 0, 0, 27226, 0, 0, 3226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 2560, 0,
    99, 27238, 0, 0, 0, 0, 0, 27226, 0, 27226, 0, 27226, 0, 0, 3226, 0, 0, 0, 0, 27226, 27226, 0, 0, 27226, 0, 10842, 27226, 27226, 0, 0, 27226, 0, 27226,
    27226, 27226, 27226, 27226, 27226, 173, 196, 175, 4293, 0, 2560, 0, 0, 27226, 0, 0, 0, 0, 0, 27226, 0, 27226, 106, 27226, 106, 0, 119, 0, 0, 25173, 27734,
    87, 88, 0, 27226, 0, 27226, 0, 0, 24064, 127, 0, 159, 0, 27226, 27298, 0, 164, 27226, 0, 27226, 27226, 27226, 27226, 27226, 27226, 173, 0, 0, 3226, 0, 7168,
    0, 0, 7258, 27226, 0, 0, 27226, 208, 27226, 27226, 27226, 27226, 27226, 4322, 0, 0, 3300, 0, 0, 27226, 0, 27226, 27226, 27226, 0, 4244, 0, 0, 3226, 0, 0, 0,
    27226, 0, 0, 27226, 0, 0, 117, 4244, 0, 25173, 87, 88, 151, 27226, 125, 3226, 0, 0, 27347, 27226, 27226, 0, 4244, 0, 0, 3226, 0, 7680, 219, 7770, 0, 0,
    27226, 0, 0, 3226, 0, 0, 0, 0, 27226, 27226, 0, 0, 27226, 0, 27226, 27226, 27226, 27226, 27226, 27226, 173, 0, 0, 4342, 3319, 8704, 4244, 3226, 4244, 3226,
    4244, 0, 3226, 0, 4350, 255, 3328, 27226, 27321, 0, 0, 27226, 0, 27226, 27226, 27226, 27226, 27226, 27226, 173, 0, 0, 4244, 27226, 4244, 0, 3226, 0, 0,
    27226, 27374, 27226, 0, 4244, 3226, 0, 27226, 4339, 3316, 0, 2560, 0, 100, 27226, 0, 0, 0, 0, 104, 27226, 0, 27226, 104, 27226, 104, 27226, 27226, 0, 27248,
    27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27247, 27247, 1024, 0, 34304, 0, 27226, 27226, 6234, 27226, 27226, 4244,
    0, 0, 3226, 0, 0, 27226, 0, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27226, 27250, 27250, 1024, 0, 34304, 0, 27226, 4244, 0, 3226,
    6656, 0, 6746, 27226, 27226, 0, 4244, 3226, 0, 27226, 4244, 3226, 27226, 27226, 0, 0, 27226, 189, 27226, 27226, 27226, 27226, 27226, 27226, 173, 0, 0, 4244,
    0, 0, 3226, 0, 0, 0, 0, 27226, 27226, 0, 206, 27226, 0, 27226, 27226, 27226, 27226, 27361, 4244, 0, 227, 3226, 0, 0, 27226, 9216, 27226, 27226, 27369, 158,
    0, 0, 27297, 27226, 0, 0, 27226, 0, 27226, 27226, 27226, 27226, 27226, 27226, 173, 1024, 1024, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30208, 2048, 0, 30208,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18432, 18432, 5120, 4244, 4608, 3226, 0, 0, 0, 0, 4608, 5120, 4244, 3226, 0,
    5632, 4244, 3226, 0, 4244, 3226, 4244, 3226, 4244, 0, 3226, 0, 4350, 255, 3328, 0, 2560, 0, 0, 0, 19456, 0, 0, 0, 0, 0, 19456, 0, 0, 0, 0, 117, 4244, 0,
    25173, 23639, 88, 0, 0, 125, 3226, 0, 0, 0, 30720, 0, 0, 0, 0, 22528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 0, 0, 2560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    22016, 0, 0, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 1024, 0, 34304, 0, 0, 0, 26624, 0, 0, 0, 0, 0, 0, 0, 26624,
    0, 0, 0, 0, 0, 117, 4245, 0, 25173, 87, 88, 0, 0, 125, 3227, 0, 0, 26624, 0, 0, 26624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 1024, 4244
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    235, 139, 150, 151, 143, 147, 157, 155, 161, 165, 169, 173, 177, 181, 185, 192, 189, 196, 199, 203, 214, 328, 206, 217, 209, 396, 229, 267, 233, 241, 206,
    246, 210, 397, 251, 268, 239, 258, 245, 209, 396, 250, 267, 255, 274, 210, 397, 251, 268, 273, 262, 398, 266, 272, 278, 283, 293, 279, 286, 300, 300, 308,
    304, 304, 310, 288, 310, 289, 302, 296, 314, 316, 320, 324, 336, 339, 343, 347, 351, 355, 359, 363, 367, 369, 373, 377, 381, 385, 389, 327, 393, 220, 402,
    328, 411, 331, 225, 332, 328, 406, 413, 328, 412, 410, 225, 328, 328, 413, 328, 411, 331, 225, 413, 328, 328, 412, 410, 225, 328, 328, 222, 224, 412, 328,
    410, 412, 329, 412, 330, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 32960, 8388800, 16777408, 67109056, 8388800, 16777408, 100663488, -2113929024,
    33554624, 67109056, 67109056, 268435648, 192, 192, 192, 8, 100663488, -2147483456, 192, 192, 8389056, 4194496, 192, 48, 4198592, 123072, 24768, 369098944,
    100663488, -2113929024, 134217920, 9175488, 4198592, 503316672, 192, 9306560, 134217920, 9306560, 7344320, 134217920, -2038169152, 4202432, 1476395200,
    469762240, 738197696, 1275068608, 939524288, 939524544, 1006633152, 1484784064, 1543504064, 1543504064, 1543504064, 2080374976, 1006633152, 469762240,
    1006633152, 2080374976, 1006633152, 1543504064, 2080374976, 1543504064, -17817664, -17817664, 2, 0, 4, 0, 0, 256, 4194304, 8192, 16384, 65536, 8192, 192,
    32768, 16777216, 0, 32, 0, 4096, 16, 1048576, 0, 0, 1048576, 1048576, 1048576, 1048576, 4096, 131072, 1048576, 2101248, 536870912, 1049600, 2, 2, 0, 6, 2,
    2, 64, 128, 32768, 0, 32, 32, 32, 4096, 4194304, 4096, 131072, 1048576, 2097152, 1024, 2, 2, 2, 128, 32768, 256, 4194304, 4096, 16384, 65536, 16384,
    2097152, 1024, 2048, 256, 512, 2, 512, 128, 32768, 256, 32, 4096, 32, 4096, 65536, 4096, 1024, 131072, 2097152, 1024, 256, 512, 128, 32, 32, 32, 128, 512,
    128, 256, 32, 0, 33554432, 4456448, 65536, 1024, 128, 32, 32, 128, 128, 32, 65536, 128, 32, 128, 128, 128, 33554432, 131072, 131072, 131072, 131073, 131200,
    196608, 2228224, 16908288, 67239936, 50343936, 131328, 67239936, 131072, 0, 0, 0, 0, 1048576, 0, 1048576, 0, 131072, 133120, 131073, 131104, 131089,
    3276800, 131328, 3276800, 131073, 3276800, 3278848, 3309568, 19070976, 201355264, 2752512, 131072, 3276800, 131104, 133121, 131137, 19070976, 131328,
    3801088, 131104, 70483968, 131328, 3343424, 16908544, 3801088, 20120640, 131392, 3801344, 70452320, 70452832, 87229536, 87229536, 87229536, 70452576,
    87230048, 87230050, 70452846, 87229550, 70452846, 70452974, 87230062, 87229678, 87230062, 87229567, 70452863, 87229567, 87230190, 87230079, 96143200,
    91948896, 0, 4194304, 0, 128, 65536, 2097152, 8192, 16384, 262144, 524288, 4096, 131072, 1048576, 32768, 0, 16384, 65536, 8192, 4096, 0, 1048576, 0,
    1048576, 1048576, 0, 0, 0
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '%ERROR',
    'LEXER_CHAR',
    &quot;'-'&quot;,
    'NON_RIGHT_BRACKET',
    'NON_SLASH_QUOTE_BRACE',
    'ACTION_COMMENT',
    'MULTI_LINE_COMMENT',
    'SINGLE_LINE_COMMENT',
    'OPTIONS',
    'TOKENS_SPEC',
    'CHANNELS',
    &quot;'import'&quot;,
    &quot;'fragment'&quot;,
    &quot;'lexer'&quot;,
    &quot;'parser'&quot;,
    &quot;'grammar'&quot;,
    'TREE_GRAMMAR',
    &quot;'returns'&quot;,
    &quot;'locals'&quot;,
    &quot;'throws'&quot;,
    &quot;'catch'&quot;,
    &quot;'finally'&quot;,
    &quot;'mode'&quot;,
    &quot;':'&quot;,
    &quot;'::'&quot;,
    &quot;','&quot;,
    &quot;';'&quot;,
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'-&gt;'&quot;,
    &quot;'&lt;'&quot;,
    &quot;'&gt;'&quot;,
    &quot;'='&quot;,
    &quot;'?'&quot;,
    &quot;'*'&quot;,
    &quot;'+'&quot;,
    &quot;'+='&quot;,
    &quot;'|'&quot;,
    &quot;'.'&quot;,
    &quot;'..'&quot;,
    &quot;'@'&quot;,
    &quot;'#'&quot;,
    &quot;'~'&quot;,
    &quot;'}'&quot;,
    'ACTION_CHAR_LITERAL',
    'ACTION_STRING_LITERAL',
    'ACTION_ESC',
    'INT',
    'STRING_LITERAL',
    'WS',
    'WSNLCHARS',
    'EOF',
    'RULE_REF',
    'TOKEN_REF',
    &quot;'=&gt;'&quot;,
    &quot;'?'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'{'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 512, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 512"/>
        <xsl:variable name="end" select="$end - $result idiv 64"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 64 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 8"/>
              <xsl:variable name="c2" select="$c1 idiv 32"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 8 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 8)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="512 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 16"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 511) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 277 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[8 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[16 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production modeSpec (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-modeSpec-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 12                                         (: FRAGMENT :)
                      and $state[$p:l1] != 53">                                     <!-- TOKEN_REF -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-lexerRule($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(34, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | FRAGMENT | MODE | WS | EOF |
                                                                                         TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-sync($input, $state)
            "/>
            <xsl:sequence select="p:parse-modeSpec-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse modeSpec.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-modeSpec" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(22, $input, $state)"/>             <!-- MODE -->
    <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(7, $input, $state)"/>          <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | WS -->
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- SEMI -->
    <xsl:variable name="state" select="p:lookahead1W(34, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | FRAGMENT | MODE | WS | EOF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-sync($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-modeSpec-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'modeSpec', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse lexerCommandExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerCommandExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- INT -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- INT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-id($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerCommandExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse lexerCommandName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerCommandName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- MODE -->
          <xsl:variable name="state" select="p:consume(22, $input, $state)"/>       <!-- MODE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-id($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerCommandName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse lexerCommand.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerCommand" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-lexerCommandName($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(43, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COMMA | SEMI | LPAREN |
                                                                                         RPAREN | OR | WS -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- LPAREN -->
          <xsl:variable name="state" select="p:consume(27, $input, $state)"/>       <!-- LPAREN -->
          <xsl:variable name="state" select="p:lookahead1W(31, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | INT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-lexerCommandExpr($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/>    <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | RPAREN | WS -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- RPAREN -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerCommand', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production lexerCommands (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerCommands-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(37, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COMMA | SEMI | RPAREN | OR |
                                                                                         WS -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 25">                                     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(25, $input, $state)"/>     <!-- COMMA -->
            <xsl:variable name="state" select="p:lookahead1W(27, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | MODE | WS | RULE_REF |
                                                                                         TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-lexerCommand($input, $state)
            "/>
            <xsl:sequence select="p:parse-lexerCommands-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse lexerCommands.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerCommands" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(29, $input, $state)"/>             <!-- RARROW -->
    <xsl:variable name="state" select="p:lookahead1W(27, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | MODE | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-lexerCommand($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-lexerCommands-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerCommands', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse lexerBlock.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerBlock" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- LPAREN -->
    <xsl:variable name="state" select="p:lookahead1W(57, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | LPAREN | RPAREN |
                                                                                         RARROW | OR | DOT | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF |
                                                                                         '[' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 8">                                         <!-- OPTIONS -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-optionsSpec($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>    <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COLON | WS -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- COLON -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(56, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | LPAREN | RPAREN | RARROW |
                                                                                         OR | DOT | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' |
                                                                                         '{' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-lexerAltList($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- RPAREN -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerBlock', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse lexerAtom.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerAtom" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 48">                                       <!-- STRING_LITERAL -->
          <xsl:variable name="state" select="p:lookahead2W(67, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | LT | QUESTION | STAR | PLUS | OR | DOT | RANGE | NOT |
                                                                                         STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' | '{' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 2544">                                      <!-- STRING_LITERAL RANGE -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-range($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 52">                                        <!-- RULE_REF -->
          <xsl:variable name="state" select="p:consume(52, $input, $state)"/>       <!-- RULE_REF -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 42">                                        <!-- NOT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-notSet($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 38">                                        <!-- DOT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-wildcard($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 56">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-LEXER_CHAR_SET($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-terminal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerAtom', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse labeledLexerElement.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-labeledLexerElement" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(24, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | ASSIGN | PLUS_ASSIGN |
                                                                                         WS -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- ASSIGN -->
          <xsl:variable name="state" select="p:consume(32, $input, $state)"/>       <!-- ASSIGN -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- PLUS_ASSIGN -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(49, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | LPAREN | DOT | NOT |
                                                                                         STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- LPAREN -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-lexerBlock($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-lexerAtom($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'labeledLexerElement', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse lexerElement.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerElement" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 58">                                        <!-- '{' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-actionElement($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 52">                                 <!-- RULE_REF -->
                <xsl:variable name="state" select="p:lookahead2W(69, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                             RARROW | ASSIGN | QUESTION | STAR | PLUS | PLUS_ASSIGN | OR | DOT |
                                                                                             NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' | '{' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] eq 53">                                 <!-- TOKEN_REF -->
                <xsl:variable name="state" select="p:lookahead2W(71, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                             RARROW | LT | ASSIGN | QUESTION | STAR | PLUS | PLUS_ASSIGN | OR |
                                                                                             DOT | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' |
                                                                                             '{' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 2100                                    (: RULE_REF ASSIGN :)
                           or $state[$p:lk] = 2101                                    (: TOKEN_REF ASSIGN :)
                           or $state[$p:lk] = 2356                                    (: RULE_REF PLUS_ASSIGN :)
                           or $state[$p:lk] = 2357">                                <!-- TOKEN_REF PLUS_ASSIGN -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-labeledLexerElement($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 27">                                  <!-- LPAREN -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-lexerBlock($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-lexerAtom($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(63, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | QUESTION | STAR | PLUS | OR | DOT | NOT | STRING_LITERAL |
                                                                                         WS | RULE_REF | TOKEN_REF | '[' | '{' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 33                                      (: QUESTION :)
                           or $state[$p:l1] = 34                                      (: STAR :)
                           or $state[$p:l1] = 35">                                  <!-- PLUS -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-ebnfSuffix($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerElement', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production lexerElements (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerElements-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(58, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | OR | DOT | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF |
                                                                                         '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 26                                          (: SEMI :)
                       or $state[$p:l1] = 28                                          (: RPAREN :)
                       or $state[$p:l1] = 29                                          (: RARROW :)
                       or $state[$p:l1] = 37">                                      <!-- OR -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-lexerElement($input, $state)
            "/>
            <xsl:sequence select="p:parse-lexerElements-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse lexerElements.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerElements" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-lexerElements-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerElements', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse lexerAlt.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerAlt" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-lexerElements($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 29">                                        <!-- RARROW -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-lexerCommands($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerAlt', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production lexerAltList (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerAltList-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 37">                                     <!-- OR -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- OR -->
            <xsl:variable name="state" select="p:lookahead1W(58, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | OR | DOT | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF |
                                                                                         '[' | '{' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-lexerAlt($input, $state)
            "/>
            <xsl:sequence select="p:parse-lexerAltList-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse lexerAltList.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerAltList" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-lexerAlt($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-lexerAltList-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerAltList', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse lexerRuleBlock.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerRuleBlock" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-lexerAltList($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerRuleBlock', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse lexerRule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-lexerRule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- FRAGMENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- FRAGMENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | TOKEN_REF -->
    <xsl:variable name="state" select="p:consume(53, $input, $state)"/>             <!-- TOKEN_REF -->
    <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>          <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COLON | WS -->
    <xsl:variable name="state" select="p:consume(23, $input, $state)"/>             <!-- COLON -->
    <xsl:variable name="state" select="p:lookahead1W(54, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RARROW |
                                                                                         OR | DOT | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' |
                                                                                         '{' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-lexerRuleBlock($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- SEMI -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'lexerRule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse finallyClause.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-finallyClause" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(21, $input, $state)"/>             <!-- FINALLY -->
    <xsl:variable name="state" select="p:lookahead1W(14, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | '{' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ACTION($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'finallyClause', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse exceptionHandler.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-exceptionHandler" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(20, $input, $state)"/>             <!-- CATCH -->
    <xsl:variable name="state" select="p:lookahead1W(13, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | '[' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ARG_ACTION($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(14, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | '{' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ACTION($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'exceptionHandler', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production exceptionGroup (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-exceptionGroup-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(48, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | FRAGMENT | CATCH | FINALLY |
                                                                                         MODE | WS | EOF | RULE_REF | TOKEN_REF -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 20">                                     <!-- CATCH -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-exceptionHandler($input, $state)
            "/>
            <xsl:sequence select="p:parse-exceptionGroup-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse exceptionGroup.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-exceptionGroup" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-exceptionGroup-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 21">                                        <!-- FINALLY -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-finallyClause($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'exceptionGroup', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse actionElement.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-actionElement" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ACTION($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(60, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | LT | OR | DOT | POUND | NOT | STRING_LITERAL | WS | RULE_REF |
                                                                                         TOKEN_REF | '[' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- LT -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-elementOptions($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'actionElement', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse blockSuffix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-blockSuffix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ebnfSuffix($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'blockSuffix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ebnf.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ebnf" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-block($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(62, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         QUESTION | STAR | PLUS | OR | DOT | POUND | NOT | STRING_LITERAL | WS |
                                                                                         RULE_REF | TOKEN_REF | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33                                            (: QUESTION :)
                     or $state[$p:l1] = 34                                            (: STAR :)
                     or $state[$p:l1] = 35">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-blockSuffix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ebnf', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ebnfSuffix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ebnfSuffix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- QUESTION -->
          <xsl:variable name="state" select="p:consume(33, $input, $state)"/>       <!-- QUESTION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 34">                                        <!-- STAR -->
          <xsl:variable name="state" select="p:consume(34, $input, $state)"/>       <!-- STAR -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(35, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(61, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | QUESTION | OR | DOT | POUND | NOT | STRING_LITERAL | WS |
                                                                                         RULE_REF | TOKEN_REF | '[' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- QUESTION -->
          <xsl:variable name="state" select="p:consume(33, $input, $state)"/>       <!-- QUESTION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ebnfSuffix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production altList (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-altList-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 37">                                     <!-- OR -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- OR -->
            <xsl:variable name="state" select="p:lookahead1W(52, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | LPAREN | RPAREN | LT | OR |
                                                                                         DOT | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '{' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-alternative($input, $state)
            "/>
            <xsl:sequence select="p:parse-altList-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse altList.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-altList" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-alternative($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-altList-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'altList', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production block (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-block-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(16, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COLON | AT | WS -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 40">                                     <!-- AT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ruleAction($input, $state)
            "/>
            <xsl:sequence select="p:parse-block-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse block.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-block" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- LPAREN -->
    <xsl:variable name="state" select="p:lookahead1W(59, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | COLON | LPAREN |
                                                                                         RPAREN | LT | OR | DOT | AT | NOT | STRING_LITERAL | WS | RULE_REF |
                                                                                         TOKEN_REF | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 8                                             (: OPTIONS :)
                     or $state[$p:l1] = 23                                            (: COLON :)
                     or $state[$p:l1] = 40">                                        <!-- AT -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- OPTIONS -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-optionsSpec($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-block-1($input, $state)"/>
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- COLON -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(52, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | LPAREN | RPAREN | LT | OR |
                                                                                         DOT | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '{' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-altList($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- RPAREN -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'block', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse wildcard.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-wildcard" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(38, $input, $state)"/>             <!-- DOT -->
    <xsl:variable name="state" select="p:lookahead1W(68, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | LT | QUESTION | STAR | PLUS | OR | DOT | POUND | NOT |
                                                                                         STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- LT -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-elementOptions($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'wildcard', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production blockSet (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-blockSet-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | RPAREN | OR | WS -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 37">                                     <!-- OR -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- OR -->
            <xsl:variable name="state" select="p:lookahead1W(32, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | STRING_LITERAL | WS |
                                                                                         TOKEN_REF | '[' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-setElement($input, $state)
            "/>
            <xsl:sequence select="p:parse-blockSet-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse blockSet.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-blockSet" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- LPAREN -->
    <xsl:variable name="state" select="p:lookahead1W(32, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | STRING_LITERAL | WS |
                                                                                         TOKEN_REF | '[' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-setElement($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-blockSet-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- RPAREN -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'blockSet', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse LEXER_CHAR_RANGE.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-LEXER_CHAR_RANGE" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(1, $input, $state)"/>              <!-- LEXER_CHAR -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- LEXER_CHAR | LEXER_RANGE_OPERATOR | ']' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- LEXER_RANGE_OPERATOR -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- LEXER_RANGE_OPERATOR -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- LEXER_CHAR -->
          <xsl:variable name="state" select="p:consume(1, $input, $state)"/>        <!-- LEXER_CHAR -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'LEXER_CHAR_RANGE', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production LEXER_CHAR_SET (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-LEXER_CHAR_SET-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>       <!-- LEXER_CHAR | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 1">                                      <!-- LEXER_CHAR -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-LEXER_CHAR_RANGE($input, $state)
            "/>
            <xsl:sequence select="p:parse-LEXER_CHAR_SET-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse LEXER_CHAR_SET.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-LEXER_CHAR_SET" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(56, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-LEXER_CHAR_SET-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(57, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'LEXER_CHAR_SET', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse setElement.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-setElement" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 48">                                       <!-- STRING_LITERAL -->
          <xsl:variable name="state" select="p:lookahead2W(72, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | LT | QUESTION | STAR | PLUS | OR | DOT | RANGE | POUND | NOT |
                                                                                         STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' | '{' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 2544">                                      <!-- STRING_LITERAL RANGE -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-range($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 56">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-LEXER_CHAR_SET($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 53">                                  <!-- TOKEN_REF -->
                <xsl:variable name="state" select="p:consume(53, $input, $state)"/> <!-- TOKEN_REF -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(48, $input, $state)"/> <!-- STRING_LITERAL -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(68, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | LT | QUESTION | STAR | PLUS | OR | DOT | POUND | NOT |
                                                                                         STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' | '{' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 30">                                  <!-- LT -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-elementOptions($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'setElement', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse notSet.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-notSet" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:lookahead1W(40, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | LPAREN | STRING_LITERAL |
                                                                                         WS | TOKEN_REF | '[' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- LPAREN -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-blockSet($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-setElement($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'notSet', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ruleref.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ruleref" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- RULE_REF -->
    <xsl:variable name="state" select="p:lookahead1W(66, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         LT | QUESTION | STAR | PLUS | OR | DOT | POUND | NOT | STRING_LITERAL |
                                                                                         WS | RULE_REF | TOKEN_REF | '[' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 56">                                        <!-- '[' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ARG_ACTION($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(64, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         LT | QUESTION | STAR | PLUS | OR | DOT | POUND | NOT | STRING_LITERAL |
                                                                                         WS | RULE_REF | TOKEN_REF | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- LT -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-elementOptions($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ruleref', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse terminal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-terminal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 53">                                        <!-- TOKEN_REF -->
          <xsl:variable name="state" select="p:consume(53, $input, $state)"/>       <!-- TOKEN_REF -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- STRING_LITERAL -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(68, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         RARROW | LT | QUESTION | STAR | PLUS | OR | DOT | POUND | NOT |
                                                                                         STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- LT -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-elementOptions($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'terminal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse range.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-range" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(48, $input, $state)"/>             <!-- STRING_LITERAL -->
    <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | RANGE | WS -->
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- RANGE -->
    <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | STRING_LITERAL | WS -->
    <xsl:variable name="state" select="p:consume(48, $input, $state)"/>             <!-- STRING_LITERAL -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'range', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atom.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atom" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 48">                                       <!-- STRING_LITERAL -->
          <xsl:variable name="state" select="p:lookahead2W(65, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         LT | QUESTION | STAR | PLUS | OR | DOT | RANGE | POUND | NOT |
                                                                                         STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '{' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 2544">                                      <!-- STRING_LITERAL RANGE -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-range($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 52">                                        <!-- RULE_REF -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ruleref($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 42">                                        <!-- NOT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-notSet($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 38">                                        <!-- DOT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-wildcard($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-terminal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atom', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse labeledElement.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-labeledElement" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(24, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | ASSIGN | PLUS_ASSIGN |
                                                                                         WS -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- ASSIGN -->
          <xsl:variable name="state" select="p:consume(32, $input, $state)"/>       <!-- ASSIGN -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- PLUS_ASSIGN -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(46, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | LPAREN | DOT | NOT |
                                                                                         STRING_LITERAL | WS | RULE_REF | TOKEN_REF -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- LPAREN -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-block($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-atom($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'labeledElement', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- LPAREN -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ebnf($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 58">                                        <!-- '{' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-actionElement($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 52">                                 <!-- RULE_REF -->
                <xsl:variable name="state" select="p:lookahead2W(73, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                             LT | ASSIGN | QUESTION | STAR | PLUS | PLUS_ASSIGN | OR | DOT |
                                                                                             POUND | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '[' |
                                                                                             '{' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] eq 53">                                 <!-- TOKEN_REF -->
                <xsl:variable name="state" select="p:lookahead2W(70, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                             LT | ASSIGN | QUESTION | STAR | PLUS | PLUS_ASSIGN | OR | DOT |
                                                                                             POUND | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF | '{' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 2100                                    (: RULE_REF ASSIGN :)
                           or $state[$p:lk] = 2101                                    (: TOKEN_REF ASSIGN :)
                           or $state[$p:lk] = 2356                                    (: RULE_REF PLUS_ASSIGN :)
                           or $state[$p:lk] = 2357">                                <!-- TOKEN_REF PLUS_ASSIGN -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-labeledElement($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-atom($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(62, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         QUESTION | STAR | PLUS | OR | DOT | POUND | NOT | STRING_LITERAL | WS |
                                                                                         RULE_REF | TOKEN_REF | '{' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 33                                      (: QUESTION :)
                           or $state[$p:l1] = 34                                      (: STAR :)
                           or $state[$p:l1] = 35">                                  <!-- PLUS -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-ebnfSuffix($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse elementOption.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-elementOption" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (52,                                          (: RULE_REF :)
                                         53)">                                      <!-- TOKEN_REF -->
          <xsl:variable name="state" select="p:lookahead2W(39, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COMMA | GT | ASSIGN | DOT |
                                                                                         WS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 2100                                          (: RULE_REF ASSIGN :)
                     or $state[$p:lk] = 2101">                                      <!-- TOKEN_REF ASSIGN -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-id($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(9, $input, $state)"/>    <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | ASSIGN | WS -->
          <xsl:variable name="state" select="p:consume(32, $input, $state)"/>       <!-- ASSIGN -->
          <xsl:variable name="state" select="p:lookahead1W(44, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | INT | STRING_LITERAL | WS |
                                                                                         RULE_REF | TOKEN_REF | '{' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-optionValue($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-qid($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'elementOption', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production elementOptions (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-elementOptions-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(19, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COMMA | GT | WS -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 25">                                     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(25, $input, $state)"/>     <!-- COMMA -->
            <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-elementOption($input, $state)
            "/>
            <xsl:sequence select="p:parse-elementOptions-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse elementOptions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-elementOptions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- LT -->
    <xsl:variable name="state" select="p:lookahead1W(29, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | GT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 31">                                       <!-- GT -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-elementOption($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-elementOptions-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(31, $input, $state)"/>             <!-- GT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'elementOptions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production alternative (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-alternative-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(53, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | RPAREN |
                                                                                         OR | DOT | POUND | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF |
                                                                                         '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 26                                          (: SEMI :)
                       or $state[$p:l1] = 28                                          (: RPAREN :)
                       or $state[$p:l1] = 37                                          (: OR :)
                       or $state[$p:l1] = 41">                                      <!-- POUND -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-element($input, $state)
            "/>
            <xsl:sequence select="p:parse-alternative-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse alternative.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-alternative" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- LT -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-elementOptions($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-alternative-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'alternative', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse labeledAlt.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-labeledAlt" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-alternative($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 41">                                        <!-- POUND -->
          <xsl:variable name="state" select="p:consume(41, $input, $state)"/>       <!-- POUND -->
          <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-id($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'labeledAlt', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production ruleAltList (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ruleAltList-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | OR | WS -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 37">                                     <!-- OR -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- OR -->
            <xsl:variable name="state" select="p:lookahead1W(55, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | LT | OR |
                                                                                         DOT | POUND | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF |
                                                                                         '{' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-labeledAlt($input, $state)
            "/>
            <xsl:sequence select="p:parse-ruleAltList-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse ruleAltList.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ruleAltList" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-labeledAlt($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-ruleAltList-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ruleAltList', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ruleBlock.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ruleBlock" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ruleAltList($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ruleBlock', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ruleAction.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ruleAction" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(40, $input, $state)"/>             <!-- AT -->
    <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(14, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | '{' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ACTION($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ruleAction', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse rulePrequel.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rulePrequel" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 8">                                         <!-- OPTIONS -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-optionsSpec($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ruleAction($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rulePrequel', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production rulePrequels (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rulePrequels-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 23">                                      <!-- COLON -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-rulePrequel($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | COLON | AT |
                                                                                         WS -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-sync($input, $state)
            "/>
            <xsl:sequence select="p:parse-rulePrequels-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rulePrequels.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rulePrequels" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-sync($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-rulePrequels-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rulePrequels', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse localsSpec.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-localsSpec" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(18, $input, $state)"/>             <!-- LOCALS -->
    <xsl:variable name="state" select="p:lookahead1W(13, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | '[' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ARG_ACTION($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'localsSpec', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production throwsSpec (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-throwsSpec-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 25">                                     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(25, $input, $state)"/>     <!-- COMMA -->
            <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-qid($input, $state)
            "/>
            <xsl:sequence select="p:parse-throwsSpec-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse throwsSpec.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-throwsSpec" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(19, $input, $state)"/>             <!-- THROWS -->
    <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-qid($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-throwsSpec-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'throwsSpec', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ruleReturns.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ruleReturns" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(17, $input, $state)"/>             <!-- RETURNS -->
    <xsl:variable name="state" select="p:lookahead1W(13, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | '[' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ARG_ACTION($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ruleReturns', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production ARG_ACTION (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ARG_ACTION-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>      <!-- NON_RIGHT_BRACKET | ACTION_CHAR_LITERAL | ACTION_STRING_LITERAL | '[' |
                                                                                         ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 57">                                      <!-- ']' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 56">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-ARG_ACTION($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 45">                                <!-- ACTION_STRING_LITERAL -->
                  <xsl:variable name="state" select="p:consume(45, $input, $state)"/> <!-- ACTION_STRING_LITERAL -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 44">                                <!-- ACTION_CHAR_LITERAL -->
                  <xsl:variable name="state" select="p:consume(44, $input, $state)"/> <!-- ACTION_CHAR_LITERAL -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(3, $input, $state)"/> <!-- NON_RIGHT_BRACKET -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-ARG_ACTION-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse ARG_ACTION.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ARG_ACTION" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(56, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-ARG_ACTION-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(57, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ARG_ACTION', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse parserRule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-parserRule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- RULE_REF -->
    <xsl:variable name="state" select="p:lookahead1W(47, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | RETURNS | LOCALS |
                                                                                         THROWS | COLON | AT | WS | '[' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 56">                                        <!-- '[' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ARG_ACTION($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(45, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | RETURNS | LOCALS |
                                                                                         THROWS | COLON | AT | WS -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- RETURNS -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ruleReturns($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(41, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | LOCALS | THROWS |
                                                                                         COLON | AT | WS -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- THROWS -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-throwsSpec($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- LOCALS -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-localsSpec($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | COLON | AT |
                                                                                         WS -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rulePrequels($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(23, $input, $state)"/>             <!-- COLON -->
    <xsl:variable name="state" select="p:lookahead1W(55, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | LPAREN | LT | OR |
                                                                                         DOT | POUND | NOT | STRING_LITERAL | WS | RULE_REF | TOKEN_REF |
                                                                                         '{' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ruleBlock($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- SEMI -->
    <xsl:variable name="state" select="p:lookahead1W(48, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | FRAGMENT | CATCH | FINALLY |
                                                                                         MODE | WS | EOF | RULE_REF | TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-exceptionGroup($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'parserRule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- RULE_REF -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-parserRule($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-lexerRule($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production rules (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rules-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 22                                          (: MODE :)
                       or $state[$p:l1] = 51">                                      <!-- EOF -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-rule($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(42, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | FRAGMENT | MODE | WS | EOF |
                                                                                         RULE_REF | TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-sync($input, $state)
            "/>
            <xsl:sequence select="p:parse-rules-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rules.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rules" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-sync($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-rules-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rules', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse actionScopeName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-actionScopeName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- LEXER -->
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- LEXER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- PARSER -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- PARSER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-id($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'actionScopeName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse action.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-action" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(40, $input, $state)"/>             <!-- AT -->
    <xsl:variable name="state" select="p:lookahead1W(36, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | LEXER | PARSER | WS |
                                                                                         RULE_REF | TOKEN_REF -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (52,                                          (: RULE_REF :)
                                         53)">                                      <!-- TOKEN_REF -->
          <xsl:variable name="state" select="p:lookahead2W(17, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COLONCOLON | WS | '{' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 3764                                         (: RULE_REF '{' :)
                    and $state[$p:lk] != 3765">                                     <!-- TOKEN_REF '{' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-actionScopeName($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(6, $input, $state)"/>    <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COLONCOLON | WS -->
          <xsl:variable name="state" select="p:consume(24, $input, $state)"/>       <!-- COLONCOLON -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(14, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | '{' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ACTION($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'action', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production channelsSpec (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-channelsSpec-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(20, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COMMA | RBRACE | WS -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 25">                                     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(25, $input, $state)"/>     <!-- COMMA -->
            <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-id($input, $state)
            "/>
            <xsl:sequence select="p:parse-channelsSpec-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse channelsSpec.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-channelsSpec" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- CHANNELS -->
    <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-channelsSpec-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(43, $input, $state)"/>             <!-- RBRACE -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'channelsSpec', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse v3tokenSpec.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-v3tokenSpec" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | ASSIGN | WS -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- ASSIGN -->
          <xsl:variable name="state" select="p:consume(32, $input, $state)"/>       <!-- ASSIGN -->
          <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | STRING_LITERAL | WS -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- STRING_LITERAL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(7, $input, $state)"/>          <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | WS -->
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- SEMI -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'v3tokenSpec', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production tokensSpec (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-tokensSpec-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(20, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COMMA | RBRACE | WS -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 25">                                     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(25, $input, $state)"/>     <!-- COMMA -->
            <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-id($input, $state)
            "/>
            <xsl:sequence select="p:parse-tokensSpec-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production tokensSpec (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-tokensSpec-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | RBRACE | WS | RULE_REF |
                                                                                         TOKEN_REF -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 43">                                      <!-- RBRACE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-v3tokenSpec($input, $state)
            "/>
            <xsl:sequence select="p:parse-tokensSpec-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse tokensSpec.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-tokensSpec" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(9, $input, $state)"/>              <!-- TOKENS_SPEC -->
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | RBRACE | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (52,                                          (: RULE_REF :)
                                         53)">                                      <!-- TOKEN_REF -->
          <xsl:variable name="state" select="p:lookahead2W(38, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COMMA | SEMI | ASSIGN |
                                                                                         RBRACE | WS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 1652                                          (: RULE_REF COMMA :)
                     or $state[$p:lk] = 1653                                          (: TOKEN_REF COMMA :)
                     or $state[$p:lk] = 2804                                          (: RULE_REF RBRACE :)
                     or $state[$p:lk] = 2805">                                      <!-- TOKEN_REF RBRACE -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-id($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-tokensSpec-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-tokensSpec-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(43, $input, $state)"/>             <!-- RBRACE -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'tokensSpec', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse delegateGrammar.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-delegateGrammar" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(28, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COMMA | SEMI | ASSIGN |
                                                                                         WS -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- ASSIGN -->
          <xsl:variable name="state" select="p:consume(32, $input, $state)"/>       <!-- ASSIGN -->
          <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-id($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'delegateGrammar', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production delegateGrammars (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-delegateGrammars-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(18, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | COMMA | SEMI | WS -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 25">                                     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(25, $input, $state)"/>     <!-- COMMA -->
            <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-delegateGrammar($input, $state)
            "/>
            <xsl:sequence select="p:parse-delegateGrammars-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse delegateGrammars.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-delegateGrammars" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(11, $input, $state)"/>             <!-- IMPORT -->
    <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-delegateGrammar($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-delegateGrammars-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- SEMI -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'delegateGrammars', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production NESTED_ACTION (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NESTED_ACTION-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>      <!-- NON_SLASH_QUOTE_BRACE | ACTION_COMMENT | ACTION_CHAR_LITERAL |
                                                                                         ACTION_STRING_LITERAL | ACTION_ESC | '{' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 59">                                      <!-- '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 58">                                <!-- '{' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-NESTED_ACTION($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 44">                                <!-- ACTION_CHAR_LITERAL -->
                  <xsl:variable name="state" select="p:consume(44, $input, $state)"/> <!-- ACTION_CHAR_LITERAL -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 5">                                 <!-- ACTION_COMMENT -->
                  <xsl:variable name="state" select="p:consume(5, $input, $state)"/> <!-- ACTION_COMMENT -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 45">                                <!-- ACTION_STRING_LITERAL -->
                  <xsl:variable name="state" select="p:consume(45, $input, $state)"/> <!-- ACTION_STRING_LITERAL -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 46">                                <!-- ACTION_ESC -->
                  <xsl:variable name="state" select="p:consume(46, $input, $state)"/> <!-- ACTION_ESC -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- NON_SLASH_QUOTE_BRACE -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-NESTED_ACTION-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse NESTED_ACTION.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NESTED_ACTION" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(58, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-NESTED_ACTION-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(59, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'NESTED_ACTION', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production ACTION (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ACTION-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- WSNLCHARS | '=>' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 50">                                     <!-- WSNLCHARS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(50, $input, $state)"/>     <!-- WSNLCHARS -->
            <xsl:sequence select="p:parse-ACTION-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse ACTION.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ACTION" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-NESTED_ACTION($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(74, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | TOKENS_SPEC |
                                                                                         CHANNELS | IMPORT | FRAGMENT | CATCH | FINALLY | MODE | COLON | COMMA |
                                                                                         SEMI | LPAREN | RPAREN | RARROW | LT | GT | OR | DOT | AT | POUND |
                                                                                         NOT | STRING_LITERAL | WS | EOF | RULE_REF | TOKEN_REF | '?' | '[' |
                                                                                         '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 55">                                        <!-- '?' -->
          <xsl:variable name="state" select="p:consume(55, $input, $state)"/>       <!-- '?' -->
          <xsl:variable name="state" select="p:lookahead1W(75, $input, $state)"/>   <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | TOKENS_SPEC |
                                                                                         CHANNELS | IMPORT | FRAGMENT | CATCH | FINALLY | MODE | COLON | COMMA |
                                                                                         SEMI | LPAREN | RPAREN | RARROW | LT | GT | OR | DOT | AT | POUND |
                                                                                         NOT | STRING_LITERAL | WS | WSNLCHARS | EOF | RULE_REF | TOKEN_REF |
                                                                                         '=>' | '[' | '{' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 50                                      (: WSNLCHARS :)
                           or $state[$p:l1] = 54">                                  <!-- '=>' -->
                <xsl:variable name="state" select="p:parse-ACTION-1($input, $state)"/>
                <xsl:variable name="state" select="p:consume(54, $input, $state)"/> <!-- '=>' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ACTION', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production qid (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-qid-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(50, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | LOCALS | COLON |
                                                                                         COMMA | SEMI | GT | DOT | AT | WS -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 38">                                     <!-- DOT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(38, $input, $state)"/>     <!-- DOT -->
            <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-id($input, $state)
            "/>
            <xsl:sequence select="p:parse-qid-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse qid.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-qid" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-qid-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'qid', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse optionValue.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-optionValue" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- STRING_LITERAL -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- STRING_LITERAL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 58">                                        <!-- '{' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ACTION($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- INT -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- INT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-qid($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'optionValue', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse option.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-option" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(9, $input, $state)"/>          <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | ASSIGN | WS -->
    <xsl:variable name="state" select="p:consume(32, $input, $state)"/>             <!-- ASSIGN -->
    <xsl:variable name="state" select="p:lookahead1W(44, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | INT | STRING_LITERAL | WS |
                                                                                         RULE_REF | TOKEN_REF | '{' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-optionValue($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'option', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production optionsSpec (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-optionsSpec-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>     <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | RBRACE | WS | RULE_REF |
                                                                                         TOKEN_REF -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 43">                                      <!-- RBRACE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-option($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(7, $input, $state)"/>  <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | WS -->
            <xsl:variable name="state" select="p:consume(26, $input, $state)"/>     <!-- SEMI -->
            <xsl:sequence select="p:parse-optionsSpec-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse optionsSpec.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-optionsSpec" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(8, $input, $state)"/>              <!-- OPTIONS -->
    <xsl:variable name="state" select="p:parse-optionsSpec-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(43, $input, $state)"/>             <!-- RBRACE -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'optionsSpec', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse prequelConstruct.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-prequelConstruct" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 8">                                         <!-- OPTIONS -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-optionsSpec($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- IMPORT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-delegateGrammars($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 9">                                         <!-- TOKENS_SPEC -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-tokensSpec($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- CHANNELS -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-channelsSpec($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-action($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'prequelConstruct', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse sync.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-sync" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'sync', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse id.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-id" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- RULE_REF -->
          <xsl:variable name="state" select="p:consume(52, $input, $state)"/>       <!-- RULE_REF -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(53, $input, $state)"/>       <!-- TOKEN_REF -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'id', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse grammarType.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-grammarType" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- TREE_GRAMMAR -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- TREE_GRAMMAR -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] != 15">                                 <!-- GRAMMAR -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 13">                            <!-- LEXER -->
                      <xsl:variable name="state" select="p:consume(13, $input, $state)"/> <!-- LEXER -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="state" select="p:consume(14, $input, $state)"/> <!-- PARSER -->
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | GRAMMAR | WS -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- GRAMMAR -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'grammarType', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production grammarSpec (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-grammarSpec-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 8                                          (: OPTIONS :)
                      and $state[$p:l1] != 9                                          (: TOKENS_SPEC :)
                      and $state[$p:l1] != 10                                         (: CHANNELS :)
                      and $state[$p:l1] != 11                                         (: IMPORT :)
                      and $state[$p:l1] != 40">                                     <!-- AT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-prequelConstruct($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(51, $input, $state)"/> <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | TOKENS_SPEC |
                                                                                         CHANNELS | IMPORT | FRAGMENT | MODE | AT | WS | EOF | RULE_REF |
                                                                                         TOKEN_REF -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-sync($input, $state)
            "/>
            <xsl:sequence select="p:parse-grammarSpec-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production grammarSpec (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-grammarSpec-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 22">                                     <!-- MODE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-modeSpec($input, $state)
            "/>
            <xsl:sequence select="p:parse-grammarSpec-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse grammarSpec.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-grammarSpec" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1W(35, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | LEXER | PARSER | GRAMMAR |
                                                                                         TREE_GRAMMAR | WS -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-grammarType($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | WS | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(7, $input, $state)"/>          <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | SEMI | WS -->
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- SEMI -->
    <xsl:variable name="state" select="p:lookahead1W(51, $input, $state)"/>         <!-- MULTI_LINE_COMMENT | SINGLE_LINE_COMMENT | OPTIONS | TOKENS_SPEC |
                                                                                         CHANNELS | IMPORT | FRAGMENT | MODE | AT | WS | EOF | RULE_REF |
                                                                                         TOKEN_REF -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-sync($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-grammarSpec-1($input, $state)"/>
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rules($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-grammarSpec-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(51, $input, $state)"/>             <!-- EOF -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'grammarSpec', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x or $error/@ambiguous-input) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;',
          'while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 6),
          0, 0, 0,
          subsequence($state, 10),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:attribute name="b" select="$state[$p:b1]"/>
            <xsl:attribute name="e" select="$state[$p:e1]"/>
            <xsl:choose>
              <xsl:when test="$state[$p:l1] lt 0">
                <xsl:attribute name="s" select="- $state[$p:l1]"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="o" select="$state[$p:l1]"/>
                <xsl:attribute name="x" select="$code"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume whitespace.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:whitespace" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="end" select="$state[$p:b1]"/>
    <xsl:choose>
      <xsl:when test="$begin eq $end">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="whitespace">
          <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
        </xsl:variable>
        <xsl:sequence select="
          0,
          $state[$p:b0],
          $end,
          subsequence($state, $p:e0 + 1),
          $whitespace/node()
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Use p:match to fetch the next token, but skip any leading
   ! whitespace.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start.
   ! @param $token-set the valid token set id.
   ! @return a sequence of three values: the token code of the result
   ! token, with input string positions of token begin and end.
  -->
  <xsl:function name="p:matchW">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="match" select="p:match($input, $begin, $token-set)"/>
    <xsl:choose>
      <xsl:when test="$match[1] = 6                                                   (: MULTI_LINE_COMMENT :)
                   or $match[1] = 7                                                   (: SINGLE_LINE_COMMENT :)
                   or $match[1] = 49">                                              <!-- WS -->
        <xsl:sequence select="p:matchW($input, $match[3], $token-set)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$match"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:matchW($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 3)
      else
        p:matchW($input, $state[$p:e1], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 10)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Parse start symbol grammarSpec from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-grammarSpec" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, false()"/>
    <xsl:variable name="state" select="p:parse-grammarSpec($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

</xsl:stylesheet>