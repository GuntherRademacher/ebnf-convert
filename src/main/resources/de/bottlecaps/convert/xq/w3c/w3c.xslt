<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Fri Feb 10, 2023 18:44 (UTC+01) by REx v5.57 which is Copyright (c) 1979-2023 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: -tree -a none -xslt -name de/bottlecaps/convert/xq/w3c/w3c.xslt ../../../../../../../main/java/de/bottlecaps/convert/w3c/w3c.ebnf -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="de/bottlecaps/convert/xq/w3c/w3c.xslt">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="14"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    52, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 5, 6, 7, 4, 8, 9, 10, 11, 12, 13, 4, 14, 15, 16, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 4, 19, 20, 21, 22, 4, 23, 23, 24, 23, 25, 23, 26, 26, 26, 26, 27, 26, 26, 28, 29, 26, 26, 30, 31, 32, 26, 26, 26,
    26, 26, 26, 33, 34, 35, 36, 26, 4, 23, 23, 37, 38, 39, 40, 26, 26, 41, 26, 26, 42, 26, 43, 44, 45, 26, 26, 46, 47, 26, 26, 48, 49, 26, 26, 4, 50, 4, 4, 4
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    216, 291, 323, 383, 415, 908, 351, 815, 815, 447, 479, 511, 543, 575, 621, 882, 589, 681, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 713,
    745, 821, 649, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 777, 809, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815,
    815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
    247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
    247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
    247, 247, 247, 247, 259, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
    247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 853, 940,
    949, 941, 941, 957, 965, 973, 979, 987, 1010, 1018, 1035, 1053, 1071, 1079, 1087, 1262, 1262, 1262, 1262, 1262, 1262, 1433, 1262, 1254, 1254, 1255, 1254,
    1254, 1254, 1255, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
    1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1256, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1254, 1254, 1254, 1254, 1254,
    1254, 1342, 1255, 1253, 1252, 1254, 1254, 1254, 1254, 1254, 1255, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1258, 1418, 1254, 1254, 1254, 1254, 1062,
    1421, 1254, 1254, 1254, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1261, 1262, 1420, 1260,
    1262, 1388, 1262, 1262, 1262, 1262, 1262, 1253, 1254, 1254, 1259, 1131, 1308, 1387, 1262, 1382, 1388, 1131, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
    1344, 1254, 1255, 1142, 1382, 1297, 1196, 1382, 1388, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1384, 1262, 1262, 1262, 1388, 1262, 1262, 1262, 1367,
    1231, 1254, 1254, 1251, 1254, 1254, 1254, 1254, 1255, 1255, 1407, 1252, 1254, 1258, 1262, 1253, 1100, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1253,
    1100, 1254, 1254, 1254, 1254, 1109, 1262, 1254, 1254, 1254, 1254, 1254, 1254, 1122, 1042, 1254, 1254, 1254, 1123, 1256, 1260, 1446, 1254, 1254, 1254, 1254,
    1254, 1254, 1160, 1382, 1384, 1197, 1254, 1178, 1382, 1262, 1262, 1446, 1122, 1343, 1254, 1254, 1252, 1060, 1192, 1169, 1181, 1433, 1207, 1178, 1382, 1260,
    1262, 1218, 1241, 1343, 1254, 1254, 1252, 1397, 1192, 1184, 1181, 1262, 1229, 1434, 1382, 1239, 1262, 1446, 1230, 1251, 1254, 1254, 1252, 1249, 1160, 1272,
    1114, 1262, 1262, 994, 1382, 1262, 1262, 1446, 1122, 1343, 1254, 1254, 1252, 1340, 1160, 1198, 1181, 1434, 1207, 1045, 1382, 1262, 1262, 1002, 1023, 1285,
    1281, 1063, 1023, 1133, 1045, 1199, 1196, 1433, 1262, 1433, 1382, 1262, 1262, 1446, 1100, 1252, 1254, 1254, 1252, 1101, 1045, 1273, 1196, 1435, 1262, 1045,
    1382, 1262, 1262, 1002, 1100, 1252, 1254, 1254, 1252, 1101, 1045, 1273, 1196, 1435, 1264, 1045, 1382, 1262, 1262, 1002, 1100, 1252, 1254, 1254, 1252, 1254,
    1045, 1170, 1196, 1433, 1262, 1045, 1382, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
    1262, 1254, 1254, 1254, 1254, 1256, 1262, 1254, 1254, 1254, 1254, 1255, 1262, 1253, 1254, 1254, 1254, 1254, 1255, 1293, 1387, 1305, 1383, 1382, 1388, 1262,
    1262, 1262, 1262, 1210, 1317, 1419, 1253, 1327, 1337, 1293, 1152, 1352, 1384, 1382, 1388, 1262, 1262, 1262, 1262, 1264, 1027, 1262, 1262, 1262, 1262, 1262,
    1262, 1262, 1262, 1262, 1262, 1259, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1249, 1396, 1259, 1262, 1262,
    1262, 1262, 1405, 1261, 1405, 1062, 1416, 1329, 1061, 1209, 1262, 1262, 1262, 1262, 1264, 1262, 1319, 1263, 1283, 1259, 1262, 1262, 1262, 1262, 1429, 1261,
    1431, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1258, 1254, 1254, 1254, 1254, 1254,
    1254, 1254, 1254, 1254, 1254, 1254, 1260, 1254, 1254, 1256, 1256, 1254, 1254, 1254, 1254, 1256, 1256, 1254, 1408, 1254, 1254, 1254, 1256, 1254, 1254, 1254,
    1254, 1254, 1254, 1100, 1134, 1221, 1257, 1123, 1258, 1254, 1257, 1221, 1257, 1092, 1262, 1262, 1262, 1253, 1309, 1168, 1262, 1253, 1254, 1254, 1254, 1254,
    1254, 1254, 1254, 1254, 1254, 1257, 999, 1253, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1443, 1418, 1254, 1254, 1254, 1254, 1257, 1262,
    1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
    1262, 1262, 1262, 1262, 1262, 1382, 1385, 1365, 1262, 1262, 1262, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
    1254, 1254, 1254, 1254, 1254, 1258, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1388, 1382, 1388, 1375, 1357, 1254, 1253, 1254, 1254,
    1254, 1260, 1381, 1382, 1273, 1386, 1272, 1381, 1382, 1384, 1381, 1365, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1253, 1254, 1254, 1254, 1255, 1431,
    1253, 1254, 1254, 1254, 1255, 1262, 1381, 1382, 1166, 1382, 1382, 1148, 1362, 1262, 1254, 1254, 1254, 1259, 1259, 1262, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,
    0, 0, 1, 0, 0, 3, 4, 5, 6, 7, 4, 8, 9, 10, 11, 12, 13, 4, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 4, 19, 20, 21, 22, 4, 23, 23, 24, 23, 25, 23, 26,
    4, 4, 4, 4, 4, 51, 51, 4, 4, 51, 51, 4, 26, 26, 26, 26, 26, 26, 27, 26, 26, 28, 29, 26, 26, 30, 31, 32, 26, 26, 26, 4, 4, 4, 26, 26, 4, 4, 26, 4, 26, 26,
    26, 33, 34, 35, 36, 26, 4, 4, 26, 26, 4, 4, 4, 4, 51, 51, 4, 23, 23, 37, 38, 39, 40, 26, 4, 26, 4, 4, 4, 26, 26, 4, 4, 4, 26, 41, 26, 26, 42, 26, 43, 44,
    45, 26, 26, 46, 47, 26, 26, 48, 49, 26, 26, 4, 50, 4, 4, 4, 4, 4, 51, 4, 26, 26, 26, 26, 26, 26, 4, 26, 26, 26, 26, 26, 4, 51, 51, 51, 51, 4, 51, 51, 51, 4,
    4, 26, 26, 26, 26, 26, 4, 4, 26, 26, 51, 26, 26, 26, 26, 26, 26, 26, 4, 26, 4, 26, 26, 26, 26, 4, 26, 51, 51, 4, 51, 51, 51, 4, 51, 51, 26, 4, 4, 26, 26, 4,
    4, 51, 26, 51, 51, 4, 51, 51, 51, 51, 51, 4, 4, 51, 51, 26, 26, 51, 51, 4, 4, 51, 51, 51, 4, 4, 4, 4, 51, 26, 26, 4, 4, 51, 4, 51, 51, 51, 51, 4, 4, 4, 51,
    51, 4, 4, 4, 4, 26, 26, 4, 26, 4, 4, 26, 4, 4, 51, 4, 4, 26, 26, 26, 4, 26, 26, 4, 26, 26, 26, 26, 4, 26, 4, 26, 26, 51, 51, 26, 26, 26, 4, 4, 4, 4, 26, 26,
    4, 26, 26, 4, 26, 26, 26, 26, 26, 26, 26, 26, 4, 4, 4, 4, 4, 4, 4, 4, 26, 4, 51, 51, 51, 51, 51, 51, 4, 51, 51, 4, 26, 26, 4, 26, 4, 26, 26, 26, 26, 4, 4,
    26, 51, 26, 26, 51, 51, 51, 51, 51, 26, 26, 51, 26, 26, 26, 26, 26, 26, 51, 51, 51, 51, 51, 51, 26, 4, 26, 4, 4, 26, 4, 4, 26, 26, 4, 26, 26, 26, 4, 26, 4,
    26, 4, 26, 4, 4, 26, 26, 4, 26, 26, 4, 4, 26, 26, 26, 26, 26, 4, 26, 26, 26, 26, 26, 4, 51, 4, 4, 4, 4, 51, 51, 4, 51, 4, 4, 4, 4, 4, 4, 26, 51, 4, 4, 4, 4,
    4, 51, 4, 51, 51, 51, 51, 51, 51, 51, 51, 4, 4, 4, 4, 4, 4, 4, 26, 4, 26, 26, 4, 26, 26, 4, 4, 4, 4, 4, 26, 4, 26, 4, 26, 4, 26, 4, 26, 4, 4, 4, 4, 4, 26,
    26, 26, 26, 26, 26, 4, 4, 4, 26, 4, 4, 4, 4, 4, 4, 4, 51, 51, 4, 26, 26, 26, 4, 51, 51, 51, 4, 26, 26, 26
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 4, 4
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 1758, 1696, 1760, 1762, 1762, 1703, 2410, 2948, 2057, 1721, 2123, 1733, 1744, 1736, 2230, 1770, 2403, 2735, 2737, 3185,
    1782, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 1758, 1696, 1760, 1762, 1762, 1703, 2410, 2948, 2057, 1794, 2123, 1733, 1744, 1736,
    2230, 1806, 1818, 2735, 2737, 3185, 1782, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 1758, 1696, 1838, 1762, 1762, 1703, 1825, 2651,
    1938, 1846, 2123, 1861, 1890, 1736, 2230, 1770, 2403, 2735, 2737, 3185, 1782, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412,
    1910, 2413, 2413, 2657, 1825, 2651, 1938, 1846, 1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2658, 1946, 1958, 1963, 1963, 1971, 1897, 2651, 1938, 1846, 1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2412, 1980, 1986, 1990, 1998, 1825, 2708, 1950, 1846, 2755, 1920, 3275, 1999, 2195, 2007,
    2355, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 2018, 2024, 2028, 2036, 1825, 2651, 1938, 1846,
    1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 1910, 2093,
    2047, 2054, 1825, 2651, 1938, 1846, 1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2658, 2065, 2077, 2082, 2082, 2090, 1875, 2651, 1938, 1846, 1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 2101, 2107, 2111, 2119, 1825, 2651, 1938, 1846, 1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735,
    2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 1910, 2859, 2131, 2138, 1825, 2651, 1938, 1846, 1786, 1920,
    3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 1910, 2413, 2150, 2157,
    1825, 2174, 2720, 2190, 2069, 2203, 2223, 2573, 2334, 2266, 2341, 1880, 1882, 2278, 2286, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2658, 2412, 1910, 2413, 2302, 2309, 1825, 2651, 1938, 1846, 1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 1910, 2413, 2327, 2376, 1825, 2362, 1938, 1846, 2389, 2422, 3241, 2463, 2230, 1934, 2555, 2735, 1853, 3184,
    3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 2436, 2442, 2446, 2454, 1825, 2651, 1938, 1846, 2368, 1920, 3241, 1999,
    2230, 1934, 2555, 2735, 1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 1725, 2471, 2479, 2487, 2508, 2494, 1825, 2516,
    2215, 1846, 1774, 2541, 2563, 2142, 2581, 1934, 2596, 2735, 2737, 3184, 2625, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412,
    1910, 2413, 2413, 2942, 1825, 2010, 1938, 2645, 2500, 2666, 3241, 1912, 2230, 2674, 2555, 2163, 2182, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2951, 2688, 2702, 2953, 2244, 2251, 1825, 2651, 1810, 1846, 1798, 1920, 2745, 2912, 2610, 1934, 2403, 2735, 2737, 3184, 3214, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2763, 2771, 2779, 2784, 2792, 1868, 2680, 3218, 1846, 1786, 1920, 3241, 1999, 2230, 1934,
    2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 1751, 2412, 1910, 2413, 2413, 1926, 1825, 2651, 1938, 2806,
    1786, 2820, 3241, 2864, 2230, 2837, 2852, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2872, 2883, 2875,
    1713, 2889, 2258, 2651, 1938, 1846, 1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735, 3253, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2714, 2897, 2907, 2899, 2920, 2911, 3004, 2798, 2381, 1846, 2755, 1920, 2997, 1999, 2319, 1934, 2403, 1830, 2737, 3184, 3214, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2039, 1938, 2645, 2500, 2666, 3241, 1912, 2230, 2982, 2555, 2180,
    2182, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2039, 1938, 2645, 2500, 2666,
    3241, 2990, 2230, 2982, 2555, 2180, 2182, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974,
    1825, 2039, 1938, 3019, 2500, 2666, 3241, 1912, 2348, 2982, 2555, 3027, 2182, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2368, 1920, 3241, 1999, 2230, 3035, 2555, 1851, 1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2368, 1920, 3241, 2752, 2230, 3035, 2555, 1851, 1853, 3184,
    3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2368, 3043, 3241, 1999,
    2230, 3051, 2555, 1851, 1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694,
    1938, 1846, 2368, 3059, 3241, 1999, 2396, 3035, 2555, 1851, 1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936,
    2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2368, 1920, 3241, 1999, 2230, 3067, 2555, 1851, 1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2368, 1920, 3241, 1999, 2230, 3035, 2555, 2827, 1853, 3184, 3214, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 3075, 2368, 1920, 3241, 1999, 2230, 3035,
    2555, 1851, 1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 3083, 3091, 3097, 3105, 3112, 1825, 2651, 1938, 1846,
    1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 1972, 2412, 3120, 1708,
    2414, 3128, 3136, 2651, 1938, 1846, 1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2459, 2412, 2461, 2413, 2413, 2413, 1825, 2948, 2413, 1721, 3144, 3152, 2166, 2726, 2570, 3160, 2237, 2735, 2732, 3184, 3214, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 3168, 2314, 2270, 3174, 1825, 2651, 3011, 1846, 1786, 1920, 3241, 1999, 2230, 1934, 2403, 2735,
    2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2039, 1938, 2645, 2500, 2666,
    3241, 1912, 2230, 2982, 2555, 2180, 2182, 3182, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974,
    1825, 2039, 1938, 2645, 2500, 2666, 3241, 1912, 2230, 3193, 2555, 2180, 2182, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2928, 2936, 2961, 2966, 2966, 2974, 1825, 2039, 1938, 2645, 2500, 2666, 3241, 1912, 2230, 3201, 2588, 2180, 2182, 3184, 3214, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2039, 1938, 2645, 2500, 2666, 3241, 1912, 2230, 2982, 2555, 2209, 2182, 3184,
    3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2368, 1920, 3241, 1999,
    2230, 3035, 2555, 1851, 2844, 3209, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694,
    1938, 1846, 2368, 1920, 3241, 1999, 2230, 3035, 2555, 1851, 3248, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936,
    2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2368, 1920, 3241, 1999, 2230, 3035, 2555, 1851, 2829, 3184, 3226, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2368, 1920, 3241, 1999, 2230, 3035, 2555, 1851, 1853, 3234, 3214, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2368, 1920, 3241, 1999, 2230, 3035,
    2555, 1902, 1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846,
    2368, 1920, 3261, 1999, 2230, 3035, 2555, 1851, 1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966,
    2966, 2974, 1825, 2694, 1938, 1846, 2368, 1920, 3241, 1999, 2230, 3035, 2555, 1851, 1853, 3269, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2694, 1938, 1846, 2428, 1920, 3283, 1999, 2230, 3035, 2555, 1851, 1853, 3184, 3214, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2928, 2936, 2961, 2966, 2966, 2974, 1825, 2812, 3291, 1846, 2603, 1920, 3241, 1999, 2548, 3035, 2617, 1851,
    1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 1910, 2631, 2637, 3299, 1825, 2651, 1938, 1846, 1786, 1920,
    3241, 1999, 2230, 1934, 2403, 2735, 2737, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2658, 2412, 1910, 2413, 2413, 2942,
    1825, 2651, 1938, 1846, 2368, 1920, 3241, 1999, 2230, 1934, 2555, 2735, 1853, 3184, 3214, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2290, 2522, 2528, 2533, 2294, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
    2413, 2413, 2413, 2413, 2413, 2413, 3890, 3840, 557, 557, 557, 557, 557, 557, 0, 43, 0, 557, 0, 0, 0, 49, 0, 0, 0, 0, 56, 56, 56, 56, 56, 73, 586, 0, 73, 0,
    0, 0, 0, 46, 46, 46, 46, 73, 102, 0, 0, 0, 0, 108, 0, 0, 0, 73, 97, 73, 0, 86, 3188, 102, 102, 0, 43, 0, 0, 0, 0, 48, 0, 43, 0, 0, 557, 557, 557, 557, 557,
    557, 557, 557, 121, 0, 123, 52103, 0, 0, 0, 0, 73, 0, 0, 101, 73, 73, 163, 73, 0, 0, 0, 0, 73, 86, 86, 0, 73, 512, 0, 73, 0, 0, 0, 0, 73, 99, 99, 0, 130, 0,
    123, 52103, 0, 0, 0, 0, 81, 81, 0, 0, 120, 0, 130, 0, 73, 73, 52103, 0, 50, 50, 52, 53, 0, 0, 0, 73, 73, 0, 149, 150, 2106, 2106, 557, 557, 557, 557, 557,
    557, 73, 586, 0, 73, 2304, 0, 0, 0, 73, 73, 52116, 0, 0, 73, 73, 73, 102, 0, 0, 0, 107, 108, 0, 50, 50, 52, 53, 0, 7424, 0, 50, 50, 52, 1536, 0, 0, 0, 89,
    89, 0, 0, 0, 89, 89, 97, 73, 0, 114, 3188, 102, 102, 0, 50, 50, 1536, 53, 0, 0, 0, 73, 147, 52116, 0, 0, 2106, 2106, 0, 0, 0, 0, 0, 0, 111, 73, 73, 102, 0,
    0, 0, 107, 0, 0, 43, 0, 0, 0, 0, 8448, 121, 0, 73, 52103, 0, 0, 0, 0, 81, 87, 0, 0, 50, 0, 52, 52, 0, 0, 0, 0, 82, 82, 0, 0, 2106, 2106, 0, 52, 0, 52, 52,
    52, 52, 52, 52, 52, 52, 52, 0, 43, 0, 0, 0, 0, 0, 49, 59, 59, 0, 0, 0, 0, 0, 65, 65, 0, 65, 65, 65, 65, 65, 65, 65, 65, 65, 0, 0, 0, 0, 0, 0, 0, 73, 121,
    132, 73, 0, 0, 0, 0, 0, 81, 0, 0, 2106, 2106, 0, 0, 0, 0, 0, 4864, 4864, 0, 4864, 4864, 4864, 4864, 4864, 4864, 4864, 4864, 4864, 0, 43, 0, 0, 0, 0, 0, 81,
    1363, 0, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 0, 43, 0, 0, 0, 0, 0, 86, 0, 0, 50, 0, 53, 53, 0, 0, 0, 0, 90, 86, 86, 0, 2106, 2106, 0, 53, 0, 53,
    53, 53, 53, 53, 53, 53, 53, 53, 0, 43, 0, 0, 0, 0, 0, 5120, 5120, 5120, 2106, 2106, 0, 0, 0, 0, 0, 5376, 5376, 0, 5376, 5376, 5376, 5376, 5376, 5376, 5376,
    5376, 5376, 0, 43, 0, 0, 0, 0, 0, 97, 86, 86, 0, 5632, 5632, 5632, 5632, 5632, 5632, 5632, 5632, 0, 43, 0, 0, 0, 0, 0, 121, 0, 0, 73, 5888, 5888, 5888,
    5888, 5888, 5888, 5888, 5888, 0, 43, 0, 0, 73, 0, 0, 145, 73, 73, 0, 0, 0, 102, 102, 0, 76, 0, 34816, 0, 0, 81, 0, 0, 145, 73, 73, 52116, 0, 0, 73, 73, 89,
    586, 0, 90, 2304, 0, 0, 0, 125, 0, 0, 0, 120, 89, 103, 0, 0, 0, 107, 0, 0, 145, 146, 73, 52116, 0, 0, 586, 0, 81, 81, 0, 88, 89, 89, 0, 114, 3188, 103, 103,
    0, 86, 0, 3188, 0, 0, 0, 120, 0, 121, 0, 73, 73, 0, 0, 47, 47, 0, 0, 0, 0, 47, 0, 72, 0, 0, 0, 75, 0, 50, 0, 52, 53, 0, 0, 8704, 121, 0, 89, 52103, 0, 0, 0,
    0, 1343, 0, 1343, 1343, 89, 89, 89, 89, 89, 89, 89, 162, 89, 89, 164, 89, 0, 0, 0, 0, 4352, 0, 0, 0, 0, 0, 0, 0, 6144, 6144, 6144, 6144, 6144, 6144, 6144,
    6144, 0, 43, 0, 0, 0, 0, 0, 1343, 0, 0, 0, 0, 3188, 0, 0, 0, 120, 6400, 0, 6400, 0, 0, 6400, 6400, 0, 86, 0, 3188, 0, 0, 0, 129, 0, 121, 0, 89, 89, 52103,
    0, 86, 0, 3188, 0, 0, 128, 120, 0, 121, 0, 73, 73, 142, 0, 77, 34893, 0, 0, 81, 0, 0, 1363, 0, 73, 86, 86, 0, 6400, 1066, 43, 0, 0, 0, 0, 0, 7759, 81, 81,
    7759, 0, 94, 94, 1363, 0, 73, 86, 100, 0, 86, 0, 3188, 0, 127, 0, 120, 0, 121, 0, 73, 73, 52103, 0, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 49, 73, 102, 104, 0, 0,
    107, 0, 0, 1363, 0, 98, 86, 86, 0, 2106, 2106, 0, 0, 0, 0, 0, 6656, 6656, 0, 6656, 6656, 6656, 6656, 6656, 6656, 6656, 6656, 6656, 1066, 43, 0, 0, 0, 0, 0,
    10240, 0, 0, 0, 0, 0, 0, 122, 73, 50, 0, 46, 46, 46, 46, 46, 57, 2106, 2106, 57, 57, 46, 57, 57, 46, 67, 6958, 46, 57, 6958, 6979, 67, 6979, 0, 0, 0, 0,
    586, 0, 0, 1363, 1876, 73, 86, 86, 0, 6979, 6979, 6979, 6979, 6979, 6979, 6979, 6979, 586, 0, 34816, 0, 0, 81, 0, 0, 4352, 4352, 0, 4352, 4352, 0, 0, 4352,
    0, 4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352, 512, 614, 0, 0, 0, 107, 109, 0, 86, 0, 3188, 126, 0, 0, 120, 0, 121, 0, 73, 73, 52103, 3208, 73, 73, 113,
    107, 3188, 102, 4096, 0, 95, 95, 0, 0, 0, 0, 120, 0, 0, 89, 124, 0, 113, 3188, 0, 0, 0, 120, 0, 121, 0, 140, 73, 52103, 3208, 130, 0, 121, 0, 73, 73, 52103,
    0, 96, 1363, 0, 73, 86, 86, 0, 99, 0, 3188, 0, 0, 0, 120, 0, 121, 139, 73, 141, 52103, 3208, 73, 3328, 73, 3584, 0, 0, 0, 0, 10496, 0, 10496, 0, 10496,
    10496, 10496, 10496, 10496, 10496, 10496, 10496, 73, 586, 0, 73, 2304, 1883, 0, 0, 34816, 0, 0, 81, 0, 0, 43, 0, 0, 0, 0, 0, 0, 73, 102, 1883, 0, 0, 107, 0,
    111, 121, 0, 73, 52103, 0, 2686, 0, 0, 34816, 0, 0, 81, 0, 7424, 50, 0, 0, 0, 0, 47, 0, 0, 34816, 0, 0, 81, 1363, 0, 2106, 2106, 0, 0, 47, 0, 0, 0, 34816,
    0, 0, 82, 0, 0, 44, 0, 0, 0, 0, 0, 85, 0, 81, 87, 0, 0, 95, 0, 0, 0, 95, 73, 73, 0, 0, 0, 73, 73, 0, 0, 0, 73, 73, 73, 73, 0, 115, 3188, 102, 102, 0, 119,
    0, 0, 0, 0, 0, 73, 0, 0, 0, 50, 0, 0, 0, 54, 0, 55, 54, 2106, 2106, 60, 61, 55, 64, 64, 54, 60, 54, 54, 64, 54, 68, 68, 68, 71, 71, 71, 71, 71, 71, 0, 43,
    0, 0, 0, 0, 0, 34816, 79, 80, 81, 0, 80, 73, 586, 7168, 73, 2304, 0, 0, 0, 34894, 0, 0, 81, 1363, 0, 73, 102, 0, 0, 0, 107, 110, 0, 144, 0, 73, 73, 52116,
    0, 0, 153, 73, 131, 0, 73, 52103, 0, 0, 0, 0, 151, 73, 52116, 0, 0, 73, 154, 120, 110, 21123, 0, 73, 73, 52103, 0, 5632, 5632, 0, 5632, 0, 0, 0, 110, 0,
    20992, 0, 73, 50, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 2106, 2106, 0, 0, 56, 56, 56, 0, 43, 9216, 0, 0, 0, 0, 33587, 44, 0, 0, 0, 8960, 0, 0, 0, 0, 2106, 2106, 0,
    0, 8960, 0, 0, 0, 0, 0, 0, 0, 123, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 1066, 43, 0, 0, 1066, 0, 0, 0, 50, 0, 1066, 0, 0, 0, 0, 1066, 43, 0, 0,
    0, 0, 0, 34816, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 2106, 2106, 1066, 1066, 0, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 43, 0, 0, 0, 0, 0,
    121, 0, 73, 52103, 3208, 2686, 0, 0, 118, 0, 0, 0, 0, 0, 111, 73, 73, 0, 107, 3188, 102, 102, 0, 33587, 33587, 52, 53, 7680, 0, 0, 9728, 0, 0, 9809, 9815,
    0, 0, 73, 586, 0, 73, 2304, 1883, 92, 92, 143, 0, 145, 73, 73, 52116, 0, 0, 121, 0, 73, 52103, 3208, 0, 0, 0, 73, 102, 0, 105, 0, 107, 0, 0, 121, 0, 73,
    52103, 3208, 0, 0, 138, 73, 102, 0, 0, 106, 107, 0, 0, 121, 0, 73, 52103, 3208, 0, 137, 0, 73, 586, 0, 73, 2304, 0, 93, 0, 50, 0, 0, 9472, 0, 0, 0, 0, 2106,
    2106, 0, 62, 0, 62, 62, 9538, 9538, 62, 9538, 9541, 9541, 9542, 9541, 9541, 9541, 9541, 9541, 9541, 9541, 9541, 0, 43, 0, 0, 0, 0, 0, 2106, 2106, 0, 0, 49,
    0, 0, 0, 49, 0, 43, 0, 0, 0, 0, 0, 9984, 50, 50, 52, 53, 0, 0, 0, 95, 95, 0, 0, 73, 0, 95, 0, 73, 102, 0, 0, 0, 0, 0, 0, 121, 0, 73, 0, 0, 0, 0, 0, 2106,
    2106, 0, 0, 1343, 0, 1343, 0, 43, 0, 0, 0, 0, 0, 73, 156, 73, 73, 73, 73, 73, 73, 73, 73, 160, 121, 0, 133, 52103, 3208, 2686, 0, 0, 121, 0, 134, 52103,
    3208, 2686, 0, 0, 155, 73, 73, 158, 159, 73, 73, 73, 73, 0, 0, 0, 0, 81, 87, 7424, 0, 163, 73, 73, 73, 0, 0, 0, 0, 73, 73, 73, 73, 73, 73, 161, 73, 73, 0,
    114, 3188, 102, 102, 0, 73, 152, 52116, 0, 0, 73, 73, 0, 7936, 8192, 73, 73, 73, 112, 0, 114, 3188, 102, 102, 0, 73, 73, 157, 73, 73, 160, 73, 73, 0, 107,
    0, 102, 102, 117, 98, 73, 0, 114, 3188, 102, 102, 0, 84, 0, 0, 0, 81, 87, 0, 0, 10496, 0, 43, 0, 0, 0, 0, 0
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    11, 19, 27, 35, 43, 51, 59, 66, 69, 69, 69, 116, 77, 83, 87, 91, 95, 99, 103, 107, 111, 115, 79, 123, 120, 152, 176, 136, 140, 149, 156, 188, 166, 173, 160,
    180, 169, 159, 161, 182, 144, 162, 143, 186, 203, 145, 192, 202, 194, 196, 196, 198, 224, 231, 132, 129, 207, 241, 238, 213, 217, 220, 223, 230, 228, 209,
    229, 235, 126, 229, 229, 229, 229, 229, 229, 229, 229, 10, 134217730, 2, 2, 134217728, 0, 16388, 16384, 42, 34, 536936450, 134217730, 268435458, 536903690,
    960, 960, -1073643510, 1073971242, 402653202, 1342406698, 1342406714, 571736170, -1073500118, 640942186, 573833322, 1476624442, 640942186, -434130838,
    -501239702, -434129814, -402673558, -285233046, -268455830, -151015318, -151015302, -134238102, -134238086, -16797574, -20358, 8, 2048, 0, 0, 32, 536870912,
    268435456, 0, 4, 4, 32, 32, 0, 0, 4, 2, 0, 8, 0, 16, 64, 0, 45058, -536870912, 131072, 132096, -268435456, 2048, 512, 1073741824, -2147483648, 131072, 8194,
    2, 2, 134217728, 32770, 256, 960, -1073741824, 256, 576, -1073741824, 1073741824, -2147483648, 131072, 131072, 131072, 12290, 1024, 45058, 1024, 132096,
    2048, 32768, 32768, 512, 2, 32770, 576, 1073741824, 131072, 16, 1342177280, 12290, 12290, 1024, 132096, 132096, 2048, 131072, 131072, 131072, 131072, 16,
    64, 4098, 1024, 1073741824, -2147483648, 8194, 4098, 8194, 4098, 8194, 8194, 131072, 8194, 4098, 1024, 2048, 0, 128, 0, 0, 0, 2, 304, 48, 304, 304, 308,
    308, 308, 310, 310, 310, 374, 0, 0, 8, 128, 64, 0, 0, 0, 0, 1, 64, 0, 32, 0, 0, 48, 304, 70, 2, 2, 48
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'Whitespace',
    'ProcessingInstructionContents',
    'NCName',
    'Context',
    'StringLiteral',
    'CharCode',
    'Char',
    'CharRange',
    'CharCodeRange',
    &quot;'['&quot;,
    'URL',
    &quot;'/*ws:explicit*/'&quot;,
    &quot;'/*ws:definition*/'&quot;,
    'S',
    'DocComment',
    'EOF',
    'EquivalenceLookAhead',
    &quot;'$'&quot;,
    &quot;'&amp;'&quot;,
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'+'&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;'::='&quot;,
    &quot;'&lt;&lt;'&quot;,
    &quot;'&lt;?'&quot;,
    &quot;'&lt;?ENCORE?&gt;'&quot;,
    &quot;'&lt;?TOKENS?&gt;'&quot;,
    &quot;'=='&quot;,
    &quot;'&gt;&gt;'&quot;,
    &quot;'?'&quot;,
    &quot;'?&gt;'&quot;,
    &quot;'['&quot;,
    &quot;'[^'&quot;,
    &quot;'\\'&quot;,
    &quot;']'&quot;,
    &quot;'|'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 256, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 256"/>
        <xsl:variable name="end" select="
          if ($result idiv 64 mod 2 eq 1) then
            $begin + $result idiv 128
          else
            $end - $result idiv 128
        "/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 64 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 8"/>
              <xsl:variable name="c2" select="$c1 idiv 32"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 8 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="256 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 255) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 256, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 164 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:variable name="i2" select="$i1 idiv 8"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 mod 8 + $p:EXPECTED[$i2 + 1] + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse EquivalenceCharRange.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-EquivalenceCharRange" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 5">                                         <!-- StringLiteral -->
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- StringLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- '[' -->
          <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>    <!-- CharCode | Char | CharRange | CharCodeRange -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- Char -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- Char -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- CharCode -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- CharCode -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- CharRange -->
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- CharRange -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- CharCodeRange -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>     <!-- ']' -->
          <xsl:variable name="state" select="p:consume(39, $input, $state)"/>       <!-- ']' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'EquivalenceCharRange', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse Equivalence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Equivalence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(17, $input, $state)"/>             <!-- EquivalenceLookAhead -->
    <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>         <!-- Whitespace | StringLiteral | '[' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-EquivalenceCharRange($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(6, $input, $state)"/>          <!-- Whitespace | '==' -->
    <xsl:variable name="state" select="p:consume(32, $input, $state)"/>             <!-- '==' -->
    <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>         <!-- Whitespace | StringLiteral | '[' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-EquivalenceCharRange($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Equivalence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production Delimiter (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Delimiter-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral -->
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-NameOrString($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1W(19, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                                                         EquivalenceLookAhead | '<?ENCORE?>' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 3">                                    <!-- NCName -->
              <xsl:variable name="state" select="p:lookahead2W(27, $input, $state)"/> <!-- Whitespace | NCName | Context | StringLiteral | DocComment | EOF |
                                                                                           EquivalenceLookAhead | '::=' | '<<' | '<?ENCORE?>' | '>>' | '?' |
                                                                                           '\\' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 259">                            <!-- NCName Context -->
                    <xsl:variable name="state" select="p:lookahead3W(21, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                                                                 EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 5">                                    <!-- StringLiteral -->
              <xsl:variable name="state" select="p:lookahead2W(22, $input, $state)"/> <!-- Whitespace | NCName | Context | StringLiteral | DocComment | EOF |
                                                                                           EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 261">                            <!-- StringLiteral Context -->
                    <xsl:variable name="state" select="p:lookahead3W(21, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                                                                 EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 15                                          (: DocComment :)
                       or $state[$p:lk] = 16                                          (: EOF :)
                       or $state[$p:lk] = 17                                          (: EquivalenceLookAhead :)
                       or $state[$p:lk] = 30                                          (: '&lt;?ENCORE?>' :)
                       or $state[$p:lk] = 1731                                        (: NCName '::=' :)
                       or $state[$p:lk] = 1795                                        (: NCName '&lt;&lt;' :)
                       or $state[$p:lk] = 1797                                        (: StringLiteral '&lt;&lt;' :)
                       or $state[$p:lk] = 2115                                        (: NCName '>>' :)
                       or $state[$p:lk] = 2117                                        (: StringLiteral '>>' :)
                       or $state[$p:lk] = 2179                                        (: NCName '?' :)
                       or $state[$p:lk] = 2435                                        (: NCName '\\' :)
                       or $state[$p:lk] = 114947                                      (: NCName Context '&lt;&lt;' :)
                       or $state[$p:lk] = 114949                                      (: StringLiteral Context '&lt;&lt;' :)
                       or $state[$p:lk] = 135427                                      (: NCName Context '>>' :)
                       or $state[$p:lk] = 135429">                                  <!-- StringLiteral Context '>>' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-Delimiter-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse Delimiter.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Delimiter" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(3, $input, $state)"/>              <!-- NCName -->
    <xsl:variable name="state" select="p:lookahead1W(7, $input, $state)"/>          <!-- Whitespace | '\\' -->
    <xsl:variable name="state" select="p:consume(38, $input, $state)"/>             <!-- '\\' -->
    <xsl:variable name="state" select="p:parse-Delimiter-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Delimiter', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production Preference (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Preference-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral -->
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-NameOrString($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1W(19, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                                                         EquivalenceLookAhead | '<?ENCORE?>' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 3">                                    <!-- NCName -->
              <xsl:variable name="state" select="p:lookahead2W(27, $input, $state)"/> <!-- Whitespace | NCName | Context | StringLiteral | DocComment | EOF |
                                                                                           EquivalenceLookAhead | '::=' | '<<' | '<?ENCORE?>' | '>>' | '?' |
                                                                                           '\\' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 259">                            <!-- NCName Context -->
                    <xsl:variable name="state" select="p:lookahead3W(21, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                                                                 EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 5">                                    <!-- StringLiteral -->
              <xsl:variable name="state" select="p:lookahead2W(22, $input, $state)"/> <!-- Whitespace | NCName | Context | StringLiteral | DocComment | EOF |
                                                                                           EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 261">                            <!-- StringLiteral Context -->
                    <xsl:variable name="state" select="p:lookahead3W(21, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                                                                 EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 15                                          (: DocComment :)
                       or $state[$p:lk] = 16                                          (: EOF :)
                       or $state[$p:lk] = 17                                          (: EquivalenceLookAhead :)
                       or $state[$p:lk] = 30                                          (: '&lt;?ENCORE?>' :)
                       or $state[$p:lk] = 1731                                        (: NCName '::=' :)
                       or $state[$p:lk] = 1795                                        (: NCName '&lt;&lt;' :)
                       or $state[$p:lk] = 1797                                        (: StringLiteral '&lt;&lt;' :)
                       or $state[$p:lk] = 2115                                        (: NCName '>>' :)
                       or $state[$p:lk] = 2117                                        (: StringLiteral '>>' :)
                       or $state[$p:lk] = 2179                                        (: NCName '?' :)
                       or $state[$p:lk] = 2435                                        (: NCName '\\' :)
                       or $state[$p:lk] = 114947                                      (: NCName Context '&lt;&lt;' :)
                       or $state[$p:lk] = 114949                                      (: StringLiteral Context '&lt;&lt;' :)
                       or $state[$p:lk] = 135427                                      (: NCName Context '>>' :)
                       or $state[$p:lk] = 135429">                                  <!-- StringLiteral Context '>>' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-Preference-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse Preference.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Preference" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-NameOrString($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(14, $input, $state)"/>         <!-- Whitespace | '<<' | '>>' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- '>>' -->
          <xsl:variable name="state" select="p:consume(33, $input, $state)"/>       <!-- '>>' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '<<' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-Preference-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Preference', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse Option.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Option" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- WsExplicit -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- WsExplicit -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- WsDefinition -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Option', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse Link.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Link" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- UrlIntroducer -->
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- URL -->
    <xsl:variable name="state" select="p:consume(11, $input, $state)"/>             <!-- URL -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- ']' -->
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Link', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production Choice (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Choice-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(40, $input, $state)"/>         <!-- '|' -->
        <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral | CharCode | '$' | '(' | ')' |
                                                                                         '.' | '<?' | '[' | '[^' | '|' -->
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-SequenceOrDifference($input, $state)
        "/>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 40">                                     <!-- '|' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-Choice-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production Choice (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Choice-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(26, $input, $state)"/>         <!-- '/' -->
        <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral | CharCode | '$' | '(' | ')' |
                                                                                         '.' | '/' | '<?' | '[' | '[^' -->
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-SequenceOrDifference($input, $state)
        "/>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 26">                                     <!-- '/' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-Choice-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse Choice.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Choice" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-SequenceOrDifference($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 21">                                       <!-- ')' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 40">                                  <!-- '|' -->
                <xsl:variable name="state" select="p:parse-Choice-1($input, $state)"/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:parse-Choice-2($input, $state)"/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Choice', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production CharClass (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-CharClass-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>      <!-- CharCode | Char | CharRange | CharCodeRange -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 7">                                     <!-- Char -->
              <xsl:variable name="state" select="p:consume(7, $input, $state)"/>    <!-- Char -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 6">                                     <!-- CharCode -->
              <xsl:variable name="state" select="p:consume(6, $input, $state)"/>    <!-- CharCode -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 8">                                     <!-- CharRange -->
              <xsl:variable name="state" select="p:consume(8, $input, $state)"/>    <!-- CharRange -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="p:consume(9, $input, $state)"/>    <!-- CharCodeRange -->
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>      <!-- CharCode | Char | CharRange | CharCodeRange | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 39">                                      <!-- ']' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-CharClass-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse CharClass.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-CharClass" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 36">                                        <!-- '[' -->
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- '[' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- '[^' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-CharClass-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'CharClass', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse NameOrString.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NameOrString" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- NCName -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- NCName -->
          <xsl:variable name="state" select="p:lookahead1W(38, $input, $state)"/>   <!-- Whitespace | NCName | Context | StringLiteral | CharCode | WsExplicit |
                                                                                         WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' | '&' |
                                                                                         '(' | ')' | '*' | '+' | '-' | '.' | '/' | '<<' | '<?' | '<?ENCORE?>' |
                                                                                         '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 4">                                   <!-- Context -->
                <xsl:variable name="state" select="p:consume(4, $input, $state)"/>  <!-- Context -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- StringLiteral -->
          <xsl:variable name="state" select="p:lookahead1W(38, $input, $state)"/>   <!-- Whitespace | NCName | Context | StringLiteral | CharCode | WsExplicit |
                                                                                         WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' | '&' |
                                                                                         '(' | ')' | '*' | '+' | '-' | '.' | '/' | '<<' | '<?' | '<?ENCORE?>' |
                                                                                         '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 4">                                   <!-- Context -->
                <xsl:variable name="state" select="p:consume(4, $input, $state)"/>  <!-- Context -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'NameOrString', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse Primary.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Primary" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3                                             (: NCName :)
                     or $state[$p:l1] = 5">                                         <!-- StringLiteral -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-NameOrString($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 29">                                        <!-- '<?' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ProcessingInstruction($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- CharCode -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- CharCode -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- '$' -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- '$' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '.' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '.' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- '(' -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- '(' -->
          <xsl:variable name="state" select="p:lookahead1W(28, $input, $state)"/>   <!-- Whitespace | NCName | StringLiteral | CharCode | '$' | '(' | ')' |
                                                                                         '.' | '/' | '<?' | '[' | '[^' | '|' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Choice($input, $state)
          "/>
          <xsl:variable name="state" select="p:consume(21, $input, $state)"/>       <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-CharClass($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Primary', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production Item (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Item-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(32, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral | CharCode | WsExplicit |
                                                                                         WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' | '&' |
                                                                                         '(' | ')' | '*' | '+' | '-' | '.' | '/' | '<?' | '<?ENCORE?>' |
                                                                                         '<?TOKENS?>' | '?' | '[' | '[^' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 22                                         (: '*' :)
                      and $state[$p:l1] != 23                                         (: '+' :)
                      and $state[$p:l1] != 34">                                     <!-- '?' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 34">                                <!-- '?' -->
                  <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- '?' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 22">                                <!-- '*' -->
                  <xsl:variable name="state" select="p:consume(22, $input, $state)"/> <!-- '*' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(23, $input, $state)"/> <!-- '+' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-Item-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse Item.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Item" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-Primary($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-Item-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Item', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production SequenceOrDifference (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-SequenceOrDifference-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 3">                                    <!-- NCName -->
              <xsl:variable name="state" select="p:lookahead2W(39, $input, $state)"/> <!-- Whitespace | NCName | Context | StringLiteral | CharCode |
                                                                                           WsExplicit | WsDefinition | DocComment | EOF | EquivalenceLookAhead |
                                                                                           '$' | '&' | '(' | ')' | '*' | '+' | '.' | '/' | '::=' | '<<' | '<?' |
                                                                                           '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '\\' |
                                                                                           '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 259">                            <!-- NCName Context -->
                    <xsl:variable name="state" select="p:lookahead3W(35, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | CharCode | WsExplicit |
                                                                                                 WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' |
                                                                                                 '&' | '(' | ')' | '*' | '+' | '.' | '/' | '<<' | '<?' |
                                                                                                 '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2179">                           <!-- NCName '?' -->
                    <xsl:variable name="state" select="p:lookahead3W(33, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | CharCode | WsExplicit |
                                                                                                 WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' |
                                                                                                 '&' | '(' | ')' | '*' | '+' | '.' | '/' | '::=' | '<?' |
                                                                                                 '<?ENCORE?>' | '<?TOKENS?>' | '?' | '[' | '[^' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 5">                                    <!-- StringLiteral -->
              <xsl:variable name="state" select="p:lookahead2W(36, $input, $state)"/> <!-- Whitespace | NCName | Context | StringLiteral | CharCode |
                                                                                           WsExplicit | WsDefinition | DocComment | EOF | EquivalenceLookAhead |
                                                                                           '$' | '&' | '(' | ')' | '*' | '+' | '.' | '/' | '<<' | '<?' |
                                                                                           '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 261">                            <!-- StringLiteral Context -->
                    <xsl:variable name="state" select="p:lookahead3W(35, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | CharCode | WsExplicit |
                                                                                                 WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' |
                                                                                                 '&' | '(' | ')' | '*' | '+' | '.' | '/' | '<<' | '<?' |
                                                                                                 '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 12                                          (: WsExplicit :)
                       or $state[$p:lk] = 13                                          (: WsDefinition :)
                       or $state[$p:lk] = 15                                          (: DocComment :)
                       or $state[$p:lk] = 16                                          (: EOF :)
                       or $state[$p:lk] = 17                                          (: EquivalenceLookAhead :)
                       or $state[$p:lk] = 19                                          (: '&amp;' :)
                       or $state[$p:lk] = 21                                          (: ')' :)
                       or $state[$p:lk] = 26                                          (: '/' :)
                       or $state[$p:lk] = 30                                          (: '&lt;?ENCORE?>' :)
                       or $state[$p:lk] = 31                                          (: '&lt;?TOKENS?>' :)
                       or $state[$p:lk] = 40                                          (: '|' :)
                       or $state[$p:lk] = 1731                                        (: NCName '::=' :)
                       or $state[$p:lk] = 1795                                        (: NCName '&lt;&lt;' :)
                       or $state[$p:lk] = 1797                                        (: StringLiteral '&lt;&lt;' :)
                       or $state[$p:lk] = 2115                                        (: NCName '>>' :)
                       or $state[$p:lk] = 2117                                        (: StringLiteral '>>' :)
                       or $state[$p:lk] = 2435                                        (: NCName '\\' :)
                       or $state[$p:lk] = 112771                                      (: NCName '?' '::=' :)
                       or $state[$p:lk] = 114947                                      (: NCName Context '&lt;&lt;' :)
                       or $state[$p:lk] = 114949                                      (: StringLiteral Context '&lt;&lt;' :)
                       or $state[$p:lk] = 135427                                      (: NCName Context '>>' :)
                       or $state[$p:lk] = 135429">                                  <!-- StringLiteral Context '>>' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-Item($input, $state)
            "/>
            <xsl:sequence select="p:parse-SequenceOrDifference-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse SequenceOrDifference.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-SequenceOrDifference" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 3">                                        <!-- NCName -->
          <xsl:variable name="state" select="p:lookahead2W(40, $input, $state)"/>   <!-- Whitespace | NCName | Context | StringLiteral | CharCode | WsExplicit |
                                                                                         WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' | '&' |
                                                                                         '(' | ')' | '*' | '+' | '-' | '.' | '/' | '::=' | '<<' | '<?' |
                                                                                         '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '\\' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 259">                                <!-- NCName Context -->
                <xsl:variable name="state" select="p:lookahead3W(37, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | CharCode | WsExplicit |
                                                                                             WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' |
                                                                                             '&' | '(' | ')' | '*' | '+' | '-' | '.' | '/' | '<<' | '<?' |
                                                                                             '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 2179">                               <!-- NCName '?' -->
                <xsl:variable name="state" select="p:lookahead3W(34, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | CharCode | WsExplicit |
                                                                                             WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' |
                                                                                             '&' | '(' | ')' | '*' | '+' | '-' | '.' | '/' | '::=' | '<?' |
                                                                                             '<?ENCORE?>' | '<?TOKENS?>' | '?' | '[' | '[^' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] eq 5">                                        <!-- StringLiteral -->
          <xsl:variable name="state" select="p:lookahead2W(38, $input, $state)"/>   <!-- Whitespace | NCName | Context | StringLiteral | CharCode | WsExplicit |
                                                                                         WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' | '&' |
                                                                                         '(' | ')' | '*' | '+' | '-' | '.' | '/' | '<<' | '<?' | '<?ENCORE?>' |
                                                                                         '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 261">                                <!-- StringLiteral Context -->
                <xsl:variable name="state" select="p:lookahead3W(37, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | CharCode | WsExplicit |
                                                                                             WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' |
                                                                                             '&' | '(' | ')' | '*' | '+' | '-' | '.' | '/' | '<<' | '<?' |
                                                                                             '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 12                                           (: WsExplicit :)
                    and $state[$p:lk] != 13                                           (: WsDefinition :)
                    and $state[$p:lk] != 15                                           (: DocComment :)
                    and $state[$p:lk] != 16                                           (: EOF :)
                    and $state[$p:lk] != 17                                           (: EquivalenceLookAhead :)
                    and $state[$p:lk] != 19                                           (: '&amp;' :)
                    and $state[$p:lk] != 21                                           (: ')' :)
                    and $state[$p:lk] != 26                                           (: '/' :)
                    and $state[$p:lk] != 30                                           (: '&lt;?ENCORE?>' :)
                    and $state[$p:lk] != 31                                           (: '&lt;?TOKENS?>' :)
                    and $state[$p:lk] != 40                                           (: '|' :)
                    and $state[$p:lk] != 1731                                         (: NCName '::=' :)
                    and $state[$p:lk] != 1795                                         (: NCName '&lt;&lt;' :)
                    and $state[$p:lk] != 1797                                         (: StringLiteral '&lt;&lt;' :)
                    and $state[$p:lk] != 2115                                         (: NCName '>>' :)
                    and $state[$p:lk] != 2117                                         (: StringLiteral '>>' :)
                    and $state[$p:lk] != 2435                                         (: NCName '\\' :)
                    and $state[$p:lk] != 112771                                       (: NCName '?' '::=' :)
                    and $state[$p:lk] != 114947                                       (: NCName Context '&lt;&lt;' :)
                    and $state[$p:lk] != 114949                                       (: StringLiteral Context '&lt;&lt;' :)
                    and $state[$p:lk] != 135427                                       (: NCName Context '>>' :)
                    and $state[$p:lk] != 135429">                                   <!-- StringLiteral Context '>>' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Item($input, $state)
          "/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 24">                                  <!-- '-' -->
                <xsl:variable name="state" select="p:consume(24, $input, $state)"/> <!-- '-' -->
                <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/> <!-- Whitespace | NCName | StringLiteral | CharCode | '$' | '(' | '.' |
                                                                                             '<?' | '[' | '[^' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-Item($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:parse-SequenceOrDifference-1($input, $state)"/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'SequenceOrDifference', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse Alternative.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Alternative" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-SequenceOrDifference($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- '&' -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- '&' -->
          <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/>   <!-- Whitespace | NCName | StringLiteral | CharCode | '$' | '(' | '.' |
                                                                                         '<?' | '[' | '[^' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Item($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Alternative', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production Alternatives (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Alternatives-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(40, $input, $state)"/>         <!-- '|' -->
        <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral | CharCode | WsExplicit |
                                                                                         WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' | '&' |
                                                                                         '(' | '.' | '<?' | '<?ENCORE?>' | '<?TOKENS?>' | '[' | '[^' | '|' -->
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-Alternative($input, $state)
        "/>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 40">                                     <!-- '|' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-Alternatives-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production Alternatives (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Alternatives-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(26, $input, $state)"/>         <!-- '/' -->
        <xsl:variable name="state" select="p:lookahead1W(29, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral | CharCode | WsExplicit |
                                                                                         WsDefinition | DocComment | EOF | EquivalenceLookAhead | '$' | '&' |
                                                                                         '(' | '.' | '/' | '<?' | '<?ENCORE?>' | '<?TOKENS?>' | '[' | '[^' -->
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-Alternative($input, $state)
        "/>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 26">                                     <!-- '/' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-Alternatives-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse Alternatives.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Alternatives" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-Alternative($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 26                                            (: '/' :)
                     or $state[$p:l1] = 40">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 40">                                  <!-- '|' -->
                <xsl:variable name="state" select="p:parse-Alternatives-1($input, $state)"/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:parse-Alternatives-2($input, $state)"/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Alternatives', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse Production.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Production" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- DocComment -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- DocComment -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>          <!-- Whitespace | NCName -->
    <xsl:variable name="state" select="p:consume(3, $input, $state)"/>              <!-- NCName -->
    <xsl:variable name="state" select="p:lookahead1W(13, $input, $state)"/>         <!-- Whitespace | '::=' | '?' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 34">                                        <!-- '?' -->
          <xsl:variable name="state" select="p:consume(34, $input, $state)"/>       <!-- '?' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>          <!-- Whitespace | '::=' -->
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- '::=' -->
    <xsl:variable name="state" select="p:lookahead1W(31, $input, $state)"/>         <!-- Whitespace | NCName | StringLiteral | CharCode | UrlIntroducer |
                                                                                         WsExplicit | WsDefinition | DocComment | EOF | EquivalenceLookAhead |
                                                                                         '$' | '&' | '(' | '.' | '/' | '<?' | '<?ENCORE?>' | '<?TOKENS?>' |
                                                                                         '[' | '[^' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- UrlIntroducer -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Link($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Alternatives($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(24, $input, $state)"/>         <!-- Whitespace | NCName | StringLiteral | WsExplicit | WsDefinition |
                                                                                         DocComment | EOF | EquivalenceLookAhead | '<?ENCORE?>' |
                                                                                         '<?TOKENS?>' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12                                            (: WsExplicit :)
                     or $state[$p:l1] = 13">                                        <!-- WsDefinition -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Option($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Production', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production ProcessingInstruction (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ProcessingInstruction-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(14, $input, $state)"/>         <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>       <!-- ProcessingInstructionContents | S -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 14">                                     <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-ProcessingInstruction-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse ProcessingInstruction.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ProcessingInstruction" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(29, $input, $state)"/>             <!-- '<?' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- NCName -->
    <xsl:variable name="state" select="p:consume(3, $input, $state)"/>              <!-- NCName -->
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- S | '?>' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- S -->
          <xsl:variable name="state" select="p:parse-ProcessingInstruction-1($input, $state)"/>
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- ProcessingInstructionContents -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- '?>' -->
    <xsl:variable name="state" select="p:consume(35, $input, $state)"/>             <!-- '?>' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ProcessingInstruction', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production Grammar (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Grammar-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/>     <!-- Whitespace | NCName | DocComment | '<?' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 29">                                     <!-- '<?' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ProcessingInstruction($input, $state)
            "/>
            <xsl:sequence select="p:parse-Grammar-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production Grammar (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Grammar-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-Production($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1W(18, $input, $state)"/>     <!-- Whitespace | NCName | DocComment | EOF | '<?ENCORE?>' |
                                                                                         '<?TOKENS?>' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 3                                          (: NCName :)
                      and $state[$p:l1] != 15">                                     <!-- DocComment -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-Grammar-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production Grammar (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Grammar-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(19, $input, $state)"/>     <!-- Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                                                         EquivalenceLookAhead | '<?ENCORE?>' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 16                                          (: EOF :)
                       or $state[$p:l1] = 30">                                      <!-- '<?ENCORE?>' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 3">                                <!-- NCName -->
                  <xsl:variable name="state" select="p:lookahead2W(20, $input, $state)"/> <!-- Whitespace | Context | '::=' | '<<' | '>>' | '?' | '\\' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 15                                    (: DocComment :)
                             or $state[$p:lk] = 1731                                  (: NCName '::=' :)
                             or $state[$p:lk] = 2179">                              <!-- NCName '?' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-Production($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 2435">                              <!-- NCName '\\' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-Delimiter($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 17">                                <!-- EquivalenceLookAhead -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-Equivalence($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-Preference($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-Grammar-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production Grammar (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Grammar-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>     <!-- Whitespace | EOF | '<?' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 29">                                     <!-- '<?' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ProcessingInstruction($input, $state)
            "/>
            <xsl:sequence select="p:parse-Grammar-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse Grammar.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Grammar" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-Grammar-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-Grammar-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 31">                                        <!-- '<?TOKENS?>' -->
          <xsl:variable name="state" select="p:consume(31, $input, $state)"/>       <!-- '<?TOKENS?>' -->
          <xsl:variable name="state" select="p:parse-Grammar-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- '<?ENCORE?>' -->
          <xsl:variable name="state" select="p:consume(30, $input, $state)"/>       <!-- '<?ENCORE?>' -->
          <xsl:variable name="state" select="p:parse-Grammar-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- EOF -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Grammar', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x or $error/@ambiguous-input) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;',
          'while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:attribute name="b" select="$state[$p:b1]"/>
            <xsl:attribute name="e" select="$state[$p:e1]"/>
            <xsl:choose>
              <xsl:when test="$state[$p:l1] lt 0">
                <xsl:attribute name="s" select="- $state[$p:l1]"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="o" select="$state[$p:l1]"/>
                <xsl:attribute name="x" select="$code"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume whitespace.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:whitespace" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="end" select="$state[$p:b1]"/>
    <xsl:choose>
      <xsl:when test="$begin eq $end">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="whitespace">
          <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
        </xsl:variable>
        <xsl:sequence select="
          0,
          $state[$p:b0],
          $end,
          subsequence($state, $p:e0 + 1),
          $whitespace/node()
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Use p:match to fetch the next token, but skip any leading
   ! whitespace.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start.
   ! @param $token-set the valid token set id.
   ! @return a sequence of three values: the token code of the result
   ! token, with input string positions of token begin and end.
  -->
  <xsl:function name="p:matchW">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="match" select="p:match($input, $begin, $token-set)"/>
    <xsl:choose>
      <xsl:when test="$match[1] = 1">                                               <!-- Whitespace -->
        <xsl:sequence select="p:matchW($input, $match[3], $token-set)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$match"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:matchW($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:matchW($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:matchW($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Parse start symbol Grammar from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-Grammar" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false()"/>
    <xsl:variable name="state" select="p:parse-Grammar($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

</xsl:stylesheet>