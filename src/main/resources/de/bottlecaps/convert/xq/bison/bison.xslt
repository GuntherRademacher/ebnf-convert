<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Thu Jan 30, 2025 13:23 (UTC+01) by REx v6.1 which is Copyright (c) 1979-2025 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: -q -tree -a none -xslt -name de/bottlecaps/convert/xq/bison/bison.xslt ../../../../../../../main/java/de/bottlecaps/convert/bison/bison.ebnf -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="de/bottlecaps/convert/xq/bison/bison.xslt">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="14"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    52, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 6, 5, 5, 7, 5, 8, 9, 10, 11, 5, 5, 12, 13, 14, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 18, 19, 20, 21, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 22, 23, 24, 5, 25, 5, 26, 27, 28, 29, 30, 31, 32, 33, 34, 13, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 13, 47, 48, 13, 49, 50, 51, 5, 5
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 90, 122, 154, 186, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
    216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 52, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 6, 5, 5, 7, 5, 8, 9, 10, 11, 5, 5, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 18, 19, 20, 21, 5, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 23, 24, 5, 25, 5, 26, 27, 28, 29, 30, 31, 32, 33, 34,
    13, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 13, 47, 48, 13, 49, 50, 51, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 5, 5
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 6671, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3392, 3404, 3428, 3428, 3411, 3439, 3458, 3469, 3477, 3492, 3491, 3492, 3483, 3501,
    3962, 3513, 3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3392, 3404,
    3428, 3428, 3411, 3439, 3458, 5288, 3547, 3492, 3491, 3492, 3483, 3561, 3962, 3513, 3492, 3492, 3573, 3492, 5071, 3537, 3492, 3492, 4498, 3492, 4303, 3492,
    3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3428, 3396, 3428, 3428, 3431, 3587, 3492, 3515, 3601, 3492, 3491, 3492, 3602, 3492, 3962, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3392, 3404, 3428, 3428,
    3411, 3439, 3458, 4924, 3610, 3492, 3491, 3492, 3483, 3501, 3962, 3513, 3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492, 4498, 3492, 4330, 3492, 3492, 3492,
    3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4716, 5654, 3492, 3492, 3461, 3624, 3458, 3644, 4748, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492,
    3523, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3416, 3724, 3632, 3638, 3652, 3670,
    3446, 3644, 4748, 3492, 3492, 3492, 3593, 3501, 3492, 3688, 3492, 3492, 3698, 3492, 5051, 3795, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 4716, 5654, 4655, 3716, 3720, 3624, 3732, 3644, 4748, 3492, 3492, 3492, 4754, 3501, 3492, 3513, 3492, 3492, 3740, 3492,
    4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4716, 4734, 3764, 3758, 3768, 3776, 3784, 3644,
    4748, 3492, 3492, 3492, 5747, 3501, 3492, 3794, 3492, 3492, 3523, 3492, 4046, 3514, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 4716, 5654, 3492, 3492, 3461, 3624, 3458, 3804, 4748, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 3523, 3492, 4046, 3537,
    3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4716, 5654, 3492, 3492, 3461, 3624, 3458, 3644, 4748, 3492,
    3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492, 3817, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 4716, 5654, 3492, 3492, 4002, 3831, 3839, 3851, 3877, 3492, 3492, 3492, 3553, 3895, 3492, 3907, 3492, 3492, 3917, 3492, 5185, 3935, 3492, 3492,
    4014, 3492, 5693, 3492, 3492, 3492, 4242, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4716, 5654, 3492, 3492, 3461, 3945, 3458, 4029, 4093, 3492, 3492, 3492,
    5747, 3953, 3492, 3513, 3492, 3961, 3523, 3492, 4046, 3537, 3823, 3492, 3899, 3492, 4535, 4962, 5321, 3923, 3972, 3970, 4553, 3980, 3990, 3492, 3999, 4375,
    3492, 3492, 3492, 3492, 5373, 3492, 3492, 5571, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    4010, 4022, 4059, 4054, 4063, 4071, 3458, 4079, 4093, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 4087, 3492, 4046, 3537, 3492, 3492, 3899, 3492,
    4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4107, 4122, 4119, 4119, 4111, 4130, 4138, 3644, 4149, 3492, 4163, 3492, 3579, 4172,
    3492, 4184, 3492, 3492, 4194, 3492, 4046, 4212, 3492, 3492, 4176, 3492, 4977, 3492, 3492, 3492, 3982, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4228, 5654,
    3492, 3492, 4222, 3945, 3458, 4029, 4093, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492,
    3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 5489, 4811, 3492, 4240, 3461, 3624, 3458, 3644, 4748, 3492, 3492, 3492, 5747, 3501, 3492, 3513,
    3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 5262, 5654, 5769, 4250,
    4254, 3624, 3458, 3644, 4748, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492,
    3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4767, 5794, 4262, 4268, 4274, 4288, 3458, 3644, 4748, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492,
    3523, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4716, 4296, 3492, 3492, 3461, 3624,
    3458, 3644, 4748, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 4716, 3505, 3492, 3492, 3461, 4288, 4311, 3644, 5635, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 3523, 3492,
    4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4716, 5654, 3492, 3492, 3461, 3624, 4323, 3644,
    4748, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 4716, 4720, 3493, 4338, 3461, 3624, 3458, 3644, 4748, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 3523, 3492, 4046, 3537,
    3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4716, 5654, 3492, 3492, 4141, 4348, 4356, 3644, 4748, 3492,
    3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 4369, 3492, 4998, 4387, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 4716, 5654, 3492, 3492, 3461, 3624, 3458, 3644, 4397, 3492, 3492, 3492, 3529, 3501, 3492, 3513, 3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492,
    4379, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4411, 4071, 3458, 4079, 4093, 3492, 3492, 3492,
    5747, 3501, 3492, 3513, 3492, 3492, 4087, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3923, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    4010, 4022, 4059, 4054, 4063, 4071, 3458, 4079, 4093, 3492, 3492, 3811, 4036, 3501, 3658, 3513, 3492, 3492, 4087, 4425, 4046, 3537, 4438, 4791, 3899, 3492,
    4535, 3492, 3492, 3492, 3972, 4155, 3492, 3869, 3492, 5089, 3492, 5445, 4446, 4861, 3492, 3492, 4460, 3492, 3492, 4987, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 3458, 4079, 4093, 3492, 3492, 3492, 5747, 3501,
    3492, 4469, 3492, 3492, 4087, 3492, 4046, 3537, 3492, 3492, 4477, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    5467, 4495, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022,
    4059, 4054, 4063, 4071, 4506, 4079, 4093, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3786, 3492, 4514, 3937, 4046, 4528, 3492, 3492, 4543, 3492, 4535, 4561,
    3492, 3492, 3972, 3492, 3492, 4200, 3492, 3492, 3680, 3492, 3492, 4572, 3492, 5517, 3492, 5758, 3492, 4582, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 4594, 4079, 4093, 3492, 3492, 3492, 5747, 4602, 3492, 3513,
    3492, 3492, 4087, 3746, 4046, 3537, 3492, 4615, 3899, 3492, 4535, 3492, 3492, 3492, 3708, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054,
    4063, 4071, 4626, 4079, 4093, 4634, 4644, 3858, 4663, 3501, 4678, 4688, 3492, 5110, 4703, 3492, 4884, 4711, 5048, 4728, 4742, 4762, 4535, 4483, 5015, 5629,
    5349, 4775, 3492, 4574, 3492, 4784, 4819, 4829, 3492, 5456, 3492, 4837, 4847, 4806, 4452, 3492, 4859, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 4869, 4079, 4093, 3492, 3492, 3492, 5747, 4877, 3492, 4892, 4564, 3492,
    4087, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 5686, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 5361, 4900, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071,
    4910, 4079, 4093, 3492, 3492, 3492, 5747, 3501, 4043, 3513, 3492, 3492, 4087, 3492, 4046, 4918, 5222, 3492, 3899, 3492, 4535, 5806, 3492, 3492, 3972, 3492,
    3492, 3492, 4636, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 3458, 4079, 4093, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 4087, 3492,
    4932, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 4940, 4079,
    4093, 3450, 3991, 3448, 5747, 3501, 4953, 4948, 3704, 3492, 4087, 3492, 4046, 3537, 4961, 3492, 3899, 3492, 4535, 3492, 4970, 4851, 3972, 5156, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 4417, 3492, 3492, 4985, 4995, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 3458, 4079, 4093, 3492, 3492, 4164, 5747, 3501, 4232, 3513, 3492, 3909, 4087, 3492, 4046, 3537,
    3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 5006, 4079, 4093, 3492,
    3492, 5014, 5747, 3501, 3492, 3513, 5023, 3492, 4087, 3492, 4046, 3537, 3492, 5033, 3899, 3492, 4535, 3492, 3492, 3492, 5041, 3492, 3492, 3492, 5395, 3492,
    3492, 3492, 3492, 5059, 3492, 3492, 5068, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 5079, 4079, 4093, 3492, 5423, 3492, 5747, 3501, 3492, 3513, 4461, 3492, 4087, 3492, 4046, 3537, 3492, 3492,
    3899, 4549, 4535, 3492, 3492, 5097, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 5663, 5107, 3492, 3492, 5118, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 5129, 4079, 4093, 3796, 3492, 5137,
    5747, 5147, 3492, 3513, 4315, 5155, 4087, 4776, 4046, 3537, 3492, 3492, 3899, 3492, 5164, 5735, 3492, 5099, 3972, 3492, 5172, 3492, 3492, 3492, 4680, 4821,
    4801, 3492, 3492, 3492, 3492, 5182, 5614, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    4010, 4022, 4059, 4054, 4063, 4071, 5193, 4079, 4520, 5310, 3492, 3865, 5201, 3501, 3492, 3513, 3492, 3492, 4087, 3492, 4204, 3537, 5219, 3492, 3899, 3492,
    4535, 3492, 3492, 5060, 3972, 3492, 3492, 5384, 3492, 5230, 3492, 3492, 5476, 3492, 3492, 3492, 5528, 3492, 5540, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 5238, 4079, 4093, 3492, 5246, 3492, 5747, 3501,
    4618, 5257, 3492, 3492, 4087, 3492, 4046, 3537, 3492, 3883, 3899, 3492, 4535, 3492, 5270, 3492, 3972, 5732, 5282, 3492, 3492, 3887, 3492, 3492, 4839, 3492,
    3492, 3492, 3492, 4902, 3492, 5211, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022,
    4059, 4054, 4063, 4071, 3458, 4079, 4093, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3662, 4087, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492,
    3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 5296, 4079, 4093, 4361, 3420, 4359, 5747, 3501, 3492, 5304,
    5318, 4695, 4087, 5121, 5329, 3537, 3492, 3492, 3899, 5337, 4535, 4340, 3492, 3492, 3972, 3492, 4389, 3539, 4280, 5346, 5338, 3492, 5357, 5369, 4403, 4796,
    3492, 5807, 5381, 5589, 5392, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054,
    4063, 4071, 5403, 4079, 4093, 3492, 3492, 3492, 5747, 5411, 3492, 5434, 3492, 3492, 4087, 3492, 4046, 3537, 3492, 3750, 3899, 5086, 4535, 3492, 3492, 3492,
    4099, 3492, 3492, 5442, 5453, 3492, 3492, 5464, 5475, 3492, 5484, 3492, 3492, 5580, 5559, 3492, 5497, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 5506, 4079, 4093, 5417, 3492, 3616, 5747, 3501, 3492, 3513, 3492, 5514,
    4087, 5525, 4046, 5536, 4586, 3492, 3899, 5249, 4535, 3492, 4487, 3492, 4186, 3492, 5548, 5556, 3492, 3492, 5567, 3492, 3492, 3492, 3492, 5579, 5498, 3492,
    3492, 5588, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071,
    5597, 4079, 4093, 3492, 3492, 3843, 5747, 3501, 3492, 3513, 3492, 3492, 4087, 3492, 4046, 5605, 3492, 4214, 3927, 3492, 4535, 3492, 5208, 5613, 5622, 3492,
    3492, 3492, 3492, 3492, 5274, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 5643, 4079, 4093, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 4087, 3492,
    4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 5651, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 3458, 4079,
    4093, 3492, 5783, 3492, 5747, 3501, 3492, 3513, 5426, 3492, 4087, 3492, 4046, 3537, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 5025, 5662, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 4010, 4022, 4059, 4054, 4063, 4071, 5671, 4079, 4093, 3690, 3492, 3492, 5679, 3501, 3492, 3513, 3492, 3492, 4087, 3492, 4046, 3537,
    3492, 3492, 3899, 3492, 4535, 5701, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4716, 5717, 5139, 5712, 3461, 5725, 5743, 3644, 4748, 3492,
    3514, 3492, 5747, 3501, 3981, 3492, 3492, 3492, 3523, 3492, 4046, 3795, 3492, 3492, 3899, 3492, 4670, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 4716, 5654, 3565, 5755, 3461, 3624, 3458, 3644, 4748, 3492, 3492, 3492, 5747, 3501, 3492, 3513, 3492, 3492, 3523, 3492, 4046, 3537, 3492, 3492,
    3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 4716, 5704, 3492, 3492, 3461, 5725, 3677, 3644, 4748, 3492, 3492, 3492,
    5747, 3501, 3492, 5766, 3492, 3492, 5777, 3492, 4046, 3795, 3492, 3492, 3899, 3492, 4535, 3492, 3492, 3492, 3972, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    4650, 3492, 4430, 5791, 3492, 5802, 3492, 4607, 3492, 3492, 3492, 3492, 5174, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
    3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 1061, 1061, 1061, 1066, 1061, 1061, 1061, 1061, 1061, 0, 0, 1061, 1061, 1061, 1061,
    1061, 1061, 4655, 6704, 1061, 1061, 1061, 1061, 1061, 38, 0, 0, 43, 0, 0, 0, 0, 127, 0, 129, 0, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 0, 0, 0, 0,
    1066, 43, 43, 45, 64, 4655, 6704, 50, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 49, 50, 6704, 0, 0, 0, 0, 0, 38, 0, 0, 0, 38, 59, 60, 61, 62, 45, 64, 104, 0, 49, 50,
    69, 70, 0, 0, 0, 100, 0, 59, 61, 104, 120, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 106, 107, 69, 0, 0, 0, 0, 0, 31744, 6704, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 64, 0,
    100, 147, 148, 149, 106, 0, 0, 0, 100, 0, 59, 61, 5120, 169, 122, 0, 0, 0, 0, 0, 0, 0, 23040, 104, 0, 0, 0, 69, 6704, 0, 0, 0, 100, 0, 102, 103, 0, 0, 106,
    151, 69, 0, 0, 0, 0, 0, 32768, 32768, 32768, 0, 100, 147, 148, 199, 106, 0, 0, 0, 100, 0, 1024, 1067, 0, 0, 1061, 0, 0, 0, 64, 0, 0, 0, 100, 147, 59, 61, 0,
    104, 0, 0, 0, 0, 0, 0, 0, 104, 104, 0, 0, 0, 69, 70, 0, 0, 0, 113, 0, 0, 0, 116, 0, 43, 43, 43, 45, 0, 4655, 6704, 0, 38, 38, 0, 0, 0, 38, 38, 0, 38, 0, 38,
    0, 38, 59, 60, 61, 62, 45, 0, 38, 38, 38, 38, 0, 1536, 0, 0, 0, 162, 0, 0, 0, 0, 191, 0, 0, 0, 0, 43, 43, 43, 45, 0, 4655, 49, 50, 0, 0, 0, 0, 0, 0, 18944,
    0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 118, 0, 0, 100, 196, 148, 149, 106, 0, 0, 0, 181, 0, 0, 0, 0, 271, 0, 215, 0, 55, 55, 56, 56, 56, 56, 56, 56, 0, 38, 0, 0,
    0, 4655, 49, 38, 49, 50, 6704, 0, 0, 8192, 8192, 8192, 0, 146, 147, 148, 149, 106, 0, 0, 0, 202, 0, 0, 0, 0, 235, 0, 0, 0, 45, 45, 0, 0, 0, 0, 45, 45, 45,
    45, 45, 45, 45, 45, 0, 38, 0, 0, 0, 43, 43, 43, 3584, 0, 4655, 50, 49, 6704, 0, 0, 0, 0, 0, 0, 184, 0, 0, 169, 0, 0, 0, 0, 0, 0, 0, 119, 101, 38, 59, 60,
    61, 62, 45, 0, 0, 133, 136, 0, 139, 0, 0, 0, 2048, 147, 148, 0, 0, 0, 225, 0, 0, 228, 0, 0, 43, 43, 61, 45, 0, 4655, 6704, 49, 50, 69, 71, 0, 0, 0, 0, 138,
    140, 0, 0, 0, 38, 102, 60, 103, 62, 45, 0, 0, 134, 0, 0, 0, 141, 0, 0, 135, 137, 0, 0, 0, 0, 293, 0, 0, 0, 0, 106, 49, 50, 108, 70, 0, 0, 0, 233, 0, 0, 0,
    0, 307, 0, 0, 0, 148, 150, 107, 108, 0, 0, 0, 0, 147, 148, 0, 0, 166, 122, 0, 0, 0, 0, 0, 0, 193, 0, 0, 100, 147, 198, 149, 150, 0, 0, 0, 262, 0, 0, 0, 0,
    147, 148, 0, 241, 169, 215, 0, 0, 0, 0, 0, 0, 205, 0, 3113, 43, 43, 43, 45, 0, 4655, 6704, 0, 106, 107, 69, 0, 0, 0, 156, 186, 0, 0, 0, 0, 0, 0, 0, 120, 0,
    275, 0, 0, 0, 0, 0, 0, 215, 0, 289, 0, 0, 0, 0, 0, 0, 0, 122, 0, 296, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 311, 0, 0, 0, 0, 0, 38, 59, 0, 0, 0, 3113, 43, 0, 0,
    0, 0, 147, 198, 0, 0, 0, 0, 3113, 3113, 0, 4655, 6704, 3113, 38, 59, 60, 61, 62, 45, 0, 0, 145, 100, 0, 59, 61, 0, 0, 161, 0, 0, 0, 0, 0, 166, 167, 168,
    3113, 3113, 0, 0, 0, 3113, 3113, 3113, 3113, 3113, 3113, 3113, 3113, 0, 38, 0, 0, 3113, 43, 43, 43, 45, 65, 4655, 6704, 3113, 38, 59, 60, 61, 62, 45, 65, 0,
    100, 147, 148, 149, 106, 65, 0, 49, 50, 69, 70, 0, 0, 0, 270, 0, 0, 215, 0, 39, 39, 39, 44, 39, 39, 39, 39, 0, 38, 60, 0, 39, 39, 39, 39, 39, 39, 39, 39,
    4655, 51, 39, 0, 43, 43, 62, 45, 66, 4655, 51, 49, 50, 70, 0, 0, 0, 0, 0, 58, 0, 0, 105, 107, 49, 50, 69, 70, 0, 0, 0, 277, 278, 279, 280, 0, 121, 0, 0, 0,
    0, 0, 0, 0, 142, 149, 106, 107, 6704, 0, 0, 0, 0, 147, 199, 0, 0, 167, 170, 0, 0, 0, 0, 0, 0, 215, 13073, 0, 100, 147, 148, 149, 151, 0, 0, 0, 292, 0, 0, 0,
    0, 210, 166, 167, 168, 169, 216, 0, 0, 0, 0, 0, 0, 237, 0, 0, 2600, 2600, 0, 0, 38, 0, 2600, 0, 43, 0, 0, 0, 0, 163, 0, 0, 0, 28672, 28672, 0, 0, 0, 0, 0,
    0, 247, 0, 29184, 29184, 29184, 29184, 29184, 29184, 29184, 29184, 0, 38, 0, 0, 29696, 29696, 29748, 0, 0, 0, 29696, 29696, 0, 0, 0, 0, 29696, 29696, 29696,
    29748, 0, 38, 0, 0, 0, 298, 299, 0, 0, 302, 0, 43, 43, 43, 45, 0, 0, 6704, 0, 31232, 0, 0, 0, 4655, 6704, 0, 0, 166, 0, 0, 0, 215, 122, 49, 50, 6704, 30720,
    0, 0, 0, 0, 182, 0, 0, 0, 49, 50, 6704, 0, 0, 0, 81, 0, 0, 166, 0, 0, 0, 215, 216, 0, 46, 0, 0, 0, 0, 0, 0, 250, 0, 0, 43, 43, 43, 63, 0, 4655, 6704, 67,
    68, 6704, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 100, 197, 148, 149, 106, 0, 0, 0, 319, 0, 0, 0, 0, 147, 148, 5120, 0, 214, 122, 0, 0, 0, 0, 0, 0, 287, 0, 5120,
    0, 49, 50, 69, 70, 0, 0, 0, 337, 0, 0, 340, 10752, 3129, 3113, 3129, 3113, 0, 38, 0, 0, 0, 343, 0, 0, 345, 346, 200, 0, 0, 0, 203, 0, 0, 0, 0, 7680, 7680,
    7680, 7680, 200, 0, 0, 0, 0, 0, 0, 229, 0, 0, 324, 0, 0, 326, 0, 0, 0, 12288, 0, 0, 362, 0, 347, 0, 0, 0, 0, 0, 0, 0, 185, 0, 122, 0, 0, 0, 0, 0, 176, 0,
    240, 0, 0, 147, 148, 0, 0, 0, 16896, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 342, 0, 0, 0, 0, 0, 148, 0, 0, 49, 50, 6704, 0, 72, 72, 72, 72, 195, 100, 147, 148,
    149, 106, 65, 0, 49, 50, 69, 70, 0, 109, 169, 122, 0, 0, 0, 0, 22221, 0, 0, 166, 0, 168, 169, 215, 216, 0, 0, 28160, 0, 147, 148, 0, 0, 0, 19968, 0, 0, 0,
    0, 285, 0, 0, 0, 11264, 0, 248, 0, 0, 0, 0, 0, 155, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 295, 0, 0, 17920, 0, 365, 0, 0, 0, 0, 226, 0, 0, 0, 49, 50, 6704, 0, 73,
    73, 82, 86, 0, 106, 107, 69, 152, 0, 0, 0, 0, 69632, 69632, 0, 0, 0, 202, 232, 0, 0, 0, 0, 0, 164, 0, 0, 49, 50, 6704, 0, 0, 0, 83, 87, 110, 111, 0, 0, 0,
    0, 0, 0, 301, 0, 0, 110, 0, 126, 0, 128, 0, 0, 0, 69632, 7680, 0, 0, 0, 53, 54, 54, 55, 55, 0, 144, 0, 100, 0, 59, 61, 0, 0, 166, 122, 168, 169, 215, 216,
    158, 159, 0, 0, 0, 0, 0, 0, 314, 0, 0, 122, 0, 0, 0, 0, 175, 0, 0, 189, 190, 0, 0, 0, 194, 0, 100, 147, 148, 149, 106, 65, 8704, 169, 122, 217, 0, 219, 0,
    0, 0, 43, 0, 0, 0, 0, 46, 4655, 6704, 0, 230, 0, 0, 0, 0, 236, 0, 0, 45, 0, 0, 4655, 50, 45, 239, 0, 0, 0, 147, 148, 0, 0, 49, 50, 69, 70, 0, 0, 0, 146, 0,
    59, 61, 0, 0, 243, 0, 0, 245, 0, 0, 0, 43, 0, 0, 0, 29696, 10002, 0, 0, 0, 0, 0, 0, 0, 206, 0, 0, 305, 306, 0, 0, 23552, 0, 0, 203, 0, 234, 0, 0, 0, 0,
    14336, 0, 0, 0, 0, 24576, 0, 0, 0, 0, 26112, 0, 0, 0, 0, 28672, 4655, 6704, 0, 0, 27648, 0, 0, 0, 0, 0, 0, 321, 0, 316, 317, 0, 0, 15360, 0, 0, 322, 0,
    22528, 0, 0, 0, 0, 0, 0, 327, 0, 0, 348, 0, 350, 0, 0, 0, 0, 263, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0, 334, 0, 49, 50, 6704, 0, 0, 0, 0, 88, 0, 106, 107, 69,
    0, 153, 155, 0, 0, 209, 26624, 0, 166, 167, 168, 0, 122, 0, 0, 0, 0, 0, 177, 0, 335, 0, 0, 0, 0, 0, 0, 355, 0, 49, 50, 6704, 0, 0, 0, 0, 89, 169, 122, 0, 0,
    0, 220, 0, 0, 59, 60, 61, 62, 0, 64, 207, 0, 0, 0, 0, 166, 167, 168, 49, 50, 6704, 0, 0, 0, 0, 90, 0, 122, 0, 0, 0, 0, 160, 0, 0, 0, 0, 165, 0, 222, 0, 0,
    0, 0, 0, 0, 0, 251, 0, 253, 0, 0, 0, 0, 258, 0, 0, 212, 0, 168, 169, 215, 216, 357, 358, 0, 0, 0, 0, 0, 0, 368, 0, 0, 0, 364, 0, 0, 0, 0, 0, 166, 167, 213,
    49, 50, 6704, 0, 74, 74, 74, 91, 131, 0, 0, 0, 0, 0, 0, 0, 259, 0, 179, 0, 0, 0, 0, 0, 0, 13824, 0, 0, 231, 0, 0, 0, 0, 0, 238, 267, 0, 0, 0, 0, 0, 215, 0,
    0, 224, 0, 0, 0, 0, 0, 166, 167, 122, 329, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 349, 0, 0, 0, 0, 0, 166, 212, 168, 49, 50, 6704, 0, 0, 0, 84, 0, 0, 244, 0, 0, 0,
    0, 0, 308, 0, 0, 0, 20992, 0, 0, 0, 0, 0, 0, 25865, 0, 0, 0, 336, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 21504, 0, 0, 0, 0, 0, 204, 0, 0, 49, 50, 6704, 0, 75, 75,
    75, 92, 0, 132, 0, 0, 0, 0, 0, 0, 32256, 32256, 0, 106, 107, 69, 0, 0, 0, 157, 187, 0, 0, 0, 0, 0, 0, 0, 281, 25600, 27136, 166, 0, 168, 169, 215, 216, 0,
    283, 0, 0, 0, 0, 0, 0, 69632, 0, 0, 354, 0, 0, 0, 0, 0, 0, 211, 167, 168, 49, 50, 6704, 0, 0, 0, 0, 93, 143, 0, 0, 100, 0, 59, 61, 0, 0, 254, 0, 0, 0, 0, 0,
    367, 0, 0, 0, 223, 0, 0, 0, 0, 0, 0, 227, 0, 0, 303, 0, 0, 0, 0, 0, 0, 309, 49, 50, 6704, 0, 76, 76, 85, 94, 0, 123, 0, 0, 0, 0, 0, 0, 246, 24064, 25088, 0,
    122, 0, 172, 173, 0, 0, 0, 43, 0, 0, 29184, 0, 252, 0, 0, 255, 0, 0, 0, 0, 313, 0, 0, 0, 282, 0, 0, 0, 0, 286, 0, 0, 59, 1024, 61, 1067, 0, 64, 49, 50,
    6704, 0, 77, 77, 77, 95, 0, 122, 171, 0, 0, 174, 0, 0, 112, 0, 0, 0, 117, 0, 178, 0, 180, 0, 0, 0, 0, 0, 257, 0, 0, 0, 208, 0, 0, 0, 166, 167, 168, 242, 0,
    0, 0, 0, 0, 0, 0, 315, 0, 304, 0, 0, 0, 0, 0, 0, 272, 215, 0, 0, 323, 0, 325, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 13312, 331, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0,
    359, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 19456, 0, 0, 0, 0, 0, 300, 0, 0, 49, 50, 6704, 0, 78, 78, 78, 96, 0, 106, 107, 69, 0, 154, 0, 0, 113, 0, 0, 116, 0, 0,
    124, 0, 0, 0, 0, 0, 183, 0, 0, 0, 122, 0, 0, 0, 0, 0, 154, 0, 290, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 10240, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 318, 0, 0, 0,
    0, 0, 339, 0, 0, 18432, 0, 0, 0, 0, 0, 0, 0, 328, 7168, 0, 0, 0, 338, 0, 0, 0, 43, 0, 28672, 0, 0, 370, 0, 0, 0, 0, 0, 0, 0, 353, 49, 50, 6704, 0, 79, 79,
    79, 97, 0, 188, 0, 0, 0, 0, 0, 0, 344, 0, 0, 0, 201, 15872, 0, 0, 0, 0, 0, 352, 0, 0, 169, 122, 0, 218, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 284, 20480, 0, 0, 0,
    288, 0, 0, 291, 0, 0, 0, 0, 0, 361, 0, 0, 310, 0, 0, 312, 0, 0, 0, 0, 366, 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0, 356, 363, 0, 0, 0, 0, 0, 0, 0, 369, 49, 50,
    6704, 0, 80, 80, 80, 80, 169, 122, 0, 0, 0, 0, 0, 221, 260, 0, 0, 0, 0, 0, 0, 0, 14848, 0, 268, 0, 0, 0, 0, 215, 0, 0, 261, 0, 0, 264, 0, 0, 49, 50, 69, 70,
    30208, 0, 49, 50, 6704, 0, 0, 0, 0, 98, 0, 0, 297, 0, 0, 0, 0, 0, 4655, 6704, 0, 17408, 0, 0, 0, 0, 0, 0, 0, 16384, 49, 50, 6704, 0, 0, 0, 0, 99, 118, 0, 0,
    100, 0, 59, 61, 0, 0, 269, 0, 0, 0, 215, 0, 0, 211, 0, 168, 169, 247, 216, 0, 11776, 0, 0, 0, 0, 0, 0, 4655, 33280, 0, 32256, 32256, 0, 0, 32256, 32256, 0,
    0, 32256, 0, 4655, 32256, 0, 0, 43, 43, 43, 45, 0, 4655, 0, 0, 276, 0, 0, 0, 0, 0, 249, 0, 0, 49, 50, 0, 0, 0, 0, 0, 100, 0, 59, 61, 0, 32768, 32768, 0, 0,
    0, 0, 0, 0, 9216, 0, 0, 0, 6144, 0, 0, 0, 0, 0, 0, 29184, 29184, 29184, 0, 5632, 147, 148, 149, 106, 0, 0, 125, 0, 0, 0, 125, 0, 7680, 7680, 0, 0, 0, 0, 0,
    0, 29696, 6704, 0, 0, 69632, 69632, 69632, 0, 0, 0, 0, 7168, 0, 0, 0, 0
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    18, 34, 50, 80, 64, 96, 112, 128, 144, 160, 176, 192, 206, 206, 206, 206, 206, 206, 222, 231, 284, 246, 250, 254, 256, 260, 264, 234, 268, 227, 272, 277,
    281, 225, 326, 273, 331, 459, 288, 346, 303, 457, 494, 322, 325, 330, 459, 239, 335, 344, 446, 350, 438, 459, 353, 359, 375, 459, 459, 241, 335, 455, 445,
    391, 459, 457, 537, 459, 413, 390, 458, 457, 537, 339, 446, 392, 438, 537, 340, 447, 541, 355, 540, 459, 240, 242, 453, 385, 390, 458, 438, 459, 539, 526,
    386, 391, 458, 476, 398, 396, 475, 399, 438, 378, 397, 403, 459, 459, 459, 459, 381, 406, 410, 417, 421, 424, 427, 429, 459, 459, 459, 291, 294, 459, 459,
    459, 433, 306, 362, 314, 459, 506, 442, 337, 459, 459, 467, 308, 312, 459, 316, 459, 318, 473, 451, 459, 459, 370, 515, 310, 459, 459, 465, 459, 460, 471,
    365, 337, 459, 513, 517, 540, 459, 435, 459, 459, 480, 485, 367, 371, 493, 459, 460, 481, 487, 369, 491, 459, 459, 498, 487, 369, 237, 459, 461, 299, 510,
    238, 459, 298, 510, 238, 297, 502, 460, 500, 504, 524, 521, 530, 531, 535, 459, 459, 459, 437, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
    459, 459, 459, 459, 6, 18, 34, 130, 130, 64, 512, 256, 4096, 16386, 2, 2, 2, 4, 2, 16, 2048, 0, 0, 0, 2048, 2048, 2048, 2048, 514, 256, 4096, 102, 98, 102,
    102, 1074987106, 1075036258, 1075036258, 1131661414, 1131661926, -6315006, -6315002, -6315006, -6314970, -6314910, -6314906, -6314898, -6314890, -6314882,
    -6314906, 32, 130, 128, 130, 4096, 4096, 4096, 0, 65536, 1074987008, 1075019776, 1131644928, -6315008, 40, 4, 2, 2, 6, 98, 34, 2048, 3276800, 54525952, 0,
    0, 201326592, 1792084, 1793109, 8387582, 0, 2, 32, 512, 0, 32768, 134217728, 268435456, -536862720, 0, 84, 6144, 16384, 65536, 131072, 524288, 1048576, 0,
    0, 1, 7168, 0, 0, 2, 60, 8, 2, 130, 512, 512, 512, 4096, 4096, 65536, 1179648, 1073741824, 0, 0, 2048, 2048, 2097152, 4194304, 0, 0, 0, 33554432, 8388608,
    50331648, 0, 0, 1974272, 58720256, 67108864, 536870912, -1073741824, 8192, 0, 1024, 8, 512, 512, 131072, 512, 512, 512, 65536, 655360, 1048576, 0, 8192,
    32768, 393216, 2097152, 0, 0, 4, 16, 2048, 131072, 1048576, 1073741824, 0, 131072, 0, 8388608, 16777216, 33554432, 1073741824, 8192, 786432, 8388608,
    67108864, 134217728, 134217728, 268435456, 536870912, -2147483648, 8192, 0, 134217728, 268435456, 0, 0, 8388608, 67108864, 268435456, 268435456, 0, 0,
    268435456, 0, 1073741824, 8388608, 570425344, 1073741824, 0, 33554432, 524288, 8388608, 67108864, 33554432, 234881024, 1792084, 1792084, -2128914348,
    -1021617067, -1021617067, -1013228459, 25164798, 25164798, 1098906622, 58719230, 58719230, 58719230, 260045822, 0, 0, 67108864, 0, 0, 1, 0, 0, 0, 8192,
    6912, 24576, 98304, 917504, 8388608, 67108864, 134217728, 268435456, -2147483648, 32768, 393216, 2097152, 4194304, 50331648, 0, 0, 8192, 0, 0, 0, 0, 2, 8,
    1, 3072, 0, 0, 20, 64, 12, 48, 128, 768, 0, 8192, 0, 131072, 1048576, 2, 8, 32, 128, 512, 256, 512, 0, 8192, 32768, 262144, 16, 2048, 4096, 0, 0, 0, 1024,
    2, 8, 32, 512, 0, 262144, 0, 4, 0, 0, 126, 128, 262144, 0, 0, 4, 16, 64, 2048, 4096, 16384, 65536, 131072, 32, 4, 0, 32, 4, 0, 0, 2048, 50331648, 4, 32, 32,
    32, 32, 32, 32, 0, 0, 131072, 1048576, 0, 0, 0, 8
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '%ERROR',
    'WHITESPACE',
    'STRING',
    'TSTRING',
    'INT_LITERAL',
    'ID',
    'CHAR_LITERAL',
    'EPILOGUE',
    'ANGLELESS_CODE',
    'BRACKETED_ID',
    'PROLOGUE',
    'BRACED_PREDICATE',
    'BRACELESS_CODE',
    'PERCENT_FLAG',
    'EOF',
    &quot;'%%'&quot;,
    &quot;'%code'&quot;,
    &quot;'%default-prec'&quot;,
    &quot;'%define'&quot;,
    &quot;'%defines'&quot;,
    &quot;'%destructor'&quot;,
    &quot;'%dprec'&quot;,
    &quot;'%empty'&quot;,
    &quot;'%error-verbose'&quot;,
    &quot;'%expect'&quot;,
    &quot;'%expect-rr'&quot;,
    &quot;'%file-prefix'&quot;,
    &quot;'%glr-parser'&quot;,
    &quot;'%initial-action'&quot;,
    &quot;'%language'&quot;,
    &quot;'%left'&quot;,
    &quot;'%lex-param'&quot;,
    &quot;'%merge'&quot;,
    &quot;'%name-prefix'&quot;,
    &quot;'%no-default-prec'&quot;,
    &quot;'%no-lines'&quot;,
    &quot;'%nonassoc'&quot;,
    &quot;'%nondeterministic-parser'&quot;,
    &quot;'%nterm'&quot;,
    &quot;'%output'&quot;,
    &quot;'%param'&quot;,
    &quot;'%parse-param'&quot;,
    &quot;'%prec'&quot;,
    &quot;'%precedence'&quot;,
    &quot;'%printer'&quot;,
    &quot;'%require'&quot;,
    &quot;'%right'&quot;,
    &quot;'%skeleton'&quot;,
    &quot;'%start'&quot;,
    &quot;'%token'&quot;,
    &quot;'%token-table'&quot;,
    &quot;'%type'&quot;,
    &quot;'%union'&quot;,
    &quot;'%verbose'&quot;,
    &quot;'%yacc'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'&lt;'&quot;,
    &quot;'&lt;*&gt;'&quot;,
    &quot;'&lt;&gt;'&quot;,
    &quot;'='&quot;,
    &quot;'&gt;'&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 512, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 512"/>
        <xsl:variable name="end" select="$end - $result idiv 128"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 128 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 32"/>
              <xsl:variable name="c2" select="$c1 idiv 32"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 32 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="512 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 511) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 2">
        <xsl:variable name="i0" select=". * 371 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:variable name="i2" select="$i1 idiv 16"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 mod 16 + $p:EXPECTED[$i2 + 1] + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse epilogue.opt.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-epilogue.opt" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- '%%' -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- '%%' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- WHITESPACE | EPILOGUE -->
          <xsl:variable name="state" select="p:consume(7, $input, $state)"/>        <!-- EPILOGUE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'epilogue.opt', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse tag.opt.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-tag.opt" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 57">                                        <!-- '<' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-TAG($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'tag.opt', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production rhs (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rhs-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>     <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | BRACED_PREDICATE | EOF |
                                                                                         '%%' | '%code' | '%default-prec' | '%destructor' | '%dprec' |
                                                                                         '%empty' | '%expect' | '%expect-rr' | '%left' | '%merge' |
                                                                                         '%no-default-prec' | '%nonassoc' | '%nterm' | '%prec' | '%precedence' |
                                                                                         '%printer' | '%right' | '%start' | '%token' | '%type' | '%union' |
                                                                                         ';' | '<' | '{' | '|' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (5,                                       (: ID :)
                                             6)">                                   <!-- CHAR_LITERAL -->
              <xsl:variable name="state" select="p:lookahead2W(25, $input, $state)"/> <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | BRACKETED_ID |
                                                                                           BRACED_PREDICATE | EOF | '%%' | '%code' | '%default-prec' |
                                                                                           '%destructor' | '%dprec' | '%empty' | '%expect' | '%expect-rr' |
                                                                                           '%left' | '%merge' | '%no-default-prec' | '%nonassoc' | '%nterm' |
                                                                                           '%prec' | '%precedence' | '%printer' | '%right' | '%start' |
                                                                                           '%token' | '%type' | '%union' | ':' | ';' | '<' | '{' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] = (1157,                              (: ID BRACKETED_ID :)
                                                   1158)">                          <!-- CHAR_LITERAL BRACKETED_ID -->
                    <xsl:variable name="state" select="p:lookahead3W(24, $input, $state)"/> <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | BRACED_PREDICATE |
                                                                                                 EOF | '%%' | '%code' | '%default-prec' | '%destructor' |
                                                                                                 '%dprec' | '%empty' | '%expect' | '%expect-rr' | '%left' |
                                                                                                 '%merge' | '%no-default-prec' | '%nonassoc' | '%nterm' |
                                                                                                 '%prec' | '%precedence' | '%printer' | '%right' | '%start' |
                                                                                                 '%token' | '%type' | '%union' | ':' | ';' | '<' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 14                                          (: EOF :)
                       or $state[$p:lk] = 15                                          (: '%%' :)
                       or $state[$p:lk] = 16                                          (: '%code' :)
                       or $state[$p:lk] = 17                                          (: '%default-prec' :)
                       or $state[$p:lk] = 20                                          (: '%destructor' :)
                       or $state[$p:lk] = 30                                          (: '%left' :)
                       or $state[$p:lk] = 34                                          (: '%no-default-prec' :)
                       or $state[$p:lk] = 36                                          (: '%nonassoc' :)
                       or $state[$p:lk] = 38                                          (: '%nterm' :)
                       or $state[$p:lk] = 43                                          (: '%precedence' :)
                       or $state[$p:lk] = 44                                          (: '%printer' :)
                       or $state[$p:lk] = 46                                          (: '%right' :)
                       or $state[$p:lk] = 48                                          (: '%start' :)
                       or $state[$p:lk] = 49                                          (: '%token' :)
                       or $state[$p:lk] = 51                                          (: '%type' :)
                       or $state[$p:lk] = 52                                          (: '%union' :)
                       or $state[$p:lk] = 56                                          (: ';' :)
                       or $state[$p:lk] = 63                                          (: '|' :)
                       or $state[$p:lk] = 7045                                        (: ID ':' :)
                       or $state[$p:lk] = 7046                                        (: CHAR_LITERAL ':' :)
                       or $state[$p:lk] = 902277                                      (: ID BRACKETED_ID ':' :)
                       or $state[$p:lk] = 902278">                                  <!-- CHAR_LITERAL BRACKETED_ID ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 11">                                <!-- BRACED_PREDICATE -->
                  <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- BRACED_PREDICATE -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 22">                                <!-- '%empty' -->
                  <xsl:variable name="state" select="p:consume(22, $input, $state)"/> <!-- '%empty' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 42">                                <!-- '%prec' -->
                  <xsl:variable name="state" select="p:consume(42, $input, $state)"/> <!-- '%prec' -->
                  <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/> <!-- WHITESPACE | STRING | ID | CHAR_LITERAL -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-symbol($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 21                                    (: '%dprec' :)
                             or $state[$p:l1] = 24                                    (: '%expect' :)
                             or $state[$p:l1] = 25">                                <!-- '%expect-rr' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 21">                          <!-- '%dprec' -->
                        <xsl:variable name="state" select="p:consume(21, $input, $state)"/> <!-- '%dprec' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 24">                          <!-- '%expect' -->
                        <xsl:variable name="state" select="p:consume(24, $input, $state)"/> <!-- '%expect' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consume(25, $input, $state)"/> <!-- '%expect-rr' -->
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/> <!-- WHITESPACE | INT_LITERAL -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- INT_LITERAL -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 32">                                <!-- '%merge' -->
                  <xsl:variable name="state" select="p:consume(32, $input, $state)"/> <!-- '%merge' -->
                  <xsl:variable name="state" select="p:lookahead1W(7, $input, $state)"/> <!-- WHITESPACE | '<' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-TAG($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 57                              (: '&lt;' :)
                                   or $state[$p:l1] = 62">                          <!-- '{' -->
                        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:parse-tag.opt($input, $state)
                        "/>
                        <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/> <!-- WHITESPACE | '{' -->
                        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:parse-BRACED_CODE($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:parse-symbol($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/> <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | BRACKETED_ID |
                                                                                               BRACED_PREDICATE | EOF | '%%' | '%code' | '%default-prec' |
                                                                                               '%destructor' | '%dprec' | '%empty' | '%expect' | '%expect-rr' |
                                                                                               '%left' | '%merge' | '%no-default-prec' | '%nonassoc' |
                                                                                               '%nterm' | '%prec' | '%precedence' | '%printer' | '%right' |
                                                                                               '%start' | '%token' | '%type' | '%union' | ';' | '<' | '{' |
                                                                                               '|' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-named_ref.opt($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-rhs-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rhs.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rhs" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-rhs-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rhs', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse named_ref.opt.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-named_ref.opt" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 9">                                         <!-- BRACKETED_ID -->
          <xsl:variable name="state" select="p:consume(9, $input, $state)"/>        <!-- BRACKETED_ID -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'named_ref.opt', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production rules (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rules-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/>     <!-- WHITESPACE | ID | CHAR_LITERAL | EOF | '%%' | '%code' |
                                                                                         '%default-prec' | '%destructor' | '%left' | '%no-default-prec' |
                                                                                         '%nonassoc' | '%nterm' | '%precedence' | '%printer' | '%right' |
                                                                                         '%start' | '%token' | '%type' | '%union' | ';' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 56                                         (: ';' :)
                      and $state[$p:l1] != 63">                                     <!-- '|' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 63">                                <!-- '|' -->
                  <xsl:variable name="state" select="p:consume(63, $input, $state)"/> <!-- '|' -->
                  <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | BRACED_PREDICATE |
                                                                                               EOF | '%%' | '%code' | '%default-prec' | '%destructor' |
                                                                                               '%dprec' | '%empty' | '%expect' | '%expect-rr' | '%left' |
                                                                                               '%merge' | '%no-default-prec' | '%nonassoc' | '%nterm' |
                                                                                               '%prec' | '%precedence' | '%printer' | '%right' | '%start' |
                                                                                               '%token' | '%type' | '%union' | ';' | '<' | '{' | '|' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-rhs($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(56, $input, $state)"/> <!-- ';' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-rules-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rules.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rules" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>         <!-- WHITESPACE | BRACKETED_ID | ':' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-named_ref.opt($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>          <!-- WHITESPACE | ':' -->
    <xsl:variable name="state" select="p:consume(55, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>         <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | BRACED_PREDICATE | EOF |
                                                                                         '%%' | '%code' | '%default-prec' | '%destructor' | '%dprec' |
                                                                                         '%empty' | '%expect' | '%expect-rr' | '%left' | '%merge' |
                                                                                         '%no-default-prec' | '%nonassoc' | '%nterm' | '%prec' | '%precedence' |
                                                                                         '%printer' | '%right' | '%start' | '%token' | '%type' | '%union' |
                                                                                         ';' | '<' | '{' | '|' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rhs($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-rules-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rules', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse rules_or_grammar_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rules_or_grammar_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 5                                             (: ID :)
                     or $state[$p:l1] = 6">                                         <!-- CHAR_LITERAL -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-rules($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-grammar_declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(6, $input, $state)"/>    <!-- WHITESPACE | ';' -->
          <xsl:variable name="state" select="p:consume(56, $input, $state)"/>       <!-- ';' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rules_or_grammar_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2                                             (: STRING :)
                     or $state[$p:l1] = 5                                             (: ID :)
                     or $state[$p:l1] = 62">                                        <!-- '{' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 5">                                   <!-- ID -->
                <xsl:variable name="state" select="p:consume(5, $input, $state)"/>  <!-- ID -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 2">                                   <!-- STRING -->
                <xsl:variable name="state" select="p:consume(2, $input, $state)"/>  <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-BRACED_CODE($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse variable.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-variable" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(5, $input, $state)"/>              <!-- ID -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'variable', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse union_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-union_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 5">                                         <!-- ID -->
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- ID -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'union_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse tag.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-tag" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 57">                                        <!-- '<' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-TAG($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 58">                                        <!-- '<*>' -->
          <xsl:variable name="state" select="p:consume(58, $input, $state)"/>       <!-- '<*>' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(59, $input, $state)"/>       <!-- '<>' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'tag', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse generic_symlist_item.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-generic_symlist_item" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2                                             (: STRING :)
                     or $state[$p:l1] = 5                                             (: ID :)
                     or $state[$p:l1] = 6">                                         <!-- CHAR_LITERAL -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-symbol($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-tag($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'generic_symlist_item', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production BRACED_CODE (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-BRACED_CODE-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>      <!-- BRACELESS_CODE | '{' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 64">                                      <!-- '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 12">                                <!-- BRACELESS_CODE -->
                  <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- BRACELESS_CODE -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-BRACED_CODE($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-BRACED_CODE-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse BRACED_CODE.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-BRACED_CODE" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(62, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-BRACED_CODE-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'BRACED_CODE', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse code_props_type.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-code_props_type" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- '%destructor' -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- '%destructor' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- '%printer' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'code_props_type', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse token_decl_for_prec.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-token_decl_for_prec" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- STRING -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-string_as_id($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-id($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(33, $input, $state)"/>   <!-- WHITESPACE | STRING | INT_LITERAL | ID | CHAR_LITERAL | PROLOGUE |
                                                                                         PERCENT_FLAG | '%%' | '%code' | '%default-prec' | '%define' |
                                                                                         '%defines' | '%destructor' | '%error-verbose' | '%expect' |
                                                                                         '%expect-rr' | '%file-prefix' | '%glr-parser' | '%initial-action' |
                                                                                         '%language' | '%left' | '%lex-param' | '%name-prefix' |
                                                                                         '%no-default-prec' | '%no-lines' | '%nonassoc' |
                                                                                         '%nondeterministic-parser' | '%nterm' | '%output' | '%param' |
                                                                                         '%parse-param' | '%precedence' | '%printer' | '%require' | '%right' |
                                                                                         '%skeleton' | '%start' | '%token' | '%token-table' | '%type' |
                                                                                         '%union' | '%verbose' | '%yacc' | ';' | '<' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-int.opt($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'token_decl_for_prec', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production token_decl_for_prec.1 (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-token_decl_for_prec.1-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-token_decl_for_prec($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1W(31, $input, $state)"/>     <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | PROLOGUE | PERCENT_FLAG |
                                                                                         '%%' | '%code' | '%default-prec' | '%define' | '%defines' |
                                                                                         '%destructor' | '%error-verbose' | '%expect' | '%expect-rr' |
                                                                                         '%file-prefix' | '%glr-parser' | '%initial-action' | '%language' |
                                                                                         '%left' | '%lex-param' | '%name-prefix' | '%no-default-prec' |
                                                                                         '%no-lines' | '%nonassoc' | '%nondeterministic-parser' | '%nterm' |
                                                                                         '%output' | '%param' | '%parse-param' | '%precedence' | '%printer' |
                                                                                         '%require' | '%right' | '%skeleton' | '%start' | '%token' |
                                                                                         '%token-table' | '%type' | '%union' | '%verbose' | '%yacc' | ';' |
                                                                                         '<' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 2                                          (: STRING :)
                      and $state[$p:l1] != 5                                          (: ID :)
                      and $state[$p:l1] != 6">                                      <!-- CHAR_LITERAL -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-token_decl_for_prec.1-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse token_decl_for_prec.1.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-token_decl_for_prec.1" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-token_decl_for_prec.1-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'token_decl_for_prec.1', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse precedence_declarator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-precedence_declarator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- '%left' -->
          <xsl:variable name="state" select="p:consume(30, $input, $state)"/>       <!-- '%left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- '%right' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- '%right' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 36">                                        <!-- '%nonassoc' -->
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- '%nonassoc' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- '%precedence' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'precedence_declarator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse symbol.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-symbol" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- STRING -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-string_as_id($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-id($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'symbol', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production symbol_decl.1 (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-symbol_decl.1-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-symbol($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1W(31, $input, $state)"/>     <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | PROLOGUE | PERCENT_FLAG |
                                                                                         '%%' | '%code' | '%default-prec' | '%define' | '%defines' |
                                                                                         '%destructor' | '%error-verbose' | '%expect' | '%expect-rr' |
                                                                                         '%file-prefix' | '%glr-parser' | '%initial-action' | '%language' |
                                                                                         '%left' | '%lex-param' | '%name-prefix' | '%no-default-prec' |
                                                                                         '%no-lines' | '%nonassoc' | '%nondeterministic-parser' | '%nterm' |
                                                                                         '%output' | '%param' | '%parse-param' | '%precedence' | '%printer' |
                                                                                         '%require' | '%right' | '%skeleton' | '%start' | '%token' |
                                                                                         '%token-table' | '%type' | '%union' | '%verbose' | '%yacc' | ';' |
                                                                                         '<' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 2                                          (: STRING :)
                      and $state[$p:l1] != 5                                          (: ID :)
                      and $state[$p:l1] != 6">                                      <!-- CHAR_LITERAL -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-symbol_decl.1-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse symbol_decl.1.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-symbol_decl.1" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-symbol_decl.1-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'symbol_decl.1', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse string_as_id.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-string_as_id" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(2, $input, $state)"/>              <!-- STRING -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'string_as_id', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse alias.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-alias" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2                                             (: STRING :)
                     or $state[$p:l1] = 3">                                         <!-- TSTRING -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 2">                                   <!-- STRING -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-string_as_id($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(3, $input, $state)"/>  <!-- TSTRING -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'alias', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse int.opt.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-int.opt" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- INT_LITERAL -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- INT_LITERAL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'int.opt', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse id.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-id" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 5">                                         <!-- ID -->
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- ID -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- CHAR_LITERAL -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'id', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse token_decl.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-token_decl" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-id($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(34, $input, $state)"/>         <!-- WHITESPACE | STRING | TSTRING | INT_LITERAL | ID | CHAR_LITERAL |
                                                                                         PROLOGUE | PERCENT_FLAG | '%%' | '%code' | '%default-prec' |
                                                                                         '%define' | '%defines' | '%destructor' | '%error-verbose' | '%expect' |
                                                                                         '%expect-rr' | '%file-prefix' | '%glr-parser' | '%initial-action' |
                                                                                         '%language' | '%left' | '%lex-param' | '%name-prefix' |
                                                                                         '%no-default-prec' | '%no-lines' | '%nonassoc' |
                                                                                         '%nondeterministic-parser' | '%nterm' | '%output' | '%param' |
                                                                                         '%parse-param' | '%precedence' | '%printer' | '%require' | '%right' |
                                                                                         '%skeleton' | '%start' | '%token' | '%token-table' | '%type' |
                                                                                         '%union' | '%verbose' | '%yacc' | ';' | '<' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-int.opt($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(32, $input, $state)"/>         <!-- WHITESPACE | STRING | TSTRING | ID | CHAR_LITERAL | PROLOGUE |
                                                                                         PERCENT_FLAG | '%%' | '%code' | '%default-prec' | '%define' |
                                                                                         '%defines' | '%destructor' | '%error-verbose' | '%expect' |
                                                                                         '%expect-rr' | '%file-prefix' | '%glr-parser' | '%initial-action' |
                                                                                         '%language' | '%left' | '%lex-param' | '%name-prefix' |
                                                                                         '%no-default-prec' | '%no-lines' | '%nonassoc' |
                                                                                         '%nondeterministic-parser' | '%nterm' | '%output' | '%param' |
                                                                                         '%parse-param' | '%precedence' | '%printer' | '%require' | '%right' |
                                                                                         '%skeleton' | '%start' | '%token' | '%token-table' | '%type' |
                                                                                         '%union' | '%verbose' | '%yacc' | ';' | '<' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-alias($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'token_decl', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production token_decl.1 (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-token_decl.1-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-token_decl($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>     <!-- WHITESPACE | ID | CHAR_LITERAL | PROLOGUE | PERCENT_FLAG | '%%' |
                                                                                         '%code' | '%default-prec' | '%define' | '%defines' | '%destructor' |
                                                                                         '%error-verbose' | '%expect' | '%expect-rr' | '%file-prefix' |
                                                                                         '%glr-parser' | '%initial-action' | '%language' | '%left' |
                                                                                         '%lex-param' | '%name-prefix' | '%no-default-prec' | '%no-lines' |
                                                                                         '%nonassoc' | '%nondeterministic-parser' | '%nterm' | '%output' |
                                                                                         '%param' | '%parse-param' | '%precedence' | '%printer' | '%require' |
                                                                                         '%right' | '%skeleton' | '%start' | '%token' | '%token-table' |
                                                                                         '%type' | '%union' | '%verbose' | '%yacc' | ';' | '<' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 5                                          (: ID :)
                      and $state[$p:l1] != 6">                                      <!-- CHAR_LITERAL -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-token_decl.1-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse token_decl.1.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-token_decl.1" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-token_decl.1-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'token_decl.1', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production TAG (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-TAG-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>      <!-- ANGLELESS_CODE | '<' | '>' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 61">                                      <!-- '>' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 8">                                 <!-- ANGLELESS_CODE -->
                  <xsl:variable name="state" select="p:consume(8, $input, $state)"/> <!-- ANGLELESS_CODE -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-TAG($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-TAG-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse TAG.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-TAG" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(57, $input, $state)"/>             <!-- '<' -->
    <xsl:variable name="state" select="p:parse-TAG-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(61, $input, $state)"/>             <!-- '>' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'TAG', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production token_decls (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-token_decls-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 57">                                     <!-- '<' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-TAG($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/> <!-- WHITESPACE | ID | CHAR_LITERAL -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-token_decl.1($input, $state)
            "/>
            <xsl:sequence select="p:parse-token_decls-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse token_decls.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-token_decls" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 57">                                        <!-- '<' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-TAG($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/>         <!-- WHITESPACE | ID | CHAR_LITERAL -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-token_decl.1($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-token_decls-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'token_decls', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse nterm_decls.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-nterm_decls" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-token_decls($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'nterm_decls', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production symbol_declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-symbol_declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 57">                                     <!-- '<' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-TAG($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/> <!-- WHITESPACE | STRING | ID | CHAR_LITERAL -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-symbol_decl.1($input, $state)
            "/>
            <xsl:sequence select="p:parse-symbol_declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production symbol_declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-symbol_declaration-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 57">                                     <!-- '<' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-TAG($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/> <!-- WHITESPACE | STRING | ID | CHAR_LITERAL -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-token_decl_for_prec.1($input, $state)
            "/>
            <xsl:sequence select="p:parse-symbol_declaration-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse symbol_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-symbol_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 38">                                        <!-- '%nterm' -->
          <xsl:variable name="state" select="p:consume(38, $input, $state)"/>       <!-- '%nterm' -->
          <xsl:variable name="state" select="p:lookahead1W(16, $input, $state)"/>   <!-- WHITESPACE | ID | CHAR_LITERAL | '<' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-nterm_decls($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- '%token' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- '%token' -->
          <xsl:variable name="state" select="p:lookahead1W(16, $input, $state)"/>   <!-- WHITESPACE | ID | CHAR_LITERAL | '<' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-token_decls($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 51">                                        <!-- '%type' -->
          <xsl:variable name="state" select="p:consume(51, $input, $state)"/>       <!-- '%type' -->
          <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>   <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | '<' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 57">                                  <!-- '<' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-TAG($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/>   <!-- WHITESPACE | STRING | ID | CHAR_LITERAL -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-symbol_decl.1($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-symbol_declaration-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-precedence_declarator($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>   <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | '<' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 57">                                  <!-- '<' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-TAG($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/>   <!-- WHITESPACE | STRING | ID | CHAR_LITERAL -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-token_decl_for_prec.1($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-symbol_declaration-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'symbol_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production grammar_declaration (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-grammar_declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(18, $input, $state)"/>     <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | '<' | '<*>' | '<>' -->
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-generic_symlist_item($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1W(35, $input, $state)"/>     <!-- WHITESPACE | STRING | ID | CHAR_LITERAL | PROLOGUE | PERCENT_FLAG |
                                                                                         '%%' | '%code' | '%default-prec' | '%define' | '%defines' |
                                                                                         '%destructor' | '%error-verbose' | '%expect' | '%expect-rr' |
                                                                                         '%file-prefix' | '%glr-parser' | '%initial-action' | '%language' |
                                                                                         '%left' | '%lex-param' | '%name-prefix' | '%no-default-prec' |
                                                                                         '%no-lines' | '%nonassoc' | '%nondeterministic-parser' | '%nterm' |
                                                                                         '%output' | '%param' | '%parse-param' | '%precedence' | '%printer' |
                                                                                         '%require' | '%right' | '%skeleton' | '%start' | '%token' |
                                                                                         '%token-table' | '%type' | '%union' | '%verbose' | '%yacc' | ';' |
                                                                                         '<' | '<*>' | '<>' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 2                                          (: STRING :)
                      and $state[$p:l1] != 5                                          (: ID :)
                      and $state[$p:l1] != 6                                          (: CHAR_LITERAL :)
                      and $state[$p:l1] != 57                                         (: '&lt;' :)
                      and $state[$p:l1] != 58                                         (: '&lt;*>' :)
                      and $state[$p:l1] != 59">                                     <!-- '<>' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-grammar_declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse grammar_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-grammar_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- '%start' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- '%start' -->
          <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/>   <!-- WHITESPACE | STRING | ID | CHAR_LITERAL -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-symbol($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20                                            (: '%destructor' :)
                     or $state[$p:l1] = 44">                                        <!-- '%printer' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-code_props_type($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/>    <!-- WHITESPACE | '{' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-BRACED_CODE($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-grammar_declaration-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- '%default-prec' -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- '%default-prec' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 34">                                        <!-- '%no-default-prec' -->
          <xsl:variable name="state" select="p:consume(34, $input, $state)"/>       <!-- '%no-default-prec' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16                                            (: '%code' :)
                     or $state[$p:l1] = 52">                                        <!-- '%union' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 16">                                  <!-- '%code' -->
                <xsl:variable name="state" select="p:consume(16, $input, $state)"/> <!-- '%code' -->
                <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/> <!-- WHITESPACE | ID | '{' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 5">                             <!-- ID -->
                      <xsl:variable name="state" select="p:consume(5, $input, $state)"/> <!-- ID -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(52, $input, $state)"/> <!-- '%union' -->
                <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/> <!-- WHITESPACE | ID | '{' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-union_name($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/>    <!-- WHITESPACE | '{' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-BRACED_CODE($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-symbol_declaration($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'grammar_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production prologue_declaration (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-prologue_declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/>      <!-- WHITESPACE | '{' -->
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-BRACED_CODE($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1W(28, $input, $state)"/>     <!-- WHITESPACE | PROLOGUE | PERCENT_FLAG | '%%' | '%code' |
                                                                                         '%default-prec' | '%define' | '%defines' | '%destructor' |
                                                                                         '%error-verbose' | '%expect' | '%expect-rr' | '%file-prefix' |
                                                                                         '%glr-parser' | '%initial-action' | '%language' | '%left' |
                                                                                         '%lex-param' | '%name-prefix' | '%no-default-prec' | '%no-lines' |
                                                                                         '%nonassoc' | '%nondeterministic-parser' | '%nterm' | '%output' |
                                                                                         '%param' | '%parse-param' | '%precedence' | '%printer' | '%require' |
                                                                                         '%right' | '%skeleton' | '%start' | '%token' | '%token-table' |
                                                                                         '%type' | '%union' | '%verbose' | '%yacc' | ';' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 62">                                     <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-prologue_declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse prologue_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-prologue_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- PROLOGUE -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- PROLOGUE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- PERCENT_FLAG -->
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- PERCENT_FLAG -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- '%define' -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- '%define' -->
          <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>    <!-- WHITESPACE | ID -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-variable($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(29, $input, $state)"/>   <!-- WHITESPACE | STRING | ID | PROLOGUE | PERCENT_FLAG | '%%' | '%code' |
                                                                                         '%default-prec' | '%define' | '%defines' | '%destructor' |
                                                                                         '%error-verbose' | '%expect' | '%expect-rr' | '%file-prefix' |
                                                                                         '%glr-parser' | '%initial-action' | '%language' | '%left' |
                                                                                         '%lex-param' | '%name-prefix' | '%no-default-prec' | '%no-lines' |
                                                                                         '%nonassoc' | '%nondeterministic-parser' | '%nterm' | '%output' |
                                                                                         '%param' | '%parse-param' | '%precedence' | '%printer' | '%require' |
                                                                                         '%right' | '%skeleton' | '%start' | '%token' | '%token-table' |
                                                                                         '%type' | '%union' | '%verbose' | '%yacc' | ';' | '{' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-value($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- '%defines' -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- '%defines' -->
          <xsl:variable name="state" select="p:lookahead1W(27, $input, $state)"/>   <!-- WHITESPACE | STRING | PROLOGUE | PERCENT_FLAG | '%%' | '%code' |
                                                                                         '%default-prec' | '%define' | '%defines' | '%destructor' |
                                                                                         '%error-verbose' | '%expect' | '%expect-rr' | '%file-prefix' |
                                                                                         '%glr-parser' | '%initial-action' | '%language' | '%left' |
                                                                                         '%lex-param' | '%name-prefix' | '%no-default-prec' | '%no-lines' |
                                                                                         '%nonassoc' | '%nondeterministic-parser' | '%nterm' | '%output' |
                                                                                         '%param' | '%parse-param' | '%precedence' | '%printer' | '%require' |
                                                                                         '%right' | '%skeleton' | '%start' | '%token' | '%token-table' |
                                                                                         '%type' | '%union' | '%verbose' | '%yacc' | ';' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 2">                                   <!-- STRING -->
                <xsl:variable name="state" select="p:consume(2, $input, $state)"/>  <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- '%error-verbose' -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- '%error-verbose' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 24                                            (: '%expect' :)
                     or $state[$p:l1] = 25">                                        <!-- '%expect-rr' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 24">                                  <!-- '%expect' -->
                <xsl:variable name="state" select="p:consume(24, $input, $state)"/> <!-- '%expect' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(25, $input, $state)"/> <!-- '%expect-rr' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>    <!-- WHITESPACE | INT_LITERAL -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- INT_LITERAL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 26                                            (: '%file-prefix' :)
                     or $state[$p:l1] = 29                                            (: '%language' :)
                     or $state[$p:l1] = 33                                            (: '%name-prefix' :)
                     or $state[$p:l1] = 39                                            (: '%output' :)
                     or $state[$p:l1] = 45                                            (: '%require' :)
                     or $state[$p:l1] = 47">                                        <!-- '%skeleton' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 29">                                  <!-- '%language' -->
                <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '%language' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 45">                                  <!-- '%require' -->
                <xsl:variable name="state" select="p:consume(45, $input, $state)"/> <!-- '%require' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 47">                                  <!-- '%skeleton' -->
                <xsl:variable name="state" select="p:consume(47, $input, $state)"/> <!-- '%skeleton' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 26">                            <!-- '%file-prefix' -->
                      <xsl:variable name="state" select="p:consume(26, $input, $state)"/> <!-- '%file-prefix' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 33">                            <!-- '%name-prefix' -->
                      <xsl:variable name="state" select="p:consume(33, $input, $state)"/> <!-- '%name-prefix' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="state" select="p:consume(39, $input, $state)"/> <!-- '%output' -->
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1W(9, $input, $state)"/> <!-- WHITESPACE | STRING | '=' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 60">                            <!-- '=' -->
                      <xsl:variable name="state" select="p:consume(60, $input, $state)"/> <!-- '=' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(0, $input, $state)"/>    <!-- WHITESPACE | STRING -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- '%glr-parser' -->
          <xsl:variable name="state" select="p:consume(27, $input, $state)"/>       <!-- '%glr-parser' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 28">                                        <!-- '%initial-action' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '%initial-action' -->
          <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/>    <!-- WHITESPACE | '{' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-BRACED_CODE($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 35">                                        <!-- '%no-lines' -->
          <xsl:variable name="state" select="p:consume(35, $input, $state)"/>       <!-- '%no-lines' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- '%nondeterministic-parser' -->
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- '%nondeterministic-parser' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 31                                            (: '%lex-param' :)
                     or $state[$p:l1] = 40                                            (: '%param' :)
                     or $state[$p:l1] = 41">                                        <!-- '%parse-param' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 40">                                  <!-- '%param' -->
                <xsl:variable name="state" select="p:consume(40, $input, $state)"/> <!-- '%param' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 41">                                  <!-- '%parse-param' -->
                <xsl:variable name="state" select="p:consume(41, $input, $state)"/> <!-- '%parse-param' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(31, $input, $state)"/> <!-- '%lex-param' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-prologue_declaration-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 50">                                        <!-- '%token-table' -->
          <xsl:variable name="state" select="p:consume(50, $input, $state)"/>       <!-- '%token-table' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 53">                                        <!-- '%verbose' -->
          <xsl:variable name="state" select="p:consume(53, $input, $state)"/>       <!-- '%verbose' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 54">                                        <!-- '%yacc' -->
          <xsl:variable name="state" select="p:consume(54, $input, $state)"/>       <!-- '%yacc' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 56">                                        <!-- ';' -->
          <xsl:variable name="state" select="p:consume(56, $input, $state)"/>       <!-- ';' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-grammar_declaration($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'prologue_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production input (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-input-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>     <!-- WHITESPACE | PROLOGUE | PERCENT_FLAG | '%%' | '%code' |
                                                                                         '%default-prec' | '%define' | '%defines' | '%destructor' |
                                                                                         '%error-verbose' | '%expect' | '%expect-rr' | '%file-prefix' |
                                                                                         '%glr-parser' | '%initial-action' | '%language' | '%left' |
                                                                                         '%lex-param' | '%name-prefix' | '%no-default-prec' | '%no-lines' |
                                                                                         '%nonassoc' | '%nondeterministic-parser' | '%nterm' | '%output' |
                                                                                         '%param' | '%parse-param' | '%precedence' | '%printer' | '%require' |
                                                                                         '%right' | '%skeleton' | '%start' | '%token' | '%token-table' |
                                                                                         '%type' | '%union' | '%verbose' | '%yacc' | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 15">                                      <!-- '%%' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-prologue_declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-input-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production input (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-input-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(19, $input, $state)"/>     <!-- WHITESPACE | ID | CHAR_LITERAL | '%code' | '%default-prec' |
                                                                                         '%destructor' | '%left' | '%no-default-prec' | '%nonassoc' | '%nterm' |
                                                                                         '%precedence' | '%printer' | '%right' | '%start' | '%token' | '%type' |
                                                                                         '%union' -->
        <xsl:variable name="state" select="p:whitespace($input, $state)"/>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-rules_or_grammar_declaration($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1W(20, $input, $state)"/>     <!-- WHITESPACE | ID | CHAR_LITERAL | EOF | '%%' | '%code' |
                                                                                         '%default-prec' | '%destructor' | '%left' | '%no-default-prec' |
                                                                                         '%nonassoc' | '%nterm' | '%precedence' | '%printer' | '%right' |
                                                                                         '%start' | '%token' | '%type' | '%union' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 14                                          (: EOF :)
                       or $state[$p:l1] = 15">                                      <!-- '%%' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-input-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse input.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-input" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-input-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(15, $input, $state)"/>             <!-- '%%' -->
    <xsl:variable name="state" select="p:parse-input-2($input, $state)"/>
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-epilogue.opt($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>          <!-- WHITESPACE | EOF -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- EOF -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'input', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x or $error/@ambiguous-input) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;',
          'while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:attribute name="b" select="$state[$p:b1]"/>
            <xsl:attribute name="e" select="$state[$p:e1]"/>
            <xsl:choose>
              <xsl:when test="$state[$p:l1] lt 0">
                <xsl:attribute name="s" select="- $state[$p:l1]"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="o" select="$state[$p:l1]"/>
                <xsl:attribute name="x" select="$code"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume whitespace.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:whitespace" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="end" select="$state[$p:b1]"/>
    <xsl:choose>
      <xsl:when test="$begin eq $end">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="whitespace">
          <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
        </xsl:variable>
        <xsl:sequence select="
          0,
          $state[$p:b0],
          $end,
          subsequence($state, $p:e0 + 1),
          $whitespace/node()
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Use p:match to fetch the next token, but skip any leading
   ! whitespace.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start.
   ! @param $token-set the valid token set id.
   ! @return a sequence of three values: the token code of the result
   ! token, with input string positions of token begin and end.
  -->
  <xsl:function name="p:matchW">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="match" select="p:match($input, $begin, $token-set)"/>
    <xsl:choose>
      <xsl:when test="$match[1] = 1">                                               <!-- WHITESPACE -->
        <xsl:sequence select="p:matchW($input, $match[3], $token-set)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$match"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:matchW($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:matchW($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 128 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:matchW($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 16384 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Parse start symbol input from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-input" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false()"/>
    <xsl:variable name="state" select="p:parse-input($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

</xsl:stylesheet>