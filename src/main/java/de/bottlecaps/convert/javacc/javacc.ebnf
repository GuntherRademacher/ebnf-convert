/* Grammar converted for REx from
 *
 *   http://java.net/projects/javacc/sources/svn/content/trunk/src/org/javacc/parser/JavaCC.jj
 *
 * Generate xquery module from this file:
 *
 *   REx -xquery -backtrack -tree javacc.ebnf
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

javacc_input ::=
  javacc_options
  "PARSER_BEGIN" "(" identifier ")"
  CompilationUnit
  "PARSER_END" "(" identifier ")"
  ( production )+
  EOF

javacc_options ::=
  ( "options"  "{" ( option_binding )* "}" )?

option_binding ::=
  ( IDENTIFIER | "LOOKAHEAD" | "IGNORE_CASE" | "static" )
  "="
  (
    IntegerLiteral
  |
    BooleanLiteral
  |
    StringLiteral
  )
  ";"


production ::=
  javacode_production
|
  regular_expr_production
|
  token_manager_decls
|
  bnf_production

javacode_production ::=
  "JAVACODE"
  AccessModifier
  ResultType
  identifier
  FormalParameters
  ( "throws"
    Name
    (
      "," Name
    )*
  )?
  Block

bnf_production ::=
  AccessModifier
  ResultType
  identifier
  FormalParameters
  ( "throws"
    Name
    (
      "," Name
    )*
  )?
  ":"
  Block
  "{" expansion_choices "}"

AccessModifier ::=
  ( "public" | "protected" | "private" )?

regular_expr_production ::=
  (
    "<" "*" ">"
  |
    "<"
      IDENTIFIER
      ( "," IDENTIFIER
      )*
    ">"
  )?
  regexpr_kind
  (
    "[" "IGNORE_CASE" "]"
  )?
  ":"
  "{" regexpr_spec ( "|" regexpr_spec )* "}"

token_manager_decls ::=
  "TOKEN_MGR_DECLS" ":"
  ClassOrInterfaceBody

regexpr_kind ::=
  "TOKEN"
|
  "SPECIAL_TOKEN"
|
  "SKIP"
|
  "MORE"

regexpr_spec ::=
  regular_expression
  (
    Block
  )?
  ( ":" IDENTIFIER
  )?

expansion_choices ::=
  expansion
  ( "|" expansion
  )*

expansion ::=
  ( "LOOKAHEAD" "(" local_lookahead ")"
  )?
  ( expansion_unit
  )+

local_lookahead ::=
  (
    /*
     * The lookahead of 1 is to turn off the warning message that lets
     * us know that an expansion choice can also start with an integer
     * literal because a primary expression can do the same.  But we
     * know that this is what we want.
     */
    IntegerLiteral
  )?
  ( ","
  )?
  ( expansion_choices
  )?
  ( ","
  )?
  ( "{"
        ( Expression )?
    "}"
  )?

expansion_unit ::=
  /*
   * We give this priority over primary expressions which use LOOKAHEAD as the
   * name of its identifier.
   */
  "LOOKAHEAD" "(" local_lookahead ")"
|
  Block
|
  "[" expansion_choices "]"
|
  "try" "{" expansion_choices "}"
  ("catch" "("
    ( Name IDENTIFIER )?
   ")"
    Block
  )*
  (
    "finally" Block
  )?
|
  (
    PrimaryExpression
    "="
  )?
  (
    identifier Arguments
  |
    regular_expression
  ( "." IDENTIFIER  )?
  )
|
  "(" expansion_choices ")"
  (  "+"
   | "*"
   | "?"
  )?

regular_expression ::=
  StringLiteral
|
  "<"
  (
    ( "#"
    )?
    identifier ":"
  )?
  complex_regular_expression_choices ">"
|
  "<" identifier ">"
|
  "<" "EOF" ">"

complex_regular_expression_choices ::=
  complex_regular_expression
  ( "|" complex_regular_expression
  )*

complex_regular_expression ::=
  ( complex_regular_expression_unit
  )+

complex_regular_expression_unit ::=
  StringLiteral
|
  "<" identifier ">"
|
  character_list
|
  "(" complex_regular_expression_choices ")"
  (  "+"
   | "*"
   | "?"
   | "{" IntegerLiteral
         ( ","  ( IntegerLiteral )? )?
     "}"
  )?

character_list ::=
  ("~"
  )?
  "[" ( character_descriptor
        ( "," character_descriptor
        )*
      )?
  "]"

character_descriptor ::=
  StringLiteral
  ( "-" StringLiteral
  )?

identifier ::=
  IDENTIFIER

/**********************************************
 * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
 **********************************************/

/*
 * The Java grammar is modified to use sequences of tokens
 * for the missing tokens - those that include "<<" and ">>".
 */

/*
 * The following production defines Java identifiers - it
 * includes the reserved words of JavaCC also.
 */

JavaIdentifier ::=
(
  IDENTIFIER
| "LOOKAHEAD"
| "IGNORE_CASE"
| "PARSER_BEGIN"
| "PARSER_END"
| "JAVACODE"
| "TOKEN"
| "SPECIAL_TOKEN"
| "MORE"
| "SKIP"
| "TOKEN_MGR_DECLS"
| "EOF"
)

/*
 * Program structuring syntax follows.
 */

CompilationUnit ::=
/*
 * The <EOF> is deleted since the compilation unit is embedded
 * within grammar code.
 */
  ( PackageDeclaration )?
  ( ImportDeclaration )*
  ( TypeDeclaration )*

PackageDeclaration ::=
  Modifiers "package" Name ";"

ImportDeclaration ::=
  "import" ( "static" )? Name ( "." "*" )? ";"

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

Modifiers ::=
 (
  (
   "public"
  |
   "static"
  |
   "protected"
  |
   "private"
  |
   "final"
  |
   "abstract"
  |
   "synchronized"
  |
   "native"
  |
   "transient"
  |
   "volatile"
  |
   "strictfp"
  |
   Annotation
  )
 )*

/*
 * Declaration syntax follows.
 */
TypeDeclaration ::=
  ";"
|
  Modifiers
  (
     ClassOrInterfaceDeclaration
   |
     EnumDeclaration
   |
     AnnotationTypeDeclaration
  )

ClassOrInterfaceDeclaration ::=
  ( "class" | "interface"  )
  IDENTIFIER
  ( TypeParameters )?
  ( ExtendsList )?
  ( ImplementsList )?
  ClassOrInterfaceBody

ExtendsList ::=
   "extends" ClassOrInterfaceType
   ( "," ClassOrInterfaceType  )*

ImplementsList ::=
   "implements" ClassOrInterfaceType
   ( "," ClassOrInterfaceType )*

EnumDeclaration ::=
  "enum" IDENTIFIER
  ( ImplementsList)?
  EnumBody

EnumBody ::=
   "{"
   ( EnumConstant ( "," EnumConstant )* )?
   ( "," )?
   ( ";" ( ClassOrInterfaceBodyDeclaration )* )?
   "}"

EnumConstant ::=
  Modifiers IDENTIFIER ( Arguments )? ( ClassOrInterfaceBody )?

TypeParameters ::=
   "<" TypeParameter ( "," TypeParameter )* ">"

TypeParameter ::=
   IDENTIFIER ( TypeBound )?

TypeBound ::=
   "extends" ClassOrInterfaceType ( "&" ClassOrInterfaceType )*

ClassOrInterfaceBody ::=
/*
 * Parsing this fills "tokens" with all tokens of the block
 * excluding the braces at each end.
 */
  "{"
  ( ClassOrInterfaceBodyDeclaration )*
  "}"

ClassOrInterfaceBodyDeclaration ::=
  Initializer
|
  Modifiers // Just get all the modifiers out of the way. If you want to do
            // more checks, pass the modifiers down to the member
  (
      ClassOrInterfaceDeclaration
    |
      EnumDeclaration
    |
      ConstructorDeclaration
    |
      FieldDeclaration
    |
      MethodDeclaration
  )
|
  ";"

FieldDeclaration ::=
  // Modifiers are already matched in the caller
  Type VariableDeclarator ( "," VariableDeclarator )* ";"

VariableDeclarator ::=
  VariableDeclaratorId ( "=" VariableInitializer )?

VariableDeclaratorId ::=
  IDENTIFIER ( "[" "]" )*

VariableInitializer ::=
  ArrayInitializer
|
  Expression

ArrayInitializer ::=
  "{" ( VariableInitializer ( "," VariableInitializer )* )? ( "," )? "}"

MethodDeclaration ::=
  // Modifiers already matched in the caller!
  ( TypeParameters )?
  ResultType
  MethodDeclarator ( "throws" NameList )?
  ( Block | ";" )

MethodDeclarator ::=
  IDENTIFIER FormalParameters ( "[" "]" )*

FormalParameters ::=
/*
 * Parsing this fills "tokens" with all tokens of the formal
 * parameters excluding the parentheses at each end.
 */
  "("
  ( FormalParameter ( "," FormalParameter )* )?
  ")"

FormalParameter ::=
  Modifiers Type ( "..." )? VariableDeclaratorId

ConstructorDeclaration ::=
  ( TypeParameters )?
  // Modifiers matched in the caller
  IDENTIFIER FormalParameters ( "throws" NameList )?
  "{"
    ( ExplicitConstructorInvocation )?
    ( BlockStatement )*
  "}"

ExplicitConstructorInvocation ::=
  "this" Arguments ";"
|
  ( PrimaryExpression "." )? "super" Arguments ";"

Initializer ::=
  ( "static" )? Block

/*
 * Type, name and expression syntax follows.
 */

Type ::=
   ReferenceType
 |
   PrimitiveType

ReferenceType ::=
   PrimitiveType ( "[" "]" )+
  |
   ( ClassOrInterfaceType ) ( "[" "]" )*

ClassOrInterfaceType ::=
  IDENTIFIER ( TypeArguments )?
  ( "." IDENTIFIER ( TypeArguments )? )*

TypeArguments ::=
   "<" TypeArgument ( "," TypeArgument )* ">"

TypeArgument ::=
   ReferenceType
 |
   "?" ( WildcardBounds )?

WildcardBounds ::=
   "extends" ReferenceType
 |
   "super" ReferenceType


PrimitiveType ::=
  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"

ResultType ::=
(
  "void"
|
  Type
)

Name ::=
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
  JavaIdentifier
  ( "." JavaIdentifier
  )*

NameList ::=
  Name ( "," Name )*

/*
 * Expression syntax follows.
 */

Expression ::=
/*
 * This expansion has been written this way instead of:
 *   Assignment | ConditionalExpression
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
  ConditionalExpression
  (
    AssignmentOperator Expression
  )?

AssignmentOperator ::=
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="

ConditionalExpression ::=
  ConditionalOrExpression ( "?" Expression ":" Expression )?

ConditionalOrExpression ::=
  ConditionalAndExpression ( "||" ConditionalAndExpression )*

ConditionalAndExpression ::=
  InclusiveOrExpression ( "&&" InclusiveOrExpression )*

InclusiveOrExpression ::=
  ExclusiveOrExpression ( "|" ExclusiveOrExpression )*

ExclusiveOrExpression ::=
  AndExpression ( "^" AndExpression )*

AndExpression ::=
  EqualityExpression ( "&" EqualityExpression )*

EqualityExpression ::=
  InstanceOfExpression ( ( "==" | "!=" ) InstanceOfExpression )*

InstanceOfExpression ::=
  RelationalExpression ( "instanceof" Type )?

RelationalExpression ::=
  ShiftExpression ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression )*

ShiftExpression ::=
  AdditiveExpression ( ( "<<" | RSIGNEDSHIFT | RUNSIGNEDSHIFT ) AdditiveExpression )*

AdditiveExpression ::=
  MultiplicativeExpression ( ( "+" | "-" ) MultiplicativeExpression )*

MultiplicativeExpression ::=
  UnaryExpression ( ( "*" | "/" | "%" ) UnaryExpression )*

UnaryExpression ::=
  ( "+" | "-" ) UnaryExpression
|
  PreIncrementExpression
|
  PreDecrementExpression
|
  UnaryExpressionNotPlusMinus

PreIncrementExpression ::=
  "++" PrimaryExpression

PreDecrementExpression ::=
  "--" PrimaryExpression

UnaryExpressionNotPlusMinus ::=
  ( "~" | "!" ) UnaryExpression
|
  CastExpression
|
  PostfixExpression

PostfixExpression ::=
  PrimaryExpression ( "++" | "--" )?

CastExpression ::=
  "(" Type ")" UnaryExpression
|
  "(" Type ")" UnaryExpressionNotPlusMinus

PrimaryExpression ::=
  PrimaryPrefix ( PrimarySuffix )*

MemberSelector ::=
  "." TypeArguments IDENTIFIER

PrimaryPrefix ::=
  Literal
|
  "this"
|
  "super" "." IDENTIFIER
|
  "(" Expression ")"
|
  AllocationExpression
|
  ResultType "." "class"
|
  Name

PrimarySuffix ::=
  "." "this"
|
  "." AllocationExpression
|
  MemberSelector
|
  "[" Expression "]"
|
  "." IDENTIFIER
|
  Arguments

Literal ::=
  INTEGER_LITERAL
|
  FLOATING_POINT_LITERAL
|
  CHARACTER_LITERAL
|
  STRING_LITERAL
|
  BooleanLiteral
|
  NullLiteral

IntegerLiteral ::=
  INTEGER_LITERAL


BooleanLiteral ::=
  "true"
|
  "false"

StringLiteral ::=
  STRING_LITERAL

NullLiteral ::=
  "null"

Arguments ::=
/*
 * Parsing this fills "tokens" with all tokens of the arguments
 * excluding the parentheses at each end.
 */
  "("
  ( ArgumentList )?
  ")"

ArgumentList ::=
  Expression ( "," Expression )*

AllocationExpression ::=
  "new" PrimitiveType ArrayDimsAndInits
|
  "new" ClassOrInterfaceType ( TypeArguments )?
    (
      ArrayDimsAndInits
    |
      Arguments ( ClassOrInterfaceBody )?
    )

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
ArrayDimsAndInits ::=
  ( "[" Expression "]" )+ ( "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer

/*
 * Statement syntax follows.
 */

Statement ::=
  LabeledStatement
|
  AssertStatement
|
  Block
|
  EmptyStatement
|
  StatementExpression ";"
|
  SwitchStatement
|
  IfStatement
|
  WhileStatement
|
  DoStatement
|
  ForStatement
|
  BreakStatement
|
  ContinueStatement
|
  ReturnStatement
|
  ThrowStatement
|
  SynchronizedStatement
|
  TryStatement

AssertStatement ::=
  "assert" Expression ( ":" Expression )? ";"

LabeledStatement ::=
  IDENTIFIER ":" Statement

Block ::=
/*
 * Parsing this fills "tokens" with all tokens of the block
 * excluding the braces at each end.
 */
  "{"
  ( BlockStatement )*
  "}"

BlockStatement ::=
  LocalVariableDeclaration ";"
|
  Statement
|
  ClassOrInterfaceDeclaration

LocalVariableDeclaration ::=
  Modifiers Type VariableDeclarator ( "," VariableDeclarator )*

EmptyStatement ::=
  ";"

StatementExpression ::=
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
  PreIncrementExpression
|
  PreDecrementExpression
|
  PrimaryExpression
  (
    "++"
  |
    "--"
  |
    AssignmentOperator Expression
  )?

SwitchStatement ::=
  "switch" "(" Expression ")" "{"
    ( SwitchLabel ( BlockStatement )* )*
  "}"

SwitchLabel ::=
  "case" Expression ":"
|
  "default" ":"

IfStatement ::=
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
  "if" "(" Expression ")" Statement ( "else" Statement )?

WhileStatement ::=
  "while" "(" Expression ")" Statement

DoStatement ::=
  "do" Statement "while" "(" Expression ")" ";"

ForStatement ::=
  "for" "("

  (
      Modifiers Type IDENTIFIER ":" Expression
    |
     ( ForInit )? ";" ( Expression )? ";" ( ForUpdate )?
  )

  ")" Statement

ForInit ::=
  LocalVariableDeclaration
|
  StatementExpressionList

StatementExpressionList ::=
  StatementExpression ( "," StatementExpression )*

ForUpdate ::=
  StatementExpressionList

BreakStatement ::=
  "break" ( IDENTIFIER )? ";"

ContinueStatement ::=
  "continue" ( IDENTIFIER )? ";"

ReturnStatement ::=
  "return"
  (
    Expression
  )?
  ";"

ThrowStatement ::=
  "throw"
  Expression
  ";"

SynchronizedStatement ::=
  "synchronized" "(" Expression ")" Block

TryStatement ::=
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
  "try" Block
  ( "catch" "(" FormalParameter ")" Block )*
  ( "finally" Block )?

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

RUNSIGNEDSHIFT ::=
  ( ">" ">" ">"
  )

RSIGNEDSHIFT ::=
  ( ">" ">"
  )

/* Annotation syntax follows. */

Annotation ::=
   NormalAnnotation
 |
   SingleMemberAnnotation
 |
   MarkerAnnotation

NormalAnnotation ::=
   "@" Name "(" ( MemberValuePairs )? ")"

MarkerAnnotation ::=
  "@" Name

SingleMemberAnnotation ::=
  "@" Name "(" MemberValue ")"

MemberValuePairs ::=
   MemberValuePair ( "," MemberValuePair )*

MemberValuePair ::=
    IDENTIFIER "=" MemberValue

MemberValue ::=
   Annotation
 |
   MemberValueArrayInitializer
 |
   ConditionalExpression

 MemberValueArrayInitializer ::=
  "{" MemberValue ( "," MemberValue )* ( "," )? "}"

/* Annotation Types. */

AnnotationTypeDeclaration ::=
  "@" "interface" IDENTIFIER AnnotationTypeBody

AnnotationTypeBody ::=
  "{" ( AnnotationTypeMemberDeclaration )* "}"

AnnotationTypeMemberDeclaration ::=
 Modifiers
 (
   Type IDENTIFIER "(" ")" ( DefaultValue )? ";"
  |
   ClassOrInterfaceDeclaration
  |
   EnumDeclaration
  |
   AnnotationTypeDeclaration
  |
   FieldDeclaration
 )
 |
   ( ";" )

DefaultValue ::=
  "default" MemberValue

_ ::= SKIP | SINGLE_LINE_COMMENT | MULTI_LINE_COMMENT
   /* ws:definition */

<?TOKENS?>

/* IDENTIFIERS */

IDENTIFIER ::= LETTER PART_LETTER*

LETTER ::= // all chars for which Character.isIdentifierStart is true
         "$"
       | [A-Z]
       | "_"
       | [a-z]
       | [#x00a2-#x00a5]
       | [#x00aa]
       | [#x00b5]
       | [#x00ba]
       | [#x00c0-#x00d6]
       | [#x00d8-#x00f6]
       | [#x00f8-#x021f]
       | [#x0222-#x0233]
       | [#x0250-#x02ad]
       | [#x02b0-#x02b8]
       | [#x02bb-#x02c1]
       | [#x02d0-#x02d1]
       | [#x02e0-#x02e4]
       | [#x02ee]
       | [#x037a]
       | [#x0386]
       | [#x0388-#x038a]
       | [#x038c]
       | [#x038e-#x03a1]
       | [#x03a3-#x03ce]
       | [#x03d0-#x03d7]
       | [#x03da-#x03f3]
       | [#x0400-#x0481]
       | [#x048c-#x04c4]
       | [#x04c7-#x04c8]
       | [#x04cb-#x04cc]
       | [#x04d0-#x04f5]
       | [#x04f8-#x04f9]
       | [#x0531-#x0556]
       | [#x0559]
       | [#x0561-#x0587]
       | [#x05d0-#x05ea]
       | [#x05f0-#x05f2]
       | [#x0621-#x063a]
       | [#x0640-#x064a]
       | [#x0671-#x06d3]
       | [#x06d5]
       | [#x06e5-#x06e6]
       | [#x06fa-#x06fc]
       | [#x0710]
       | [#x0712-#x072c]
       | [#x0780-#x07a5]
       | [#x0905-#x0939]
       | [#x093d]
       | [#x0950]
       | [#x0958-#x0961]
       | [#x0985-#x098c]
       | [#x098f-#x0990]
       | [#x0993-#x09a8]
       | [#x09aa-#x09b0]
       | [#x09b2]
       | [#x09b6-#x09b9]
       | [#x09dc-#x09dd]
       | [#x09df-#x09e1]
       | [#x09f0-#x09f3]
       | [#x0a05-#x0a0a]
       | [#x0a0f-#x0a10]
       | [#x0a13-#x0a28]
       | [#x0a2a-#x0a30]
       | [#x0a32-#x0a33]
       | [#x0a35-#x0a36]
       | [#x0a38-#x0a39]
       | [#x0a59-#x0a5c]
       | [#x0a5e]
       | [#x0a72-#x0a74]
       | [#x0a85-#x0a8b]
       | [#x0a8d]
       | [#x0a8f-#x0a91]
       | [#x0a93-#x0aa8]
       | [#x0aaa-#x0ab0]
       | [#x0ab2-#x0ab3]
       | [#x0ab5-#x0ab9]
       | [#x0abd]
       | [#x0ad0]
       | [#x0ae0]
       | [#x0b05-#x0b0c]
       | [#x0b0f-#x0b10]
       | [#x0b13-#x0b28]
       | [#x0b2a-#x0b30]
       | [#x0b32-#x0b33]
       | [#x0b36-#x0b39]
       | [#x0b3d]
       | [#x0b5c-#x0b5d]
       | [#x0b5f-#x0b61]
       | [#x0b85-#x0b8a]
       | [#x0b8e-#x0b90]
       | [#x0b92-#x0b95]
       | [#x0b99-#x0b9a]
       | [#x0b9c]
       | [#x0b9e-#x0b9f]
       | [#x0ba3-#x0ba4]
       | [#x0ba8-#x0baa]
       | [#x0bae-#x0bb5]
       | [#x0bb7-#x0bb9]
       | [#x0c05-#x0c0c]
       | [#x0c0e-#x0c10]
       | [#x0c12-#x0c28]
       | [#x0c2a-#x0c33]
       | [#x0c35-#x0c39]
       | [#x0c60-#x0c61]
       | [#x0c85-#x0c8c]
       | [#x0c8e-#x0c90]
       | [#x0c92-#x0ca8]
       | [#x0caa-#x0cb3]
       | [#x0cb5-#x0cb9]
       | [#x0cde]
       | [#x0ce0-#x0ce1]
       | [#x0d05-#x0d0c]
       | [#x0d0e-#x0d10]
       | [#x0d12-#x0d28]
       | [#x0d2a-#x0d39]
       | [#x0d60-#x0d61]
       | [#x0d85-#x0d96]
       | [#x0d9a-#x0db1]
       | [#x0db3-#x0dbb]
       | [#x0dbd]
       | [#x0dc0-#x0dc6]
       | [#x0e01-#x0e30]
       | [#x0e32-#x0e33]
       | [#x0e3f-#x0e46]
       | [#x0e81-#x0e82]
       | [#x0e84]
       | [#x0e87-#x0e88]
       | [#x0e8a]
       | [#x0e8d]
       | [#x0e94-#x0e97]
       | [#x0e99-#x0e9f]
       | [#x0ea1-#x0ea3]
       | [#x0ea5]
       | [#x0ea7]
       | [#x0eaa-#x0eab]
       | [#x0ead-#x0eb0]
       | [#x0eb2-#x0eb3]
       | [#x0ebd]
       | [#x0ec0-#x0ec4]
       | [#x0ec6]
       | [#x0edc-#x0edd]
       | [#x0f00]
       | [#x0f40-#x0f47]
       | [#x0f49-#x0f6a]
       | [#x0f88-#x0f8b]
       | [#x1000-#x1021]
       | [#x1023-#x1027]
       | [#x1029-#x102a]
       | [#x1050-#x1055]
       | [#x10a0-#x10c5]
       | [#x10d0-#x10f6]
       | [#x1100-#x1159]
       | [#x115f-#x11a2]
       | [#x11a8-#x11f9]
       | [#x1200-#x1206]
       | [#x1208-#x1246]
       | [#x1248]
       | [#x124a-#x124d]
       | [#x1250-#x1256]
       | [#x1258]
       | [#x125a-#x125d]
       | [#x1260-#x1286]
       | [#x1288]
       | [#x128a-#x128d]
       | [#x1290-#x12ae]
       | [#x12b0]
       | [#x12b2-#x12b5]
       | [#x12b8-#x12be]
       | [#x12c0]
       | [#x12c2-#x12c5]
       | [#x12c8-#x12ce]
       | [#x12d0-#x12d6]
       | [#x12d8-#x12ee]
       | [#x12f0-#x130e]
       | [#x1310]
       | [#x1312-#x1315]
       | [#x1318-#x131e]
       | [#x1320-#x1346]
       | [#x1348-#x135a]
       | [#x13a0-#x13f4]
       | [#x1401-#x166c]
       | [#x166f-#x1676]
       | [#x1681-#x169a]
       | [#x16a0-#x16ea]
       | [#x1780-#x17b3]
       | [#x17db]
       | [#x1820-#x1877]
       | [#x1880-#x18a8]
       | [#x1e00-#x1e9b]
       | [#x1ea0-#x1ef9]
       | [#x1f00-#x1f15]
       | [#x1f18-#x1f1d]
       | [#x1f20-#x1f45]
       | [#x1f48-#x1f4d]
       | [#x1f50-#x1f57]
       | [#x1f59]
       | [#x1f5b]
       | [#x1f5d]
       | [#x1f5f-#x1f7d]
       | [#x1f80-#x1fb4]
       | [#x1fb6-#x1fbc]
       | [#x1fbe]
       | [#x1fc2-#x1fc4]
       | [#x1fc6-#x1fcc]
       | [#x1fd0-#x1fd3]
       | [#x1fd6-#x1fdb]
       | [#x1fe0-#x1fec]
       | [#x1ff2-#x1ff4]
       | [#x1ff6-#x1ffc]
       | [#x203f-#x2040]
       | [#x207f]
       | [#x20a0-#x20af]
       | [#x2102]
       | [#x2107]
       | [#x210a-#x2113]
       | [#x2115]
       | [#x2119-#x211d]
       | [#x2124]
       | [#x2126]
       | [#x2128]
       | [#x212a-#x212d]
       | [#x212f-#x2131]
       | [#x2133-#x2139]
       | [#x2160-#x2183]
       | [#x3005-#x3007]
       | [#x3021-#x3029]
       | [#x3031-#x3035]
       | [#x3038-#x303a]
       | [#x3041-#x3094]
       | [#x309d-#x309e]
       | [#x30a1-#x30fe]
       | [#x3105-#x312c]
       | [#x3131-#x318e]
       | [#x31a0-#x31b7]
       | [#x3400-#x4db5]
       | [#x4e00-#x9fa5]
       | [#xa000-#xa48c]
       | [#xac00-#xd7a3]
       | [#xf900-#xfa2d]
       | [#xfb00-#xfb06]
       | [#xfb13-#xfb17]
       | [#xfb1d]
       | [#xfb1f-#xfb28]
       | [#xfb2a-#xfb36]
       | [#xfb38-#xfb3c]
       | [#xfb3e]
       | [#xfb40-#xfb41]
       | [#xfb43-#xfb44]
       | [#xfb46-#xfbb1]
       | [#xfbd3-#xfd3d]
       | [#xfd50-#xfd8f]
       | [#xfd92-#xfdc7]
       | [#xfdf0-#xfdfb]
       | [#xfe33-#xfe34]
       | [#xfe4d-#xfe4f]
       | [#xfe69]
       | [#xfe70-#xfe72]
       | [#xfe74]
       | [#xfe76-#xfefc]
       | [#xff04]
       | [#xff21-#xff3a]
       | [#xff3f]
       | [#xff41-#xff5a]
       | [#xff65-#xffbe]
       | [#xffc2-#xffc7]
       | [#xffca-#xffcf]
       | [#xffd2-#xffd7]
       | [#xffda-#xffdc]
       | [#xffe0-#xffe1]
       | [#xffe5-#xffe6]
PART_LETTER ::=
        // all chars for which Character.isIdentifierPart is true
         [#x0000-#x0008]
       | [#x000e-#x001b]
       | "$"
       | [0-9]
       | [A-Z]
       | "_"
       | [a-z]
       | [#x007f-#x009f]
       | [#x00a2-#x00a5]
       | [#x00aa]
       | [#x00b5]
       | [#x00ba]
       | [#x00c0-#x00d6]
       | [#x00d8-#x00f6]
       | [#x00f8-#x021f]
       | [#x0222-#x0233]
       | [#x0250-#x02ad]
       | [#x02b0-#x02b8]
       | [#x02bb-#x02c1]
       | [#x02d0-#x02d1]
       | [#x02e0-#x02e4]
       | [#x02ee]
       | [#x0300-#x034e]
       | [#x0360-#x0362]
       | [#x037a]
       | [#x0386]
       | [#x0388-#x038a]
       | [#x038c]
       | [#x038e-#x03a1]
       | [#x03a3-#x03ce]
       | [#x03d0-#x03d7]
       | [#x03da-#x03f3]
       | [#x0400-#x0481]
       | [#x0483-#x0486]
       | [#x048c-#x04c4]
       | [#x04c7-#x04c8]
       | [#x04cb-#x04cc]
       | [#x04d0-#x04f5]
       | [#x04f8-#x04f9]
       | [#x0531-#x0556]
       | [#x0559]
       | [#x0561-#x0587]
       | [#x0591-#x05a1]
       | [#x05a3-#x05b9]
       | [#x05bb-#x05bd]
       | [#x05bf]
       | [#x05c1-#x05c2]
       | [#x05c4]
       | [#x05d0-#x05ea]
       | [#x05f0-#x05f2]
       | [#x0621-#x063a]
       | [#x0640-#x0655]
       | [#x0660-#x0669]
       | [#x0670-#x06d3]
       | [#x06d5-#x06dc]
       | [#x06df-#x06e8]
       | [#x06ea-#x06ed]
       | [#x06f0-#x06fc]
       | [#x070f-#x072c]
       | [#x0730-#x074a]
       | [#x0780-#x07b0]
       | [#x0901-#x0903]
       | [#x0905-#x0939]
       | [#x093c-#x094d]
       | [#x0950-#x0954]
       | [#x0958-#x0963]
       | [#x0966-#x096f]
       | [#x0981-#x0983]
       | [#x0985-#x098c]
       | [#x098f-#x0990]
       | [#x0993-#x09a8]
       | [#x09aa-#x09b0]
       | [#x09b2]
       | [#x09b6-#x09b9]
       | [#x09bc]
       | [#x09be-#x09c4]
       | [#x09c7-#x09c8]
       | [#x09cb-#x09cd]
       | [#x09d7]
       | [#x09dc-#x09dd]
       | [#x09df-#x09e3]
       | [#x09e6-#x09f3]
       | [#x0a02]
       | [#x0a05-#x0a0a]
       | [#x0a0f-#x0a10]
       | [#x0a13-#x0a28]
       | [#x0a2a-#x0a30]
       | [#x0a32-#x0a33]
       | [#x0a35-#x0a36]
       | [#x0a38-#x0a39]
       | [#x0a3c]
       | [#x0a3e-#x0a42]
       | [#x0a47-#x0a48]
       | [#x0a4b-#x0a4d]
       | [#x0a59-#x0a5c]
       | [#x0a5e]
       | [#x0a66-#x0a74]
       | [#x0a81-#x0a83]
       | [#x0a85-#x0a8b]
       | [#x0a8d]
       | [#x0a8f-#x0a91]
       | [#x0a93-#x0aa8]
       | [#x0aaa-#x0ab0]
       | [#x0ab2-#x0ab3]
       | [#x0ab5-#x0ab9]
       | [#x0abc-#x0ac5]
       | [#x0ac7-#x0ac9]
       | [#x0acb-#x0acd]
       | [#x0ad0]
       | [#x0ae0]
       | [#x0ae6-#x0aef]
       | [#x0b01-#x0b03]
       | [#x0b05-#x0b0c]
       | [#x0b0f-#x0b10]
       | [#x0b13-#x0b28]
       | [#x0b2a-#x0b30]
       | [#x0b32-#x0b33]
       | [#x0b36-#x0b39]
       | [#x0b3c-#x0b43]
       | [#x0b47-#x0b48]
       | [#x0b4b-#x0b4d]
       | [#x0b56-#x0b57]
       | [#x0b5c-#x0b5d]
       | [#x0b5f-#x0b61]
       | [#x0b66-#x0b6f]
       | [#x0b82-#x0b83]
       | [#x0b85-#x0b8a]
       | [#x0b8e-#x0b90]
       | [#x0b92-#x0b95]
       | [#x0b99-#x0b9a]
       | [#x0b9c]
       | [#x0b9e-#x0b9f]
       | [#x0ba3-#x0ba4]
       | [#x0ba8-#x0baa]
       | [#x0bae-#x0bb5]
       | [#x0bb7-#x0bb9]
       | [#x0bbe-#x0bc2]
       | [#x0bc6-#x0bc8]
       | [#x0bca-#x0bcd]
       | [#x0bd7]
       | [#x0be7-#x0bef]
       | [#x0c01-#x0c03]
       | [#x0c05-#x0c0c]
       | [#x0c0e-#x0c10]
       | [#x0c12-#x0c28]
       | [#x0c2a-#x0c33]
       | [#x0c35-#x0c39]
       | [#x0c3e-#x0c44]
       | [#x0c46-#x0c48]
       | [#x0c4a-#x0c4d]
       | [#x0c55-#x0c56]
       | [#x0c60-#x0c61]
       | [#x0c66-#x0c6f]
       | [#x0c82-#x0c83]
       | [#x0c85-#x0c8c]
       | [#x0c8e-#x0c90]
       | [#x0c92-#x0ca8]
       | [#x0caa-#x0cb3]
       | [#x0cb5-#x0cb9]
       | [#x0cbe-#x0cc4]
       | [#x0cc6-#x0cc8]
       | [#x0cca-#x0ccd]
       | [#x0cd5-#x0cd6]
       | [#x0cde]
       | [#x0ce0-#x0ce1]
       | [#x0ce6-#x0cef]
       | [#x0d02-#x0d03]
       | [#x0d05-#x0d0c]
       | [#x0d0e-#x0d10]
       | [#x0d12-#x0d28]
       | [#x0d2a-#x0d39]
       | [#x0d3e-#x0d43]
       | [#x0d46-#x0d48]
       | [#x0d4a-#x0d4d]
       | [#x0d57]
       | [#x0d60-#x0d61]
       | [#x0d66-#x0d6f]
       | [#x0d82-#x0d83]
       | [#x0d85-#x0d96]
       | [#x0d9a-#x0db1]
       | [#x0db3-#x0dbb]
       | [#x0dbd]
       | [#x0dc0-#x0dc6]
       | [#x0dca]
       | [#x0dcf-#x0dd4]
       | [#x0dd6]
       | [#x0dd8-#x0ddf]
       | [#x0df2-#x0df3]
       | [#x0e01-#x0e3a]
       | [#x0e3f-#x0e4e]
       | [#x0e50-#x0e59]
       | [#x0e81-#x0e82]
       | [#x0e84]
       | [#x0e87-#x0e88]
       | [#x0e8a]
       | [#x0e8d]
       | [#x0e94-#x0e97]
       | [#x0e99-#x0e9f]
       | [#x0ea1-#x0ea3]
       | [#x0ea5]
       | [#x0ea7]
       | [#x0eaa-#x0eab]
       | [#x0ead-#x0eb9]
       | [#x0ebb-#x0ebd]
       | [#x0ec0-#x0ec4]
       | [#x0ec6]
       | [#x0ec8-#x0ecd]
       | [#x0ed0-#x0ed9]
       | [#x0edc-#x0edd]
       | [#x0f00]
       | [#x0f18-#x0f19]
       | [#x0f20-#x0f29]
       | [#x0f35]
       | [#x0f37]
       | [#x0f39]
       | [#x0f3e-#x0f47]
       | [#x0f49-#x0f6a]
       | [#x0f71-#x0f84]
       | [#x0f86-#x0f8b]
       | [#x0f90-#x0f97]
       | [#x0f99-#x0fbc]
       | [#x0fc6]
       | [#x1000-#x1021]
       | [#x1023-#x1027]
       | [#x1029-#x102a]
       | [#x102c-#x1032]
       | [#x1036-#x1039]
       | [#x1040-#x1049]
       | [#x1050-#x1059]
       | [#x10a0-#x10c5]
       | [#x10d0-#x10f6]
       | [#x1100-#x1159]
       | [#x115f-#x11a2]
       | [#x11a8-#x11f9]
       | [#x1200-#x1206]
       | [#x1208-#x1246]
       | [#x1248]
       | [#x124a-#x124d]
       | [#x1250-#x1256]
       | [#x1258]
       | [#x125a-#x125d]
       | [#x1260-#x1286]
       | [#x1288]
       | [#x128a-#x128d]
       | [#x1290-#x12ae]
       | [#x12b0]
       | [#x12b2-#x12b5]
       | [#x12b8-#x12be]
       | [#x12c0]
       | [#x12c2-#x12c5]
       | [#x12c8-#x12ce]
       | [#x12d0-#x12d6]
       | [#x12d8-#x12ee]
       | [#x12f0-#x130e]
       | [#x1310]
       | [#x1312-#x1315]
       | [#x1318-#x131e]
       | [#x1320-#x1346]
       | [#x1348-#x135a]
       | [#x1369-#x1371]
       | [#x13a0-#x13f4]
       | [#x1401-#x166c]
       | [#x166f-#x1676]
       | [#x1681-#x169a]
       | [#x16a0-#x16ea]
       | [#x1780-#x17d3]
       | [#x17db]
       | [#x17e0-#x17e9]
       | [#x180b-#x180e]
       | [#x1810-#x1819]
       | [#x1820-#x1877]
       | [#x1880-#x18a9]
       | [#x1e00-#x1e9b]
       | [#x1ea0-#x1ef9]
       | [#x1f00-#x1f15]
       | [#x1f18-#x1f1d]
       | [#x1f20-#x1f45]
       | [#x1f48-#x1f4d]
       | [#x1f50-#x1f57]
       | [#x1f59]
       | [#x1f5b]
       | [#x1f5d]
       | [#x1f5f-#x1f7d]
       | [#x1f80-#x1fb4]
       | [#x1fb6-#x1fbc]
       | [#x1fbe]
       | [#x1fc2-#x1fc4]
       | [#x1fc6-#x1fcc]
       | [#x1fd0-#x1fd3]
       | [#x1fd6-#x1fdb]
       | [#x1fe0-#x1fec]
       | [#x1ff2-#x1ff4]
       | [#x1ff6-#x1ffc]
       | [#x200c-#x200f]
       | [#x202a-#x202e]
       | [#x203f-#x2040]
       | [#x206a-#x206f]
       | [#x207f]
       | [#x20a0-#x20af]
       | [#x20d0-#x20dc]
       | [#x20e1]
       | [#x2102]
       | [#x2107]
       | [#x210a-#x2113]
       | [#x2115]
       | [#x2119-#x211d]
       | [#x2124]
       | [#x2126]
       | [#x2128]
       | [#x212a-#x212d]
       | [#x212f-#x2131]
       | [#x2133-#x2139]
       | [#x2160-#x2183]
       | [#x3005-#x3007]
       | [#x3021-#x302f]
       | [#x3031-#x3035]
       | [#x3038-#x303a]
       | [#x3041-#x3094]
       | [#x3099-#x309a]
       | [#x309d-#x309e]
       | [#x30a1-#x30fe]
       | [#x3105-#x312c]
       | [#x3131-#x318e]
       | [#x31a0-#x31b7]
       | [#x3400-#x4db5]
       | [#x4e00-#x9fa5]
       | [#xa000-#xa48c]
       | [#xac00-#xd7a3]
       | [#xf900-#xfa2d]
       | [#xfb00-#xfb06]
       | [#xfb13-#xfb17]
       | [#xfb1d-#xfb28]
       | [#xfb2a-#xfb36]
       | [#xfb38-#xfb3c]
       | [#xfb3e]
       | [#xfb40-#xfb41]
       | [#xfb43-#xfb44]
       | [#xfb46-#xfbb1]
       | [#xfbd3-#xfd3d]
       | [#xfd50-#xfd8f]
       | [#xfd92-#xfdc7]
       | [#xfdf0-#xfdfb]
       | [#xfe20-#xfe23]
       | [#xfe33-#xfe34]
       | [#xfe4d-#xfe4f]
       | [#xfe69]
       | [#xfe70-#xfe72]
       | [#xfe74]
       | [#xfe76-#xfefc]
       | [#xfeff]
       | [#xff04]
       | [#xff10-#xff19]
       | [#xff21-#xff3a]
       | [#xff3f]
       | [#xff41-#xff5a]
       | [#xff65-#xffbe]
       | [#xffc2-#xffc7]
       | [#xffca-#xffcf]
       | [#xffd2-#xffd7]
       | [#xffda-#xffdc]
       | [#xffe0-#xffe1]
       | [#xffe5-#xffe6]
       | [#xfff9-#xfffb]

/* Copyright  2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file contains the grammar and actions that describe
 * JavaCCParser.  When passed as input to JavaCCParser it generates
 * another copy of itself.  Hence JavaCCParser may be modified by
 * modifying this file, and therefore this file is to be considered
 * the master version of JavaCCParser.
 */

/*
 * The remainder of the tokens are exactly (except for the removal of tokens
 * containing ">>" and "<<") as in the Java grammar and must be diff equivalent
 * (again with the exceptions above) to it.
 */

/* WHITE SPACE */

SKIP ::=
( " "
| [#x9]
| [#xA]
| [#xD]
| [#xC]
)+

EOF ::= $

INTEGER_LITERAL ::=
        DECIMAL_LITERAL [lL]?
      | HEX_LITERAL [lL]?
      | OCTAL_LITERAL [lL]?

DECIMAL_LITERAL ::= [1-9] [0-9]*

HEX_LITERAL ::= "0" [xX] [0-9a-fA-F]+

OCTAL_LITERAL ::= "0" [0-7]*

FLOATING_POINT_LITERAL ::=
        DECIMAL_FLOATING_POINT_LITERAL
      | HEXADECIMAL_FLOATING_POINT_LITERAL

DECIMAL_FLOATING_POINT_LITERAL ::=
        [0-9]+ "." [0-9]* DECIMAL_EXPONENT? [fFdD]?
      | "." [0-9]+ DECIMAL_EXPONENT? [fFdD]?
      | [0-9]+ DECIMAL_EXPONENT [fFdD]?
      | [0-9]+ DECIMAL_EXPONENT? [fFdD]

DECIMAL_EXPONENT ::= [eE] [+-]? [0-9]+

HEXADECIMAL_FLOATING_POINT_LITERAL ::=
        "0" [xX] [0-9a-fA-F]+ "."? HEXADECIMAL_EXPONENT [fFdD]?
      | "0" [xX] [0-9a-fA-F]* "." [0-9a-fA-F]+ HEXADECIMAL_EXPONENT [fFdD]?

HEXADECIMAL_EXPONENT ::= [pP] [+-]? [0-9]+

CHARACTER_LITERAL ::=
      "'"
      (   [^'\#xA#xD]
        | ( ( "\" | "\u005c" )
            ( [ntbrf\'"]
            | [0-7] [0-7]?
            | [0-3] [0-7] [0-7]
            | "u" [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
            )
          )
      )
      "'"

STRING_LITERAL ::=
      '"'
      (   [^"\#xA#xD]
        | ( ( "\" | "\u005c" )
            ( [ntbrf\'"]
            | [0-7] [0-7]?
            | [0-3] [0-7] [0-7]
            | "u" [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
            )
          )
      )*
      '"'

SINGLE_LINE_COMMENT ::= "//" [^#xA#xD]* ( [#xA] | [#xD] [#xA]? )

MULTI_LINE_COMMENT? ::= "/*" .* "*/"

IDENTIFIER << "EOF" "IGNORE_CASE" "JAVACODE" "LOOKAHEAD" "MORE" "PARSER_BEGIN" "PARSER_END" "SKIP" "SPECIAL_TOKEN" "TOKEN" "TOKEN_MGR_DECLS" "abstract" "assert" "boolean" "break" "byte" "case" "catch" "char" "class" "continue" "default" "do" "double" "else" "enum" "false" "final" "finally" "float" "for" "if" "implements" "instanceof" "int" "interface" "long" "native" "new" "null" "package" "private" "protected" "public" "return" "short" "static" "strictfp" "super" "switch" "synchronized" "this" "throw" "transient" "true" "try" "void" "volatile" "while"
